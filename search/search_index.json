{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#bienvenidos-al-submodulo-javascript","title":"\ud83d\ude80 Bienvenidos al Subm\u00f3dulo JavaScript","text":"<p>\u00a1Bienvenidos a este apasionante viaje por el universo de JavaScript! Este curso est\u00e1 dise\u00f1ado para introducirte en el desarrollo y la programaci\u00f3n con uno de los lenguajes m\u00e1s poderosos y vers\u00e1tiles de la web. Tanto si eres un principiante como si ya tienes experiencia en programaci\u00f3n, este programa te proporcionar\u00e1 las competencias pr\u00e1cticas necesarias para destacar en la creaci\u00f3n de aplicaciones web din\u00e1micas e interactivas.</p>"},{"location":"#que-aprenderas-en-este-curso","title":"\u00bfQu\u00e9 aprender\u00e1s en este curso?","text":"<p>Este curso abarca una amplia gama de temas esenciales y avanzados, organizados en m\u00f3dulos pr\u00e1cticos:</p>"},{"location":"#fundamentos-de-javascript","title":"Fundamentos de JavaScript","text":"<ul> <li>Conceptos b\u00e1sicos: Aprender\u00e1s qu\u00e9 es JavaScript, su sintaxis, y su rol en el desarrollo web moderno.</li> <li>Manipulaci\u00f3n del DOM: Descubrir\u00e1s c\u00f3mo interactuar con elementos HTML y CSS para crear interfaces din\u00e1micas.</li> <li>Herramientas de desarrollo: Configurar\u00e1s entornos como Visual Studio Code, Node.js y npm para optimizar tu flujo de trabajo.</li> </ul>"},{"location":"#metodologia-del-curso","title":"Metodolog\u00eda del curso","text":"<p>El curso combina aprendizaje te\u00f3rico y pr\u00e1ctico para que desarrolles habilidades s\u00f3lidas:</p> <ul> <li>Clases te\u00f3ricas: Fundamentos claros sobre programaci\u00f3n, estructuras de datos y paradigmas de JavaScript.</li> <li>Ejercicios pr\u00e1cticos: Actividades guiadas para escribir c\u00f3digo, depurar errores y construir peque\u00f1as aplicaciones.</li> </ul>"},{"location":"#compromiso-de-el-sena","title":"Compromiso de El SENA","text":"<p>En El SENA, nuestro compromiso es tu desarrollo integral. Este curso no solo busca ense\u00f1arte las bases de JavaScript, sino tambi\u00e9n inspirarte a crear soluciones innovadoras que transformen la experiencia digital. Al finalizar este programa, tendr\u00e1s las competencias necesarias para desarrollar aplicaciones web interactivas, optimizar flujos de trabajo y contribuir a proyectos tecnol\u00f3gicos de vanguardia.</p>"},{"location":"#embarcate-en-esta-aventura-tecnologica","title":"\u00a1Emb\u00e1rcate en esta aventura tecnol\u00f3gica!","text":"<p>Estamos emocionados de acompa\u00f1arte en este proceso de aprendizaje. Con dedicaci\u00f3n y esfuerzo, pronto estar\u00e1s creando aplicaciones web funcionales, resolviendo problemas reales y participando en proyectos de desarrollo web innovadores.</p> <p>\u00a1Bienvenido al mundo de JavaScript!</p>"},{"location":"about/","title":"Acerca de","text":"<p>El Subm\u00f3dulo JavaScript es una iniciativa educativa del SENA, dise\u00f1ada para introducir a los estudiantes en el din\u00e1mico mundo de la programaci\u00f3n web con JavaScript, con \u00e9nfasis en herramientas clave como el manejo del DOM, APIs y desarrollo de aplicaciones interactivas. Este curso combina teor\u00eda y pr\u00e1ctica para ofrecer una base s\u00f3lida en el dise\u00f1o, desarrollo e implementaci\u00f3n de soluciones web aplicables a la industria moderna. Prop\u00f3sito del Curso</p> <p>Este curso tiene como objetivo formar a los estudiantes en el desarrollo de aplicaciones web con JavaScript, capacit\u00e1ndolos para resolver problemas reales, desde la creaci\u00f3n de interfaces din\u00e1micas hasta la integraci\u00f3n con APIs y servicios externos. Al finalizar, los participantes estar\u00e1n listos para aplicar sus habilidades en entornos profesionales, desarrollando soluciones innovadoras y participando en proyectos tecnol\u00f3gicos de alto impacto. \u00a1\u00danete a nosotros y comienza tu camino hacia el futuro del desarrollo web con JavaScript!</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"content/curso/","title":"Curso de Fundamentos de JavaScript","text":"<p>Este curso de Fundamentos de JavaScript est\u00e1 dise\u00f1ado para principiantes sin experiencia previa en programaci\u00f3n, con un enfoque pr\u00e1ctico, interactivo y orientado a proyectos. Consta de 10 clases de 6 horas cada una, impartidas por El SENA, con el objetivo de capacitar a los estudiantes para desarrollar aplicaciones web funcionales utilizando JavaScript moderno (ES6+). A continuaci\u00f3n, se detalla el plan completo, incluyendo objetivos, temas, metodolog\u00eda, actividades, distribuci\u00f3n del tiempo, recursos y consideraciones adicionales.</p>"},{"location":"content/curso/#clase-1-introduccion-a-javascript-y-primeros-pasos","title":"Clase 1: Introducci\u00f3n a JavaScript y Primeros Pasos","text":"<p>Objetivos </p> <ul> <li>Comprender qu\u00e9 es JavaScript y su rol en el desarrollo web.  </li> <li>Configurar un entorno de desarrollo funcional.  </li> <li>Escribir y ejecutar scripts b\u00e1sicos en JavaScript.  </li> </ul> <p>Temas </p> <ul> <li>Introducci\u00f3n a JavaScript: historia, usos y aplicaciones.  </li> <li>Configuraci\u00f3n del entorno: Visual Studio Code, Node.js, extensiones (Live Server, Prettier).  </li> <li>Primeros scripts: uso de <code>console.log</code>, <code>alert</code>.  </li> <li>Estructura b\u00e1sica de un proyecto web: HTML, CSS, JavaScript.  </li> </ul> <p>Metodolog\u00eda </p> <ul> <li>Teor\u00eda (1.5 horas): Presentaci\u00f3n sobre JavaScript y demostraci\u00f3n de configuraci\u00f3n del entorno.  </li> <li>Pr\u00e1ctica (3.5 horas): Ejercicios guiados y laboratorio para crear scripts.  </li> <li>Revisi\u00f3n (1 hora): Resoluci\u00f3n de dudas, discusi\u00f3n grupal y retroalimentaci\u00f3n.  </li> </ul> <p>Actividades Pr\u00e1cticas 1. Instalar y configurar VS Code y Node.js. 2. Crear un script que imprima \"\u00a1Hola, mundo!\" en la consola y en una ventana emergente. 3. Modificar un archivo HTML para incluir un script JavaScript que muestre un mensaje. 4. Mini-proyecto: Crear una p\u00e1gina web que muestre un saludo personalizado basado en un nombre ingresado en un <code>prompt</code>.  </p> <p>Distribuci\u00f3n del Tiempo </p> <ul> <li>Teor\u00eda: 1.5 horas (presentaci\u00f3n y demo).  </li> <li>Pr\u00e1ctica: 3.5 horas (configuraci\u00f3n: 1 hora, ejercicios: 1.5 horas, mini-proyecto: 1 hora).  </li> <li>Revisi\u00f3n: 1 hora (dudas y retroalimentaci\u00f3n).  </li> </ul> <p>Recursos </p> <ul> <li>Herramientas: Visual Studio Code, Node.js, navegador (Chrome/Firefox).  </li> <li>Materiales: Diapositivas introductorias, gu\u00eda de instalaci\u00f3n en PDF, plantilla HTML/CSS.  </li> <li>Referencias: MDN Web Docs - JavaScript, JavaScript.info - Introducci\u00f3n.  </li> </ul>"},{"location":"content/curso/#clase-2-sintaxis-y-operaciones-basicas","title":"Clase 2: Sintaxis y Operaciones B\u00e1sicas","text":"<p>Objetivos </p> <ul> <li>Dominar los tipos de datos y operadores b\u00e1sicos en JavaScript.  </li> <li>Utilizar entrada de usuario con <code>prompt</code>.  </li> <li>Crear scripts interactivos en la consola.  </li> </ul> <p>Temas </p> <ul> <li>Tipos de datos: <code>string</code>, <code>number</code>, <code>boolean</code>, <code>null</code>, <code>undefined</code>.  </li> <li>Declaraci\u00f3n de variables: <code>let</code>, <code>const</code>, <code>var</code>.  </li> <li>Operadores: aritm\u00e9ticos (+, -, *, /, %), comparaci\u00f3n (==, ===, !=), l\u00f3gicos (&amp;&amp;, ||, !).  </li> <li>Entrada de usuario con <code>prompt</code> y conversi\u00f3n de tipos.  </li> </ul> <p>Metodolog\u00eda </p> <ul> <li>Teor\u00eda (1.5 horas): Explicaci\u00f3n de tipos de datos y operadores con ejemplos en vivo.  </li> <li>Pr\u00e1ctica (3.5 horas): Ejercicios guiados y laboratorio para manipular variables.  </li> <li>Revisi\u00f3n (1 hora): Correcci\u00f3n de ejercicios y discusi\u00f3n grupal.  </li> </ul> <p>Actividades Pr\u00e1cticas 1. Declarar variables de diferentes tipos y mostrarlas en la consola. 2. Crear un programa que realice operaciones aritm\u00e9ticas con dos n\u00fameros ingresados por el usuario. 3. Comparar dos valores ingresados con <code>prompt</code> y mostrar si son iguales o diferentes. 4. Mini-proyecto: Calculadora interactiva en la consola que realice suma, resta, multiplicaci\u00f3n y divisi\u00f3n seg\u00fan la elecci\u00f3n del usuario.  </p> <p>Distribuci\u00f3n del Tiempo </p> <ul> <li>Teor\u00eda: 1.5 horas (explicaci\u00f3n y ejemplos).  </li> <li>Pr\u00e1ctica: 3.5 horas (ejercicios: 2 horas, mini-proyecto: 1.5 horas).  </li> <li>Revisi\u00f3n: 1 hora (correcci\u00f3n y dudas).  </li> </ul> <p>Recursos </p> <ul> <li>Herramientas: VS Code, Node.js, navegador.  </li> <li>Materiales: Diapositivas sobre sintaxis, ejemplos de c\u00f3digo comentados, gu\u00eda de operadores.  </li> <li>Referencias: MDN - Tipos de datos, JavaScript.info - Variables.  </li> </ul>"},{"location":"content/curso/#clase-3-control-de-flujo","title":"Clase 3: Control de Flujo","text":"<p>Objetivos </p> <ul> <li>Implementar estructuras condicionales y bucles para controlar el flujo de un programa.  </li> <li>Resolver problemas l\u00f3gicos con estructuras de control.  </li> <li>Crear programas interactivos con l\u00f3gica condicional.  </li> </ul> <p>Temas </p> <ul> <li>Condicionales: <code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>.  </li> <li>Bucles: <code>for</code>, <code>while</code>, <code>do-while</code>.  </li> <li>Instrucciones: <code>break</code>, <code>continue</code>.  </li> <li>Anidaci\u00f3n de condicionales y bucles.  </li> </ul> <p>Metodolog\u00eda </p> <ul> <li>Teor\u00eda (1.5 horas): Explicaci\u00f3n de estructuras de control con diagramas y ejemplos en vivo.  </li> <li>Pr\u00e1ctica (3.5 horas): Ejercicios guiados y laboratorio colaborativo.  </li> <li>Revisi\u00f3n (1 hora): Resoluci\u00f3n de ejercicios y discusi\u00f3n en grupo.  </li> </ul> <p>Actividades Pr\u00e1cticas 1. Crear un programa que determine si un n\u00famero es par o impar usando <code>if</code>. 2. Usar un bucle <code>for</code> para imprimir los n\u00fameros del 1 al 10. 3. Implementar un juego de adivinar un n\u00famero (el usuario ingresa un n\u00famero hasta acertar). 4. Mini-proyecto: Generador de tablas de multiplicaci\u00f3n que muestre la tabla de un n\u00famero ingresado por el usuario.  </p> <p>Distribuci\u00f3n del Tiempo </p> <ul> <li>Teor\u00eda: 1.5 horas (explicaci\u00f3n y demo).  </li> <li>Pr\u00e1ctica: 3.5 horas (ejercicios: 2 horas, mini-proyecto: 1.5 horas).  </li> <li>Revisi\u00f3n: 1 hora (correcci\u00f3n y dudas).  </li> </ul> <p>Recursos</p> <ul> <li>Herramientas: VS Code, navegador.  </li> <li>Materiales: Diapositivas sobre control de flujo, ejemplos de c\u00f3digo, gu\u00eda de bucles.  </li> <li>Referencias: MDN - Estructuras de control, JavaScript.info - Bucles.  </li> </ul>"},{"location":"content/curso/#clase-4-funciones-y-reutilizacion","title":"Clase 4: Funciones y Reutilizaci\u00f3n","text":"<p>Objetivos </p> <ul> <li>Definir y utilizar funciones para modularizar c\u00f3digo.  </li> <li>Comprender el concepto de par\u00e1metros y retorno.  </li> <li>Aplicar funciones en problemas pr\u00e1cticos.  </li> </ul> <p>Temas </p> <ul> <li>Declaraci\u00f3n de funciones: <code>function</code>, expresiones de funci\u00f3n, arrow functions.  </li> <li>Par\u00e1metros: valores por defecto, rest parameters.  </li> <li>Retorno de valores y \u00e1mbito (<code>scope</code>).  </li> <li>Llamadas a funciones y reutilizaci\u00f3n de c\u00f3digo.  </li> </ul> <p>Metodolog\u00eda </p> <ul> <li>Teor\u00eda (1.5 horas): Explicaci\u00f3n de funciones con ejemplos pr\u00e1cticos.  </li> <li>Pr\u00e1ctica (3.5 horas): Ejercicios guiados y laboratorio en grupos peque\u00f1os.  </li> <li>Revisi\u00f3n (1 hora): Correcci\u00f3n de ejercicios y retroalimentaci\u00f3n.  </li> </ul> <p>Actividades Pr\u00e1cticas </p> <ol> <li>Crear una funci\u00f3n que calcule el cuadrado de un n\u00famero.  </li> <li>Escribir una funci\u00f3n que valide si una cadena es vac\u00eda o no.  </li> <li>Implementar una funci\u00f3n que reciba dos n\u00fameros y devuelva el mayor.  </li> <li>Mini-proyecto: Conversor de unidades (temperatura: Celsius a Fahrenheit, o moneda: pesos a d\u00f3lares) usando funciones.  </li> </ol> <p>Distribuci\u00f3n del Tiempo </p> <ul> <li>Teor\u00eda: 1.5 horas (explicaci\u00f3n y demo).  </li> <li>Pr\u00e1ctica: 3.5 horas (ejercicios: 2 horas, mini-proyecto: 1.5 horas).  </li> <li>Revisi\u00f3n: 1 hora (correcci\u00f3n y dudas).  </li> </ul> <p>Recursos </p> <ul> <li>Herramientas: VS Code, navegador.  </li> <li>Materiales: Diapositivas sobre funciones, ejemplos de c\u00f3digo, gu\u00eda de par\u00e1metros.  </li> <li>Referencias: MDN - Funciones, JavaScript.info - Funciones.  </li> </ul>"},{"location":"content/curso/#clase-5-estructuras-de-datos-arreglos","title":"Clase 5: Estructuras de Datos: Arreglos","text":"<p>Objetivos </p> <ul> <li>Manipular arreglos para almacenar y procesar datos.  </li> <li>Utilizar m\u00e9todos de arreglos para operaciones comunes.  </li> <li>Crear programas que gestionen listas de datos.  </li> </ul> <p>Temas </p> <ul> <li>Creaci\u00f3n y acceso a arreglos.  </li> <li>M\u00e9todos: <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>forEach</code>, <code>map</code>.  </li> <li>Iteraci\u00f3n sobre arreglos: bucles y m\u00e9todos funcionales.  </li> <li>Arreglos multidimensionales (b\u00e1sico).  </li> </ul> <p>Metodolog\u00eda </p> <ul> <li>Teor\u00eda (1.5 horas): Explicaci\u00f3n de arreglos y m\u00e9todos con ejemplos en vivo.  </li> <li>Pr\u00e1ctica (3.5 horas): Ejercicios guiados y laboratorio colaborativo.  </li> <li>Revisi\u00f3n (1 hora): Resoluci\u00f3n de ejercicios y discusi\u00f3n grupal.  </li> </ul> <p>Actividades Pr\u00e1cticas </p> <ol> <li>Crear un arreglo de nombres y mostrarlos en la consola usando <code>forEach</code>.  </li> <li>Filtrar un arreglo de n\u00fameros para mostrar solo los mayores a 10.  </li> <li>Usar <code>map</code> para duplicar los valores de un arreglo num\u00e9rico.  </li> <li>Mini-proyecto: Lista de compras con funciones CRUD (crear, leer, actualizar, eliminar) usando arreglos.  </li> </ol> <p>Distribuci\u00f3n del Tiempo </p> <ul> <li>Teor\u00eda: 1.5 horas (explicaci\u00f3n y demo).  </li> <li>Pr\u00e1ctica: 3.5 horas (ejercicios: 2 horas, mini-proyecto: 1.5 horas).  </li> <li>Revisi\u00f3n: 1 hora (correcci\u00f3n y dudas).  </li> </ul> <p>Recursos </p> <ul> <li>Herramientas: VS Code, navegador.  </li> <li>Materiales: Diapositivas sobre arreglos, ejemplos de c\u00f3digo, gu\u00eda de m\u00e9todos.  </li> <li>Referencias: MDN - Arreglos, JavaScript.info - Arreglos.  </li> </ul>"},{"location":"content/curso/#clase-6-estructuras-de-datos-objetos","title":"Clase 6: Estructuras de Datos: Objetos","text":"<p>Objetivos </p> <ul> <li>Crear y manipular objetos para estructurar datos complejos.  </li> <li>Comprender el formato JSON y su uso.  </li> <li>Desarrollar aplicaciones que gestionen datos estructurados.  </li> </ul> <p>Temas </p> <ul> <li>Creaci\u00f3n de objetos: propiedades, m\u00e9todos.  </li> <li>Acceso a propiedades: notaci\u00f3n de punto y corchetes.  </li> <li>Objetos anidados y JSON.  </li> <li>Iteraci\u00f3n sobre objetos: <code>for...in</code>, <code>Object.keys</code>.  </li> </ul> <p>Metodolog\u00eda </p> <ul> <li>Teor\u00eda (1.5 horas): Explicaci\u00f3n de objetos y JSON con ejemplos pr\u00e1cticos.  </li> <li>Pr\u00e1ctica (3.5 horas): Ejercicios guiados y laboratorio en grupos.  </li> <li>Revisi\u00f3n (1 hora): Correcci\u00f3n de ejercicios y retroalimentaci\u00f3n.  </li> </ul> <p>Actividades Pr\u00e1cticas </p> <ol> <li>Crear un objeto que represente un estudiante (nombre, edad, notas).  </li> <li>Modificar propiedades de un objeto basado en entrada del usuario.  </li> <li>Convertir un objeto a JSON y mostrarlo en la consola.  </li> <li>Mini-proyecto: Simulador de agenda personal que permita agregar y mostrar eventos (fecha, descripci\u00f3n).  </li> </ol> <p>Distribuci\u00f3n del Tiempo </p> <ul> <li>Teor\u00eda: 1.5 horas (explicaci\u00f3n y demo).  </li> <li>Pr\u00e1ctica: 3.5 horas (ejercicios: 2 horas, mini-proyecto: 1.5 horas).  </li> <li>Revisi\u00f3n: 1 hora (correcci\u00f3n y dudas).  </li> </ul> <p>Recursos </p> <ul> <li>Herramientas: VS Code, navegador.  </li> <li>Materiales: Diapositivas sobre objetos, ejemplos de c\u00f3digo, gu\u00eda de JSON.  </li> <li>Referencias: MDN - Objetos, JavaScript.info - Objetos.  </li> </ul>"},{"location":"content/curso/#clase-7-introduccion-al-dom","title":"Clase 7: Introducci\u00f3n al DOM","text":"<p>Objetivos </p> <ul> <li>Acceder y modificar elementos HTML mediante el DOM.  </li> <li>Crear interfaces web din\u00e1micas.  </li> <li>Integrar JavaScript con HTML y CSS.  </li> </ul> <p>Temas </p> <ul> <li>Qu\u00e9 es el DOM y su estructura.  </li> <li>M\u00e9todos: <code>getElementById</code>, <code>querySelector</code>, <code>querySelectorAll</code>.  </li> <li>Modificaci\u00f3n: <code>innerHTML</code>, <code>textContent</code>, <code>style</code>.  </li> <li>Creaci\u00f3n y eliminaci\u00f3n de elementos: <code>createElement</code>, <code>appendChild</code>, <code>remove</code>.  </li> </ul> <p>Metodolog\u00eda </p> <ul> <li>Teor\u00eda (1.5 horas): Explicaci\u00f3n del DOM con demostraciones en vivo.  </li> <li>Pr\u00e1ctica (3.5 horas): Ejercicios guiados y laboratorio colaborativo.  </li> <li>Revisi\u00f3n (1 hora): Resoluci\u00f3n de ejercicios y discusi\u00f3n grupal.  </li> </ul> <p>Actividades Pr\u00e1cticas 1. Cambiar el texto de un elemento HTML usando <code>innerHTML</code>. 2. Modificar el color de fondo de una p\u00e1gina al hacer clic en un bot\u00f3n. 3. Crear una lista din\u00e1mica a partir de un arreglo. 4. Mini-proyecto: Generador de tarjetas din\u00e1micas que muestre informaci\u00f3n de productos (nombre, precio, descripci\u00f3n).  </p> <p>Distribuci\u00f3n del Tiempo </p> <ul> <li>Teor\u00eda: 1.5 horas (explicaci\u00f3n y demo).  </li> <li>Pr\u00e1ctica: 3.5 horas (ejercicios: 2 horas, mini-proyecto: 1.5 horas).  </li> <li>Revisi\u00f3n: 1 hora (correcci\u00f3n y dudas).  </li> </ul> <p>Recursos </p> <ul> <li>Herramientas: VS Code, navegador.  </li> <li>Materiales: Diapositivas sobre el DOM, plantilla HTML/CSS, ejemplos de c\u00f3digo.  </li> <li>Referencias: MDN - DOM, JavaScript.info - DOM.  </li> </ul>"},{"location":"content/curso/#clase-8-manejo-de-eventos","title":"Clase 8: Manejo de Eventos","text":"<p>Objetivos </p> <ul> <li>Implementar eventos para crear aplicaciones interactivas.  </li> <li>Utilizar <code>addEventListener</code> para manejar interacciones del usuario.  </li> <li>Validar entradas en formularios din\u00e1micos.  </li> </ul> <p>Temas </p> <ul> <li>Introducci\u00f3n a eventos: <code>click</code>, <code>input</code>, <code>submit</code>, <code>keydown</code>.  </li> <li>Uso de <code>addEventListener</code> y funciones callback.  </li> <li>Propagaci\u00f3n de eventos: bubbling y capturing (b\u00e1sico).  </li> <li>Prevenci\u00f3n de comportamiento por defecto: <code>preventDefault</code>.  </li> </ul> <p>Metodolog\u00eda </p> <ul> <li>Teor\u00eda (1.5 horas): Explicaci\u00f3n de eventos con ejemplos en vivo.  </li> <li>Pr\u00e1ctica (3.5 horas): Ejercicios guiados y laboratorio en grupos peque\u00f1os.  </li> <li>Revisi\u00f3n (1 hora): Correcci\u00f3n de ejercicios y retroalimentaci\u00f3n.  </li> </ul> <p>Actividades Pr\u00e1cticas 1. Crear un bot\u00f3n que muestre un mensaje al hacer clic. 2. Implementar un campo de texto que muestre su contenido en tiempo real. 3. Validar un formulario para asegurar que no est\u00e9 vac\u00edo. 4. Mini-proyecto: Formulario din\u00e1mico con validaci\u00f3n en tiempo real (ej. verificar longitud de contrase\u00f1a, formato de correo).  </p> <p>Distribuci\u00f3n del Tiempo </p> <ul> <li>Teor\u00eda: 1.5 horas (explicaci\u00f3n y demo).  </li> <li>Pr\u00e1ctica: 3.5 horas (ejercicios: 2 horas, mini-proyecto: 1.5 horas).  </li> <li>Revisi\u00f3n: 1 hora (correcci\u00f3n y dudas).  </li> </ul> <p>Recursos </p> <ul> <li>Herramientas: VS Code, navegador.  </li> <li>Materiales: Diapositivas sobre eventos, plantilla HTML/CSS, ejemplos de c\u00f3digo.  </li> <li>Referencias: MDN - Eventos, JavaScript.info - Eventos.  </li> </ul>"},{"location":"content/curso/#clase-9-asincronia-y-consumo-de-apis","title":"Clase 9: Asincron\u00eda y Consumo de APIs","text":"<p>Objetivos </p> <ul> <li>Comprender los conceptos de asincron\u00eda en JavaScript.  </li> <li>Consumir APIs p\u00fablicas usando <code>fetch</code> y <code>async/await</code>.  </li> <li>Mostrar datos din\u00e1micamente en una p\u00e1gina web.  </li> </ul> <p>Temas </p> <ul> <li>Introducci\u00f3n a asincron\u00eda: callbacks, promesas, <code>async/await</code>.  </li> <li>Uso de <code>fetch</code> para realizar solicitudes HTTP.  </li> <li>Manejo de errores con <code>try/catch</code>.  </li> <li>Consumo de APIs p\u00fablicas: PokeAPI, OpenWeather.  </li> </ul> <p>Metodolog\u00eda </p> <ul> <li>Teor\u00eda (1.5 horas): Explicaci\u00f3n de asincron\u00eda y APIs con demostraciones en vivo.  </li> <li>Pr\u00e1ctica (3.5 horas): Ejercicios guiados y laboratorio colaborativo.  </li> <li>Revisi\u00f3n (1 hora): Resoluci\u00f3n de ejercicios y discusi\u00f3n grupal.  </li> </ul> <p>Actividades Pr\u00e1cticas 1. Crear una funci\u00f3n as\u00edncrona que espere 2 segundos antes de mostrar un mensaje. 2. Consumir PokeAPI para mostrar el nombre de un Pok\u00e9mon en la consola. 3. Mostrar una lista de datos de una API en una tabla HTML. 4. Mini-proyecto: Aplicaci\u00f3n de clima (usando OpenWeather) o galer\u00eda de Pok\u00e9mon (usando PokeAPI) que muestre datos din\u00e1micos.  </p> <p>Distribuci\u00f3n del Tiempo </p> <ul> <li>Teor\u00eda: 1.5 horas (explicaci\u00f3n y demo).  </li> <li>Pr\u00e1ctica: 3.5 horas (ejercicios: 2 horas, mini-proyecto: 1.5 horas).  </li> <li>Revisi\u00f3n: 1 hora (correcci\u00f3n y dudas).  </li> </ul> <p>Recursos </p> <ul> <li>Herramientas: VS Code, navegador.  </li> <li>Materiales: Diapositivas sobre asincron\u00eda, ejemplos de c\u00f3digo, gu\u00eda de <code>fetch</code>.  </li> <li>Referencias: MDN - Fetch API, JavaScript.info - Async/Await.  </li> </ul>"},{"location":"content/curso/#clase-10-proyecto-final-y-buenas-practicas","title":"Clase 10: Proyecto Final y Buenas Pr\u00e1cticas","text":"<p>Objetivos </p> <ul> <li>Integrar todos los conceptos aprendidos en un proyecto completo.  </li> <li>Aplicar buenas pr\u00e1cticas de codificaci\u00f3n.  </li> <li>Presentar y evaluar proyectos en grupo.  </li> </ul> <p>Temas </p> <ul> <li>Repaso de conceptos: DOM, eventos, arreglos, objetos, APIs.  </li> <li>Buenas pr\u00e1cticas: nombrado claro, comentarios, modularizaci\u00f3n.  </li> <li>Organizaci\u00f3n de proyectos: estructura de archivos, reutilizaci\u00f3n de c\u00f3digo.  </li> <li>Depuraci\u00f3n b\u00e1sica: uso de la consola y <code>debugger</code>.  </li> </ul> <p>Metodolog\u00eda </p> <ul> <li>Teor\u00eda (1 hora): Repaso de conceptos y explicaci\u00f3n de buenas pr\u00e1cticas.  </li> <li>Pr\u00e1ctica (4 horas): Desarrollo del proyecto final en grupos peque\u00f1os.  </li> <li>Revisi\u00f3n (1 hora): Presentaci\u00f3n de proyectos y retroalimentaci\u00f3n grupal.  </li> </ul> <p>Actividades Pr\u00e1cticas </p> <ol> <li>Refactorizar un c\u00f3digo desordenado aplicando buenas pr\u00e1cticas.  </li> <li>Crear un m\u00f3dulo reusable para una funci\u00f3n com\u00fan (ej. validaci\u00f3n de formularios).  </li> <li>Depurar un programa con errores usando la consola.  </li> <li> <p>Proyecto final: Desarrollo de una aplicaci\u00f3n web, como:  </p> <ul> <li>Administrador de tareas (crear, editar, eliminar tareas).  </li> <li>Tienda simple (mostrar productos, agregar al carrito).  </li> <li>Blog interactivo (publicar y mostrar entradas).  </li> <li>La aplicaci\u00f3n debe integrar DOM, eventos, arreglos, objetos y consumo de una API.  </li> </ul> </li> </ol> <p>Distribuci\u00f3n del Tiempo </p> <ul> <li>Teor\u00eda: 1 hora (repaso y buenas pr\u00e1cticas).  </li> <li>Pr\u00e1ctica: 4 horas (ejercicios: 1 hora, proyecto final: 3 horas).  </li> <li>Revisi\u00f3n: 1 hora (presentaciones y retroalimentaci\u00f3n).  </li> </ul> <p>Recursos </p> <ul> <li>Herramientas: VS Code, navegador.  </li> <li>Materiales: Diapositivas sobre buenas pr\u00e1cticas, plantilla de proyecto, r\u00fabrica de evaluaci\u00f3n.  </li> <li>Referencias: MDN - Buenas pr\u00e1cticas, JavaScript.info - Estructura de c\u00f3digo.  </li> </ul>"},{"location":"content/curso/#entregables","title":"Entregables","text":"<ul> <li>Plan detallado: Documento Markdown con las 10 clases, incluyendo objetivos, temas, actividades, distribuci\u00f3n del tiempo y recursos.  </li> <li>Materiales de apoyo:  <ul> <li>Diapositivas para cada clase (formato PPT o PDF).  </li> <li>Ejemplos de c\u00f3digo comentados (archivos JS, HTML, CSS).  </li> <li>Gu\u00edas en PDF: instalaci\u00f3n, sintaxis, DOM, eventos, APIs.  </li> <li>Enlaces a recursos externos: MDN Web Docs, JavaScript.info, freeCodeCamp.  </li> </ul> </li> <li>Proyecto final:  <ul> <li>Descripci\u00f3n del proyecto con requisitos claros (integrar DOM, eventos, arreglos, objetos, API).  </li> <li>R\u00fabrica de evaluaci\u00f3n: funcionalidad (40%), c\u00f3digo limpio (30%), creatividad (20%), presentaci\u00f3n (10%).  </li> </ul> </li> <li>Plantillas: Archivos base (HTML, CSS, JS) para ejercicios y proyectos.  </li> </ul>"},{"location":"content/curso/#consideraciones-adicionales","title":"Consideraciones Adicionales","text":"<ul> <li>Ejercicios motivadores: Los proyectos est\u00e1n dise\u00f1ados para ser relevantes (ej. aplicaciones para peque\u00f1as empresas, herramientas educativas) y escalables seg\u00fan el nivel del estudiante.  </li> <li>Demostraciones en vivo: Cada clase incluye ejemplos pr\u00e1cticos ejecutados por el instructor para aclarar conceptos complejos como el DOM o la asincron\u00eda.  </li> <li>Trabajo colaborativo: Las clases 5 y 9 incluyen actividades en grupos peque\u00f1os para fomentar el aprendizaje en equipo.  </li> <li>Escalabilidad: Los mini-proyectos ofrecen opciones avanzadas (ej. agregar estilos CSS, incluir m\u00e1s validaciones) para estudiantes con mayor rapidez.  </li> <li>Plantillas de c\u00f3digo: Se proporcionan archivos base para los principiantes, pero los ejercicios fomentan escribir c\u00f3digo desde cero para reforzar el aprendizaje.  </li> <li>Evaluaci\u00f3n formativa: Los ejercicios pr\u00e1cticos se revisan en cada clase, con autoevaluaciones opcionales para que los estudiantes reflexionen sobre su progreso.  </li> </ul>"},{"location":"content/curso/#rubrica-de-evaluacion-del-proyecto-final","title":"R\u00fabrica de Evaluaci\u00f3n del Proyecto Final","text":"Criterio Peso Descripci\u00f3n Funcionalidad 40% La aplicaci\u00f3n cumple con los requisitos (DOM, eventos, arreglos, objetos, API). C\u00f3digo limpio 30% Uso de nombres claros, comentarios, modularizaci\u00f3n y buenas pr\u00e1cticas. Creatividad 20% Dise\u00f1o visual atractivo, funcionalidades adicionales o enfoques innovadores. Presentaci\u00f3n 10% Explicaci\u00f3n clara del proyecto, demostraci\u00f3n funcional y respuestas a preguntas. <p>Este curso proporciona una base s\u00f3lida en JavaScript, preparando a los estudiantes para desarrollar aplicaciones web interactivas y avanzar en su aprendizaje hacia tecnolog\u00edas m\u00e1s avanzadas.</p>"},{"location":"content/p0/","title":"Introducci\u00f3n a JavaScript","text":"<p>JavaScript es un lenguaje de programaci\u00f3n vers\u00e1til y ampliamente utilizado que permite agregar interactividad y dinamismo a las aplicaciones web y m\u00e1s all\u00e1. A continuaci\u00f3n, se presenta una visi\u00f3n general de qu\u00e9 es JavaScript, su historia, usos y su rol en el desarrollo web, dise\u00f1ada para alinearse con los objetivos de la Clase 1: Introducci\u00f3n a JavaScript y Primeros Pasos.</p> <p>Abrir Presentaci\u00f3n en Nueva Pesta\u00f1a</p>"},{"location":"content/p0/#que-es-javascript","title":"\u00bfQu\u00e9 es JavaScript?","text":"<ul> <li> <p>Definici\u00f3n:</p> <ul> <li>JavaScript es un lenguaje de programaci\u00f3n interpretado, de alto nivel y orientado a eventos, principalmente utilizado para agregar interactividad a p\u00e1ginas web.</li> <li>Es multiplataforma: se ejecuta en navegadores (lado cliente) y en servidores (con entornos como Node.js).</li> <li>Soporta paradigmas como programaci\u00f3n funcional, orientada a objetos y basada en eventos.</li> </ul> </li> <li> <p>Caracter\u00edsticas clave:</p> <ul> <li>Din\u00e1mico: Permite modificar el contenido de una p\u00e1gina web en tiempo real (por ejemplo, actualizar un texto sin recargar la p\u00e1gina).</li> <li>Ligero: No requiere compilaci\u00f3n, ya que los navegadores lo interpretan directamente.</li> <li>Estandarizado: Basado en ECMAScript, con versiones actualizadas como ES6 (2015) que introdujeron mejoras significativas.</li> </ul> </li> </ul>"},{"location":"content/p0/#historia-de-javascript","title":"Historia de JavaScript","text":"<ul> <li> <p>Origen:</p> <ul> <li>Creado en 1995 por Brendan Eich en Netscape Communications.</li> <li>Inicialmente llamado Mocha, luego LiveScript, y finalmente JavaScript para capitalizar la popularidad de Java (aunque no est\u00e1n relacionados).</li> <li>Primer prop\u00f3sito: Agregar peque\u00f1as funcionalidades interactivas a p\u00e1ginas web est\u00e1ticas.</li> </ul> </li> <li> <p>Evoluci\u00f3n:</p> <ul> <li>1997: Estandarizaci\u00f3n como ECMAScript (ES1).</li> <li>2009: ES5 trajo mejoras en funcionalidad.</li> <li>2015: ES6 (ECMAScript 2015) introdujo caracter\u00edsticas modernas como arrow functions, let/const, y promesas.</li> <li>Actualmente: Actualizaciones anuales (ES2020, ES2023, etc.) para mantener el lenguaje relevante.</li> </ul> </li> <li> <p>Impacto:</p> <ul> <li>De ser un lenguaje para animaciones simples, pas\u00f3 a ser la base de aplicaciones web complejas, servidores, e incluso inteligencia artificial.</li> </ul> </li> </ul>"},{"location":"content/p0/#usos-y-aplicaciones","title":"Usos y Aplicaciones","text":"<p>JavaScript es un pilar del desarrollo moderno debido a su flexibilidad. Sus principales usos incluyen:</p> <ol> <li> <p>Desarrollo web (lado cliente):</p> <ul> <li>Manipulaci\u00f3n del DOM (Document Object Model) para cambiar contenido, estilos o estructura de una p\u00e1gina.</li> <li>Ejemplos: Validar formularios, crear animaciones, manejar eventos (clics, teclas).</li> <li>Frameworks populares: React, Vue.js, Angular.</li> </ul> </li> <li> <p>Desarrollo backend (lado servidor):</p> <ul> <li>Con Node.js, JavaScript se usa para construir servidores, APIs y aplicaciones escalables.</li> <li>Ejemplo: Plataformas como Netflix y PayPal usan Node.js.</li> </ul> </li> <li> <p>Aplicaciones m\u00f3viles:</p> <ul> <li>Frameworks como React Native permiten crear aplicaciones nativas para iOS y Android.</li> <li>Ejemplo: Aplicaciones como Instagram y Airbnb.</li> </ul> </li> <li> <p>Juegos y gr\u00e1ficos:</p> <ul> <li>Bibliotecas como Three.js o Phaser permiten crear juegos 2D/3D en navegadores.</li> <li>Ejemplo: Juegos interactivos en sitios web.</li> </ul> </li> <li> <p>Otros usos:</p> <ul> <li>Automatizaci\u00f3n (scripts con Node.js).</li> <li>Inteligencia artificial (TensorFlow.js para modelos de machine learning).</li> <li>Internet de las cosas (IoT) con plataformas como Johnny-Five.</li> </ul> </li> </ol>"},{"location":"content/p0/#rol-en-el-desarrollo-web","title":"Rol en el Desarrollo Web","text":"<p>JavaScript es uno de los tres pilares del desarrollo web, junto con HTML y CSS:</p> <ul> <li>HTML: Define la estructura de una p\u00e1gina (t\u00edtulos, p\u00e1rrafos, im\u00e1genes).</li> <li>CSS: Controla el dise\u00f1o y estilo (colores, fuentes, disposici\u00f3n).</li> <li>JavaScript: A\u00f1ade interactividad y l\u00f3gica (eventos, c\u00e1lculos, actualizaciones din\u00e1micas).</li> </ul> <p>Ejemplo pr\u00e1ctico: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Ejemplo de JavaScript&lt;/title&gt;\n  &lt;style&gt;\n    button { padding: 10px; font-size: 16px; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1 id=\"mensaje\"&gt;\u00a1Haz clic en el bot\u00f3n!&lt;/h1&gt;\n  &lt;button onclick=\"cambiarMensaje()\"&gt;Cambiar Mensaje&lt;/button&gt;\n  &lt;script&gt;\n    function cambiarMensaje() {\n      document.getElementById(\"mensaje\").innerText = \"\u00a1JavaScript en acci\u00f3n!\";\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <ul> <li>Explicaci\u00f3n:<ul> <li>HTML crea la estructura (t\u00edtulo y bot\u00f3n).</li> <li>CSS estiliza el bot\u00f3n.</li> <li>JavaScript cambia el texto del t\u00edtulo al hacer clic.</li> </ul> </li> </ul>"},{"location":"content/p0/#otro-ejemplo","title":"Otro ejemplo","text":"<p> See the Pen    JavaScript by Jhon Valencia (@Jhon-Valencia-the-animator)   on CodePen. </p>"},{"location":"content/p0/#por-que-aprender-javascript","title":"Por qu\u00e9 aprender JavaScript","text":"<ul> <li>Ubicuidad: Est\u00e1 presente en casi todas las p\u00e1ginas web modernas.</li> <li>Versatilidad: \u00datil para frontend, backend, m\u00f3vil, y m\u00e1s.</li> <li>Comunidad y recursos: Amplia documentaci\u00f3n (MDN Web Docs, JavaScript.info) y frameworks que facilitan el desarrollo.</li> <li>Demanda laboral: Alta demanda de desarrolladores JavaScript en la industria tecnol\u00f3gica.</li> </ul>"},{"location":"content/p0/#actividad-creacion-de-recursos-visuales-sobre-javascript-cliente-vs-servidor","title":"Actividad: Creaci\u00f3n de Recursos Visuales sobre JavaScript (Cliente vs. Servidor)","text":"<p>T\u00edtulo: \"Visualizando JavaScript: Usos en Cliente, Servidor y su Impacto Tecnol\u00f3gico\"</p> <p>Duraci\u00f3n: 2 horas  </p> <p>Formato: Trabajo en grupos (4 grupos de 3-4 estudiantes cada uno)  </p> <p>Objetivo: Dise\u00f1ar un recurso visual \u00fanico (infograf\u00eda, mapa mental, diagrama o l\u00ednea de tiempo) que compare y diferencie el uso de JavaScript en el cliente (navegador) y en el servidor (Node.js), destacando las tecnolog\u00edas derivadas de JavaScript y su importancia en el desarrollo moderno. Cada grupo presentar\u00e1 su recurso de forma creativa para maximizar su impacto visual y educativo.</p>"},{"location":"content/p0/#descripcion","title":"Descripci\u00f3n","text":"<p>JavaScript es un pilar del desarrollo web y m\u00e1s all\u00e1, con aplicaciones tanto en el navegador (interactividad en p\u00e1ginas web) como en el servidor (construcci\u00f3n de APIs y backend con Node.js). Adem\u00e1s, ha dado lugar a tecnolog\u00edas clave como React, Express y React Native, que refuerzan su relevancia. En esta actividad, formar\u00e1n 4 grupos de trabajo, y cada uno crear\u00e1 un recurso visual diferente (infograf\u00eda, mapa mental, diagrama de flujo o l\u00ednea de tiempo) que:</p> <ol> <li>Compare y diferencie claramente los usos de JavaScript en el cliente y el servidor.</li> <li>Resalte las tecnolog\u00edas derivadas de JavaScript (frameworks, bibliotecas, herramientas).</li> <li>Comunique visualmente la importancia de JavaScript en el desarrollo moderno.</li> </ol> <p>Los recursos deben ser claros, atractivos y dise\u00f1ados para facilitar la comprensi\u00f3n de las diferencias entre ambos entornos, con ejemplos concretos y un enfoque creativo en la presentaci\u00f3n.</p>"},{"location":"content/p0/#instrucciones","title":"Instrucciones","text":""},{"location":"content/p0/#1-formacion-de-grupos-y-asignacion-de-recursos-visuales","title":"1. Formaci\u00f3n de Grupos y Asignaci\u00f3n de Recursos Visuales","text":"<ul> <li>Se formar\u00e1n 4 grupos de 3-4 estudiantes.</li> <li>Cada grupo crear\u00e1 un recurso visual diferente (asignado por el instructor o elegido por el grupo):<ul> <li>Grupo 1: Infograf\u00eda (un p\u00f3ster visual con secciones claras y gr\u00e1ficos).</li> <li>Grupo 2: Mapa mental (un diagrama ramificado que organiza ideas).</li> <li>Grupo 3: Diagrama de flujo (un esquema que muestra procesos o relaciones).</li> <li>Grupo 4: L\u00ednea de tiempo (una secuencia hist\u00f3rica o evolutiva de JavaScript).</li> </ul> </li> <li>Roles sugeridos (dentro de cada grupo): <ul> <li>Coordinador (organiza tareas).</li> <li>Investigador (recopila informaci\u00f3n).</li> <li>Dise\u00f1ador (crea el recurso visual).</li> <li>Presentador (explica el recurso).</li> </ul> </li> </ul>"},{"location":"content/p0/#2-contenido-del-recurso-visual","title":"2. Contenido del Recurso Visual","text":"<p>Cada recurso debe incluir los siguientes elementos, organizados de manera clara y visualmente atractiva:</p> <ul> <li>Comparaci\u00f3n Cliente vs. Servidor**</li> <li>Tecnolog\u00edas Derivadas de JavaScript**</li> <li>Importancia de JavaScript   </li> </ul>"},{"location":"content/p0/#3-exposicion-creativa","title":"3. Exposici\u00f3n Creativa","text":"<ul> <li>Cada grupo presentar\u00e1 su recurso visual en 15 minutos, explicando:</li> <li>La estructura del recurso y c\u00f3mo organiza la informaci\u00f3n.</li> <li>Las diferencias clave entre JavaScript en el cliente y el servidor.</li> <li>Una tecnolog\u00eda derivada de JavaScript y su impacto.</li> <li>Un ejemplo de c\u00f3digo o caso de uso.</li> </ul>"},{"location":"content/p1/","title":"Tipos de datos y operadores b\u00e1sicos en JavaScript","text":""},{"location":"content/p1/#1-tipos-de-datos-en-javascript","title":"1. Tipos de datos en JavaScript","text":"<p>JavaScript es un lenguaje din\u00e1micamente tipado, lo que significa que las variables no est\u00e1n vinculadas a un tipo de dato espec\u00edfico y pueden cambiar de tipo durante la ejecuci\u00f3n. Los tipos de datos primitivos m\u00e1s comunes son:</p> <ul> <li> <p>String: Representa texto. Se escribe entre comillas simples (<code>' '</code>), dobles (<code>\" \"</code>) o backticks (<code>`</code>) para plantillas literales.   <pre><code>let nombre = \"Ana\"; // String con comillas dobles\nlet saludo = '\u00a1Hola!'; // String con comillas simples\nlet mensaje = `Bienvenida, ${nombre}`; // Plantilla literal\nconsole.log(mensaje); // Imprime: Bienvenida, Ana\n</code></pre></p> </li> <li> <p>Number: Representa n\u00fameros, ya sean enteros o decimales. No distingue entre <code>int</code> y <code>float</code>.   <pre><code>let edad = 25; // Entero\nlet altura = 1.75; // Decimal\nconsole.log(edad + altura); // Imprime: 26.75\n</code></pre></p> </li> <li> <p>Boolean: Representa valores de verdad: <code>true</code> o <code>false</code>. \u00datil para condiciones.   <pre><code>let esMayorDeEdad = true;\nlet tienePermiso = false;\nconsole.log(esMayorDeEdad); // Imprime: true\n</code></pre></p> </li> <li> <p>Null: Representa la ausencia intencional de un valor.   <pre><code>let valorNulo = null;\nconsole.log(valorNulo); // Imprime: null\n</code></pre></p> </li> <li> <p>Undefined: Indica que una variable ha sido declarada pero no tiene un valor asignado.   <pre><code>let sinDefinir;\nconsole.log(sinDefinir); // Imprime: undefined\n</code></pre></p> </li> </ul> <p>Ejemplo pr\u00e1ctico: <pre><code>let nombre = \"Carlos\"; // String\nlet edad = 30; // Number\nlet esEstudiante = true; // Boolean\nlet direccion = null; // Null\nlet telefono; // Undefined\n\nconsole.log(\"Nombre:\", nombre, \"Edad:\", edad, \"Es estudiante:\", esEstudiante);\nconsole.log(\"Direcci\u00f3n:\", direccion, \"Tel\u00e9fono:\", telefono);\n</code></pre></p>"},{"location":"content/p1/#2-declaracion-de-variables","title":"2. Declaraci\u00f3n de variables","text":"<p>JavaScript ofrece tres formas principales de declarar variables, cada una con un prop\u00f3sito espec\u00edfico:</p> <ul> <li> <p>var: M\u00e9todo antiguo para declarar variables. Tiene alcance de funci\u00f3n y permite redeclaraci\u00f3n, lo que puede causar errores. No se recomienda usarlo en c\u00f3digo moderno.   <pre><code>var x = 10;\nvar x = 20; // Redeclaraci\u00f3n permitida\nconsole.log(x); // Imprime: 20\n</code></pre></p> </li> <li> <p>let: Permite declarar variables con alcance de bloque (dentro de <code>{}</code>). Se puede reasignar, pero no redeclarar en el mismo \u00e1mbito.   <pre><code>let y = 15;\ny = 25; // Reasignaci\u00f3n permitida\n// let y = 30; // Error: no se puede redeclarar\nconsole.log(y); // Imprime: 25\n</code></pre></p> </li> <li> <p>const: Declara constantes con alcance de bloque. No permite reasignaci\u00f3n ni redeclaraci\u00f3n, pero los objetos o arreglos declarados con <code>const</code> pueden modificarse internamente.   <pre><code>const PI = 3.1416;\n// PI = 3.14; // Error: no se puede reasignar\nconsole.log(PI); // Imprime: 3.1416\n\nconst persona = { nombre: \"Luis\" };\npersona.nombre = \"Mar\u00eda\"; // Modificaci\u00f3n interna permitida\nconsole.log(persona.nombre); // Imprime: Mar\u00eda\n</code></pre></p> </li> </ul> <p>Buenas pr\u00e1cticas: - Usa <code>const</code> por defecto para evitar reasignaciones accidentales. - Usa <code>let</code> cuando necesites reasignar valores. - Evita <code>var</code> en c\u00f3digo moderno.</p>"},{"location":"content/p1/#3-operadores","title":"3. Operadores","text":"<p>Los operadores permiten realizar c\u00e1lculos, comparaciones y combinaciones l\u00f3gicas.</p>"},{"location":"content/p1/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<ul> <li><code>+</code>: Suma (tambi\u00e9n concatena strings).</li> <li><code>-</code>: Resta.</li> <li><code>*</code>: Multiplicaci\u00f3n.</li> <li><code>/</code>: Divisi\u00f3n.</li> <li><code>%</code>: M\u00f3dulo (resto de la divisi\u00f3n).</li> </ul> <pre><code>let a = 10;\nlet b = 3;\nconsole.log(\"Suma:\", a + b); // Imprime: 13\nconsole.log(\"Resta:\", a - b); // Imprime: 7\nconsole.log(\"Multiplicaci\u00f3n:\", a * b); // Imprime: 30\nconsole.log(\"Divisi\u00f3n:\", a / b); // Imprime: 3.333...\nconsole.log(\"M\u00f3dulo:\", a % b); // Imprime: 1\n</code></pre> <p>Nota sobre <code>+</code> con strings: <pre><code>let texto1 = \"Hola\";\nlet texto2 = \"Mundo\";\nconsole.log(texto1 + \" \" + texto2); // Imprime: Hola Mundo\n</code></pre></p>"},{"location":"content/p1/#operadores-de-comparacion","title":"Operadores de comparaci\u00f3n","text":"<ul> <li><code>==</code>: Compara igualdad de valor (convierte tipos si es necesario).</li> <li><code>===</code>: Compara igualdad estricta (valor y tipo).</li> <li><code>!=</code>: Desigualdad de valor.</li> <li><code>!==</code>: Desigualdad estricta.</li> <li><code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>: Comparaciones num\u00e9ricas.</li> </ul> <pre><code>let x = 5;\nlet y = \"5\";\nconsole.log(x == y); // Imprime: true (convierte el string a n\u00famero)\nconsole.log(x === y); // Imprime: false (diferente tipo)\nconsole.log(x != y); // Imprime: false\nconsole.log(x !== y); // Imprime: true\nconsole.log(x &gt; 3); // Imprime: true\n</code></pre>"},{"location":"content/p1/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<ul> <li><code>&amp;&amp;</code>: AND (verdadero si ambos operandos son verdaderos).</li> <li><code>||</code>: OR (verdadero si al menos un operando es verdadero).</li> <li><code>!</code>: NOT (invierte el valor booleano).</li> </ul> <pre><code>let esAdulto = true;\nlet tieneLicencia = false;\nconsole.log(esAdulto &amp;&amp; tieneLicencia); // Imprime: false\nconsole.log(esAdulto || tieneLicencia); // Imprime: true\nconsole.log(!esAdulto); // Imprime: false\n</code></pre> <p>Ejemplo combinado: <pre><code>let num1 = 8;\nlet num2 = 3;\nlet esMayor = num1 &gt; num2; // true\nlet esDivisible = num1 % 2 === 0; // true\nconsole.log(esMayor &amp;&amp; esDivisible); // Imprime: true\n</code></pre></p>"},{"location":"content/p1/#objetivo-2-utilizar-entrada-de-usuario-con-prompt","title":"Objetivo 2: Utilizar entrada de usuario con <code>prompt</code>","text":""},{"location":"content/p1/#entrada-de-usuario-con-prompt","title":"Entrada de usuario con <code>prompt</code>","text":"<p>La funci\u00f3n <code>prompt</code> muestra un cuadro de di\u00e1logo en el navegador donde el usuario puede ingresar texto. Devuelve un valor de tipo <code>string</code> o <code>null</code> si el usuario cancela.</p> <pre><code>let nombre = prompt(\"\u00bfCu\u00e1l es tu nombre?\");\nconsole.log(\"Hola, \" + nombre); // Imprime el nombre ingresado\n</code></pre>"},{"location":"content/p1/#conversion-de-tipos","title":"Conversi\u00f3n de tipos","text":"<p>Dado que <code>prompt</code> devuelve un string, es necesario convertir el valor a otro tipo si se requiere, por ejemplo, para operaciones num\u00e9ricas.</p> <ul> <li>Convertir a n\u00famero:</li> <li><code>parseInt(string)</code>: Convierte a entero.</li> <li><code>parseFloat(string)</code>: Convierte a decimal.</li> <li><code>Number(string)</code>: Convierte a n\u00famero (entero o decimal seg\u00fan el caso).</li> </ul> <pre><code>let edadStr = prompt(\"Ingresa tu edad:\");\nlet edad = parseInt(edadStr); // Convierte a entero\nconsole.log(\"El pr\u00f3ximo a\u00f1o tendr\u00e1s\", edad + 1, \"a\u00f1os\");\n</code></pre> <p>Validaci\u00f3n b\u00e1sica: <pre><code>let numeroStr = prompt(\"Ingresa un n\u00famero:\");\nlet numero = Number(numeroStr);\nif (isNaN(numero)) {\n  console.log(\"Por favor, ingresa un n\u00famero v\u00e1lido\");\n} else {\n  console.log(\"El doble de tu n\u00famero es\", numero * 2);\n}\n</code></pre></p> <p>Ejemplo pr\u00e1ctico: Un script que pide dos n\u00fameros y realiza operaciones aritm\u00e9ticas: <pre><code>let num1Str = prompt(\"Ingresa el primer n\u00famero:\");\nlet num2Str = prompt(\"Ingresa el segundo n\u00famero:\");\nlet num1 = parseFloat(num1Str);\nlet num2 = parseFloat(num2Str);\n\nif (isNaN(num1) || isNaN(num2)) {\n  console.log(\"Por favor, ingresa n\u00fameros v\u00e1lidos\");\n} else {\n  console.log(\"Suma:\", num1 + num2);\n  console.log(\"Resta:\", num1 - num2);\n  console.log(\"Multiplicaci\u00f3n:\", num1 * num2);\n  console.log(\"Divisi\u00f3n:\", num1 / num2);\n}\n</code></pre></p>"},{"location":"content/p1/#objetivo-3-crear-scripts-interactivos-en-la-consola","title":"Objetivo 3: Crear scripts interactivos en la consola","text":"<p>Ahora que hemos cubierto los fundamentos, podemos combinar todos los conceptos para crear scripts interactivos que se ejecuten en la consola del navegador o en un entorno como Node.js (aunque <code>prompt</code> es espec\u00edfico del navegador).</p>"},{"location":"content/p1/#ejemplo-1-calculadora-basica","title":"Ejemplo 1: Calculadora b\u00e1sica","text":"<p>Este script pide al usuario dos n\u00fameros y una operaci\u00f3n, luego muestra el resultado.</p> <pre><code>let num1Str = prompt(\"Ingresa el primer n\u00famero:\");\nlet num2Str = prompt(\"Ingresa el segundo n\u00famero:\");\nlet operacion = prompt(\"Ingresa la operaci\u00f3n (+, -, *, /):\");\n\nlet num1 = parseFloat(num1Str);\nlet num2 = parseFloat(num2Str);\nlet resultado;\n\nif (isNaN(num1) || isNaN(num2)) {\n  console.log(\"Por favor, ingresa n\u00fameros v\u00e1lidos\");\n} else {\n  if (operacion === \"+\") {\n    resultado = num1 + num2;\n  } else if (operacion === \"-\") {\n    resultado = num1 - num2;\n  } else if (operacion === \"*\") {\n    resultado = num1 * num2;\n  } else if (operacion === \"/\") {\n    if (num2 === 0) {\n      console.log(\"Error: No se puede dividir por cero\");\n    } else {\n      resultado = num1 / num2;\n    }\n  } else {\n    console.log(\"Operaci\u00f3n no v\u00e1lida\");\n  }\n\n  if (resultado !== undefined) {\n    console.log(`Resultado: ${num1} ${operacion} ${num2} = ${resultado}`);\n  }\n}\n</code></pre> <p>Explicaci\u00f3n: - Usa <code>prompt</code> para obtener entrada del usuario. - Convierte strings a n\u00fameros con <code>parseFloat</code>. - Usa operadores aritm\u00e9ticos y condicionales para procesar la operaci\u00f3n. - Maneja casos de error (n\u00fameros inv\u00e1lidos, divisi\u00f3n por cero).</p>"},{"location":"content/p1/#ejemplo-2-verificador-de-edad","title":"Ejemplo 2: Verificador de edad","text":"<p>Un script que pide la edad del usuario y determina si es mayor de edad.</p> <pre><code>const EDAD_MINIMA = 18;\nlet edadStr = prompt(\"Ingresa tu edad:\");\nlet edad = parseInt(edadStr);\n\nif (isNaN(edad)) {\n  console.log(\"Por favor, ingresa una edad v\u00e1lida\");\n} else {\n  let esMayor = edad &gt;= EDAD_MINIMA;\n  console.log(\"\u00bfEres mayor de edad?\", esMayor);\n  if (esMayor) {\n    console.log(\"\u00a1Puedes entrar!\");\n  } else {\n    console.log(\"Lo siento, no puedes entrar.\");\n  }\n}\n</code></pre> <p>Explicaci\u00f3n: - Usa <code>const</code> para una constante. - Convierte la entrada a entero con <code>parseInt</code>. - Usa operadores de comparaci\u00f3n y l\u00f3gicos para evaluar la condici\u00f3n. - Muestra mensajes personalizados seg\u00fan el resultado.</p>"},{"location":"content/p1/#ejemplo-3-adivina-el-numero","title":"Ejemplo 3: Adivina el n\u00famero","text":"<p>Un juego interactivo donde el usuario intenta adivinar un n\u00famero generado aleatoriamente.</p> <pre><code>const numeroSecreto = Math.floor(Math.random() * 10) + 1; // N\u00famero entre 1 y 10\nlet intentos = 0;\nlet adivinado = false;\n\nwhile (!adivinado) {\n  let intentoStr = prompt(\"Adivina el n\u00famero (1-10):\");\n  let intento = parseInt(intentoStr);\n  intentos++;\n\n  if (isNaN(intento)) {\n    console.log(\"Por favor, ingresa un n\u00famero v\u00e1lido\");\n  } else if (intento === numeroSecreto) {\n    console.log(`\u00a1Felicidades! Adivinaste en ${intentos} intentos.`);\n    adivinado = true;\n  } else if (intento &lt; numeroSecreto) {\n    console.log(\"El n\u00famero es mayor. Intenta de nuevo.\");\n  } else {\n    console.log(\"El n\u00famero es menor. Intenta de nuevo.\");\n  }\n}\n</code></pre> <p>Explicaci\u00f3n: - Usa <code>Math.random</code> y <code>Math.floor</code> para generar un n\u00famero aleatorio. - Usa un bucle <code>while</code> para mantener el juego activo hasta que se adivine. - Incrementa un contador de intentos (<code>intentos</code>). - Usa operadores de comparaci\u00f3n para dar pistas al usuario.</p>"},{"location":"content/p1/#resumen-de-los-objetivos-cumplidos","title":"Resumen de los objetivos cumplidos","text":"<ol> <li>Dominar tipos de datos y operadores:</li> <li>Explicamos <code>string</code>, <code>number</code>, <code>boolean</code>, <code>null</code> y <code>undefined</code> con ejemplos.</li> <li>Cubrimos <code>let</code>, <code>const</code>, <code>var</code> y sus diferencias.</li> <li> <p>Detallamos operadores aritm\u00e9ticos, de comparaci\u00f3n y l\u00f3gicos con ejemplos pr\u00e1cticos.</p> </li> <li> <p>Utilizar <code>prompt</code> y conversi\u00f3n de tipos:</p> </li> <li>Mostramos c\u00f3mo obtener entrada de usuario con <code>prompt</code>.</li> <li>Explicamos c\u00f3mo convertir strings a n\u00fameros con <code>parseInt</code>, <code>parseFloat</code> y <code>Number</code>.</li> <li> <p>Incluimos validaci\u00f3n para manejar entradas inv\u00e1lidas.</p> </li> <li> <p>Crear scripts interactivos:</p> </li> <li>Presentamos ejemplos de scripts que combinan entrada de usuario, tipos de datos, operadores y l\u00f3gica condicional.</li> <li>Los ejemplos (calculadora, verificador de edad, juego de adivinanza) son pr\u00e1cticos y escalables.</li> </ol>"},{"location":"content/p1/#ejercicio-procesador-de-datos-personales","title":"Ejercicio: Procesador de datos personales","text":"<p>El ejercicio consiste en un programa que pide al usuario informaci\u00f3n personal (nombre, edad, altura) y realiza operaciones con esos datos, como calcular la edad en meses, comparar valores, y combinar resultados con operadores l\u00f3gicos. Todo el c\u00f3digo se envuelve en un artifact seg\u00fan las instrucciones.</p> <pre><code>// Declaraci\u00f3n de variables con diferentes tipos de datos y m\u00e9todos\nconst SALUDO_INICIAL = \"\u00a1Bienvenido al procesador de datos personales!\";\nvar mensajeFinal = \"Procesando tus datos...\";\nlet resultado = null; // Inicialmente null, se asignar\u00e1 despu\u00e9s\nlet sinAsignar; // Undefined por defecto\n\n// Mostrar mensaje inicial\nconsole.log(SALUDO_INICIAL);\n\n// Obtener entrada del usuario con prompt\nlet nombre = prompt(\"Ingresa tu nombre:\");\nlet edadStr = prompt(\"Ingresa tu edad (en a\u00f1os):\");\nlet alturaStr = prompt(\"Ingresa tu altura (en metros, ej. 1.75):\");\n\n// Conversi\u00f3n de tipos para los valores num\u00e9ricos\nlet edad = parseInt(edadStr); // Convertir edad a entero\nlet altura = parseFloat(alturaStr); // Convertir altura a decimal\n\n// Operaciones aritm\u00e9ticas\nlet edadEnMeses = edad * 12; // Calcular edad en meses\nlet alturaEnCm = altura * 100; // Convertir metros a cent\u00edmetros\nlet sumaEdadAltura = edad + altura; // Suma de edad y altura\nlet restoEdad = edad % 5; // Resto de dividir edad entre 5\n\n// Operaciones de comparaci\u00f3n\nlet esEdadPar = (edad % 2) === 0; // \u00bfEs la edad un n\u00famero par?\nlet esMayorQueCero = altura &gt; 0; // \u00bfEs la altura mayor que 0?\nlet esNombreVacio = nombre === \"\"; // \u00bfEl nombre est\u00e1 vac\u00edo?\nlet esEdadIgualAltura = edad == altura; // Comparaci\u00f3n no estricta\n\n// Operadores l\u00f3gicos\nlet combinacionLogica = esEdadPar &amp;&amp; esMayorQueCero; // AND: \u00bfEdad par y altura &gt; 0?\nlet otraCombinacion = esNombreVacio || esEdadPar; // OR: \u00bfNombre vac\u00edo o edad par?\nlet negacion = !esMayorQueCero; // NOT: Negar si altura &gt; 0\n\n// Asignar resultado para evitar null\nresultado = sumaEdadAltura;\n\n// Mostrar resultados en la consola\nconsole.log(\"--- Resultados ---\");\nconsole.log(\"Nombre ingresado:\", nombre); // String\nconsole.log(\"Edad en a\u00f1os:\", edad); // Number (entero)\nconsole.log(\"Altura en metros:\", altura); // Number (decimal)\nconsole.log(\"Edad en meses:\", edadEnMeses); // Operaci\u00f3n aritm\u00e9tica\nconsole.log(\"Altura en cent\u00edmetros:\", alturaEnCm); // Operaci\u00f3n aritm\u00e9tica\nconsole.log(\"Suma de edad y altura:\", resultado); // Resultado asignado\nconsole.log(\"Resto de edad \u00f7 5:\", restoEdad); // Operaci\u00f3n m\u00f3dulo\nconsole.log(\"\u00bfEs la edad par?\", esEdadPar); // Comparaci\u00f3n\nconsole.log(\"\u00bfEs la altura mayor que 0?\", esMayorQueCero); // Comparaci\u00f3n\nconsole.log(\"\u00bfEl nombre est\u00e1 vac\u00edo?\", esNombreVacio); // Comparaci\u00f3n\nconsole.log(\"\u00bfEdad igual a altura? (no estricta)\", esEdadIgualAltura); // Comparaci\u00f3n\nconsole.log(\"Edad par AND altura &gt; 0:\", combinacionLogica); // L\u00f3gico AND\nconsole.log(\"Nombre vac\u00edo OR edad par:\", otraCombinacion); // L\u00f3gico OR\nconsole.log(\"Negaci\u00f3n de altura &gt; 0:\", negacion); // L\u00f3gico NOT\nconsole.log(\"Valor de variable sin asignar:\", sinAsignar); // Undefined\nconsole.log(\"Mensaje final:\", mensajeFinal); // Var\n\n// Nota: No se valida la entrada del usuario para evitar condicionales\n</code></pre>"},{"location":"content/p1/#explicacion-del-ejercicio","title":"Explicaci\u00f3n del ejercicio","text":"<ol> <li>Tipos de datos:</li> <li>String: <code>SALUDO_INICIAL</code>, <code>nombre</code>, <code>mensajeFinal</code>.</li> <li>Number: <code>edad</code> (entero), <code>altura</code> (decimal), <code>edadEnMeses</code>, <code>alturaEnCm</code>, <code>sumaEdadAltura</code>, <code>restoEdad</code>.</li> <li>Boolean: <code>esEdadPar</code>, <code>esMayorQueCero</code>, <code>esNombreVacio</code>, <code>esEdadIgualAltura</code>, <code>combinacionLogica</code>, <code>otraCombinacion</code>, <code>negacion</code>.</li> <li>Null: <code>resultado</code> inicialmente.</li> <li> <p>Undefined: <code>sinAsignar</code>.</p> </li> <li> <p>Declaraci\u00f3n de variables:</p> </li> <li>const: <code>SALUDO_INICIAL</code> para un mensaje constante.</li> <li>var: <code>mensajeFinal</code> para mostrar el uso de <code>var</code>.</li> <li> <p>let: <code>nombre</code>, <code>edad</code>, <code>altura</code>, <code>resultado</code>, <code>sinAsignar</code> y otras variables que pueden reasignarse o mantenerse sin valor inicial.</p> </li> <li> <p>Operadores:</p> </li> <li>Aritm\u00e9ticos: <code>*</code> para calcular <code>edadEnMeses</code> y <code>alturaEnCm</code>, <code>+</code> para <code>sumaEdadAltura</code>, <code>%</code> para <code>restoEdad</code> y <code>esEdadPar</code>.</li> <li>Comparaci\u00f3n: <code>===</code> para <code>esEdadPar</code>, <code>esNombreVacio</code>, <code>&gt;</code> para <code>esMayorQueCero</code>, <code>==</code> para <code>esEdadIgualAltura</code>.</li> <li> <p>L\u00f3gicos: <code>&amp;&amp;</code> para <code>combinacionLogica</code>, <code>||</code> para <code>otraCombinacion</code>, <code>!</code> para <code>negacion</code>.</p> </li> <li> <p>Entrada de usuario con <code>prompt</code> y conversi\u00f3n de tipos:</p> </li> <li>Usa <code>prompt</code> para obtener <code>nombre</code>, <code>edadStr</code> y <code>alturaStr</code>.</li> <li>Convierte <code>edadStr</code> a entero con <code>parseInt</code>.</li> <li> <p>Convierte <code>alturaStr</code> a decimal con <code>parseFloat</code>.</p> </li> <li> <p>Interactividad en la consola:</p> </li> <li>El script muestra un mensaje inicial, procesa las entradas del usuario, realiza c\u00e1lculos y comparaciones, y muestra todos los resultados en la consola.</li> <li>No usa condicionales ni ciclos, por lo que no valida entradas (por ejemplo, si el usuario ingresa texto en lugar de n\u00fameros, el resultado puede ser <code>NaN</code>).</li> </ol>"},{"location":"content/p1/#como-ejecutar-el-ejercicio","title":"C\u00f3mo ejecutar el ejercicio","text":"<ol> <li>Copia el c\u00f3digo en un archivo con extensi\u00f3n <code>.js</code> (por ejemplo, <code>procesador_datos_personales.js</code>).</li> <li>Incl\u00fayelo en un archivo HTML b\u00e1sico para ejecutarlo en un navegador:    <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Ejercicio JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script src=\"procesador_datos_personales.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> <li>Abre el archivo HTML en un navegador y abre la consola (F12 o clic derecho &gt; Inspeccionar &gt; Consola).</li> <li>Ingresa datos cuando se muestren los cuadros de <code>prompt</code> (por ejemplo, \"Ana\", \"25\", \"1.75\").</li> <li>Observa los resultados en la consola.</li> </ol>"},{"location":"content/p1/#ejemplo-de-salida-en-la-consola","title":"Ejemplo de salida en la consola","text":"<p>Si el usuario ingresa: - Nombre: \"Ana\" - Edad: \"25\" - Altura: \"1.75\"</p> <p>La consola mostrar\u00e1 algo como: <pre><code>\u00a1Bienvenido al procesador de datos personales!\n--- Resultados ---\nNombre ingresado: Ana\nEdad en a\u00f1os: 25\nAltura en metros: 1.75\nEdad en meses: 300\nAltura en cent\u00edmetros: 175\nSuma de edad y altura: 26.75\nResto de edad \u00f7 5: 0\n\u00bfEs la edad par? false\n\u00bfEs la altura mayor que 0? true\n\u00bfEl nombre est\u00e1 vac\u00edo? false\n\u00bfEdad igual a altura? (no estricta) false\nEdad par AND altura &gt; 0: false\nNombre vac\u00edo OR edad par: false\nNegaci\u00f3n de altura &gt; 0: false\nValor de variable sin asignar: undefined\nMensaje final: Procesando tus datos...\n</code></pre></p>"},{"location":"content/p1/#actividad-1-ejercicios-de-variables-y-tipos-de-datos","title":"Actividad 1: Ejercicios de variables y Tipos de Datos","text":""},{"location":"content/p1/#ejercicio-1-procesador-de-nombre-y-edad-procesador_nombre_edadjs","title":"Ejercicio 1: Procesador de nombre y edad (procesador_nombre_edad.js)","text":"<p>Enunciado: Escribe un programa que pida al usuario su nombre y edad usando <code>prompt</code>. Convierte la edad a un n\u00famero entero. Calcula la edad en d\u00edas multiplicando por 365 (constante). Verifica si el nombre tiene menos de 5 caracteres. Usa <code>var</code> para la variable del nombre, <code>let</code> para la edad y el resultado de la comparaci\u00f3n, y <code>const</code> para la constante. Declara una variable con valor <code>null</code>. Muestra todos los resultados en la consola, incluyendo el nombre, edad en d\u00edas, si el nombre es corto y el valor nulo.</p>"},{"location":"content/p1/#ejercicio-2-conversor-de-altura-conversor_alturajs","title":"Ejercicio 2: Conversor de altura (conversor_altura.js)","text":"<p>Enunciado: Crea un script que pida al usuario su altura en metros (ej. 1.75) usando <code>prompt</code>. Convierte la entrada a un n\u00famero decimal. Calcula la altura en cent\u00edmetros (multiplicando por 100) y en mil\u00edmetros (multiplicando cent\u00edmetros por 10). Verifica si la altura es mayor a 1.5 metros (constante). Usa <code>let</code> para la altura y conversiones, <code>var</code> para la variable de mil\u00edmetros y una variable sin asignar (<code>undefined</code>), y <code>const</code> para la constante de referencia. Muestra en la consola la altura en cent\u00edmetros, mil\u00edmetros, si es alta y el valor de la variable sin asignar.</p>"},{"location":"content/p1/#ejercicio-3-calculadora-de-peso-calculadora_pesojs","title":"Ejercicio 3: Calculadora de peso (calculadora_peso.js)","text":"<p>Enunciado: Desarrolla un programa que solicite al usuario su peso en kilogramos con <code>prompt</code>. Convierte el peso a un n\u00famero decimal. Calcula el peso en gramos (multiplicando por 1000). Verifica si el peso es mayor a 70 kg (constante). Usa <code>var</code> para la entrada y la comparaci\u00f3n, <code>let</code> para el peso y los gramos, y <code>const</code> para la constante. Crea una combinaci\u00f3n l\u00f3gica con el resultado de la comparaci\u00f3n y <code>true</code> usando <code>&amp;&amp;</code>. Muestra en la consola el peso en gramos, si es mayor a 70 kg y el resultado de la combinaci\u00f3n l\u00f3gica.</p>"},{"location":"content/p1/#ejercicio-4-procesador-de-texto-procesador_textojs","title":"Ejercicio 4: Procesador de texto (procesador_texto.js)","text":"<p>Enunciado: Escribe un script que pida al usuario un texto con <code>prompt</code>. Concatena el texto con un saludo constante (\"\u00a1Tu texto es: \"). Verifica si el texto tiene m\u00e1s de 10 caracteres. Usa <code>const</code> para el saludo, <code>let</code> para el texto y la comparaci\u00f3n, y <code>var</code> para la concatenaci\u00f3n y una variable con valor <code>null</code>. Aplica un operador l\u00f3gico <code>!</code> para negar el resultado de la comparaci\u00f3n. Muestra en la consola el texto completo, si es largo, la negaci\u00f3n y el valor nulo.</p>"},{"location":"content/p1/#ejercicio-5-calculadora-de-area-calculadora_areajs","title":"Ejercicio 5: Calculadora de \u00e1rea (calculadora_area.js)","text":"<p>Enunciado: Crea un programa que solicite al usuario el ancho y alto de un rect\u00e1ngulo con <code>prompt</code>. Convierte ambas entradas a n\u00fameros decimales. Calcula el \u00e1rea (ancho * alto). Verifica si el \u00e1rea es mayor a 50 (constante). Usa <code>let</code> para las entradas y la comparaci\u00f3n, <code>var</code> para el ancho y una variable sin definir (<code>undefined</code>), y <code>const</code> para la constante. Muestra en la consola el \u00e1rea, si es mayor a 50 y el valor de la variable sin definir.</p>"},{"location":"content/p1/#ejercicio-6-conversor-de-tiempo-conversor_tiempojs","title":"Ejercicio 6: Conversor de tiempo (conversor_tiempo.js)","text":"<p>Enunciado: Desarrolla un script que pida al usuario una cantidad de horas con <code>prompt</code>. Convierte la entrada a un n\u00famero decimal. Calcula los minutos (horas * 60) y los segundos (minutos * 60). Verifica si la cantidad de horas es mayor a 1. Usa <code>var</code> para las horas y los segundos, <code>let</code> para los minutos y la comparaci\u00f3n, y <code>const</code> para las constantes de conversi\u00f3n. Muestra en la consola los minutos, segundos y si es mayor a 1 hora.</p>"},{"location":"content/p1/#ejercicio-7-comparador-de-numeros-comparador_numerosjs","title":"Ejercicio 7: Comparador de n\u00fameros (comparador_numeros.js)","text":"<p>Enunciado: Escribe un programa que solicite al usuario dos n\u00fameros con <code>prompt</code>. Convierte las entradas a n\u00fameros decimales. Calcula la suma y la diferencia de los n\u00fameros. Verifica si los n\u00fameros son estrictamente iguales (<code>===</code>). Usa <code>let</code> para los n\u00fameros y la comparaci\u00f3n, <code>var</code> para las entradas y la suma, y <code>const</code> para el resultado de la comparaci\u00f3n. Aplica un operador l\u00f3gico <code>||</code> con el resultado de la comparaci\u00f3n y <code>false</code>. Muestra en la consola la suma, diferencia, si son iguales y el resultado de la combinaci\u00f3n l\u00f3gica.</p>"},{"location":"content/p1/#ejercicio-8-procesador-de-distancia-procesador_distanciajs","title":"Ejercicio 8: Procesador de distancia (procesador_distancia.js)","text":"<p>Enunciado: Crea un script que pida al usuario una distancia en kil\u00f3metros con <code>prompt</code>. Convierte la entrada a un n\u00famero decimal. Calcula la distancia en metros (kil\u00f3metros * 1000) y cent\u00edmetros (metros * 100). Verifica si la distancia es menor a 1 km. Usa <code>const</code> para la constante de conversi\u00f3n, <code>let</code> para la distancia y los metros, y <code>var</code> para la comparaci\u00f3n y una variable con valor <code>null</code>. Muestra en la consola los metros, cent\u00edmetros, si es menor a 1 km y el valor nulo.</p>"},{"location":"content/p1/#ejercicio-9-calculadora-de-precio-calculadora_preciojs","title":"Ejercicio 9: Calculadora de precio (calculadora_precio.js)","text":"<p>Enunciado: Desarrolla un programa que solicite al usuario el precio de un producto con <code>prompt</code>. Convierte la entrada a un n\u00famero decimal. Calcula el precio con un descuento del 10% (constante). Verifica si el precio original es mayor a 100. Usa <code>var</code> para la entrada y la comparaci\u00f3n, <code>let</code> para el precio, el precio con descuento y la negaci\u00f3n, y <code>const</code> para el descuento. Aplica un operador l\u00f3gico <code>!</code> para negar el resultado de la comparaci\u00f3n. Declara una variable <code>undefined</code>. Muestra en la consola el precio con descuento, si es mayor a 100, la negaci\u00f3n y el valor sin asignar.</p>"},{"location":"content/p1/#ejercicio-10-procesador-de-datos-personales-procesador_datos_personalesjs","title":"Ejercicio 10: Procesador de datos personales (procesador_datos_personales.js)","text":"<p>Enunciado: Escribe un script que pida al usuario su nombre, edad y peso con <code>prompt</code>. Convierte la edad a un n\u00famero entero y el peso a un n\u00famero decimal. Calcula la edad en meses (edad * 12, constante) y el peso en gramos (peso * 1000). Verifica si el nombre est\u00e1 vac\u00edo (<code>=== \"\"</code>) y si la edad es par (<code>% 2 === 0</code>). Usa <code>let</code> para el nombre, edad, peso y comparaciones, <code>var</code> para las entradas de edad y los gramos, y <code>const</code> para la constante. Aplica un operador l\u00f3gico <code>||</code> para combinar las comparaciones. Muestra en la consola el nombre, edad en meses, peso en gramos, si el nombre est\u00e1 vac\u00edo, si la edad es par y el resultado de la combinaci\u00f3n l\u00f3gica.</p>"},{"location":"content/p1/#instrucciones-para-resolver-los-ejercicios","title":"Instrucciones para resolver los ejercicios","text":"<ol> <li>Preparaci\u00f3n:</li> <li>Copia el c\u00f3digo de cada ejercicio en un archivo con extensi\u00f3n <code>.js</code> (por ejemplo, <code>procesador_nombre_edad.js</code>).</li> <li>Crea un archivo HTML b\u00e1sico para ejecutarlo en un navegador:      <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Ejercicio JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script src=\"nombre_del_archivo.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> <li> <p>Abre el archivo HTML en un navegador y accede a la consola (F12 o clic derecho &gt; Inspeccionar &gt; Consola).</p> </li> <li> <p>Ejecuci\u00f3n:</p> </li> <li>Sigue las indicaciones del enunciado de cada ejercicio.</li> <li>Ingresa datos en los cuadros de <code>prompt</code> que aparecen (por ejemplo, un nombre, un n\u00famero para la edad, etc.).</li> <li> <p>Observa los resultados en la consola para verificar que el script funciona como se describe.</p> </li> <li> <p>Entrega:</p> </li> <li>Repositorio GitHub con los archivos <code>.js</code> y <code>.html</code> para cada ejercicio.</li> </ol>"},{"location":"content/p10/","title":"Actividad Grupal: Creaci\u00f3n y Consumo de API con MockAPI.io, HTML, CSS y JavaScript","text":""},{"location":"content/p10/#descripcion-general","title":"Descripci\u00f3n General","text":"<p>Como equipo de desarrollo frontend, su tarea es dise\u00f1ar y construir una interfaz web b\u00e1sica utilizando HTML, CSS y JavaScript para consumir una API RESTful simulada creada en MockAPI.io. Adem\u00e1s, deber\u00e1n configurar la API en MockAPI.io para modelar al menos una entidad con operaciones CRUD (Crear, Leer, Actualizar, Eliminar). Esta actividad busca consolidar los conocimientos sobre consumo de APIs, manejo de solicitudes HTTP, manipulaci\u00f3n del DOM, dise\u00f1o de interfaces responsivas y la creaci\u00f3n de APIs simuladas para pruebas.</p>"},{"location":"content/p10/#tema-del-proyecto","title":"Tema del Proyecto","text":"<p>El tema de la API es libre, pero debe representar un sistema simple que gestione al menos una entidad principal. Ejemplos de temas:</p> <ul> <li>Un sistema de gesti\u00f3n de tareas (entidad: <code>Task</code>).</li> <li>Una lista de productos para una tienda (entidad: <code>Product</code>).</li> <li>Un registro de eventos (entidad: <code>Event</code>).</li> <li>Una lista de contactos (entidad: <code>Contact</code>).</li> </ul> <p>Consejo: Elijan un tema que sea sencillo pero que permita demostrar las operaciones CRUD de manera clara. Por ejemplo, una entidad <code>Task</code> con propiedades como <code>id</code>, <code>title</code>, <code>description</code> y <code>completed</code> es ideal para esta actividad.</p>"},{"location":"content/p10/#requisitos-minimos","title":"Requisitos M\u00ednimos","text":""},{"location":"content/p10/#1-configuracion-de-la-api-en-mockapiio","title":"1. Configuraci\u00f3n de la API en MockAPI.io","text":"<ul> <li>Crear una cuenta en MockAPI.io (https://mockapi.io/) y un nuevo proyecto.</li> <li>Definir al menos una entidad (recurso) con las siguientes propiedades m\u00ednimas:<ul> <li><code>id</code>: Identificador \u00fanico (generado autom\u00e1ticamente por MockAPI.io).</li> <li>Al menos tres propiedades adicionales relevantes al tema (por ejemplo, <code>title</code>, <code>description</code>, <code>completed</code> para una tarea).</li> </ul> </li> <li>Configurar los endpoints CRUD autom\u00e1ticos proporcionados por MockAPI.io:<ul> <li><code>GET /resources</code>: Obtener todos los registros.</li> <li><code>GET /resources/:id</code>: Obtener un registro por ID.</li> <li><code>POST /resources</code>: Crear un nuevo registro.</li> <li><code>PUT /resources/:id</code>: Actualizar un registro.</li> <li><code>DELETE /resources/:id</code>: Eliminar un registro.</li> </ul> </li> <li>Poblar la API con al menos 5 registros iniciales para pruebas.</li> </ul>"},{"location":"content/p10/#2-interfaz-web","title":"2. Interfaz Web","text":"<ul> <li>Dise\u00f1ar una interfaz web simple y funcional usando HTML y CSS.</li> <li>La interfaz debe ser responsiva (usar media queries o un framework CSS como Bootstrap v\u00eda CDN).</li> <li>Incluir:<ul> <li>Un formulario para crear y/o actualizar registros.</li> <li>Una lista o tabla para mostrar los datos obtenidos de la API.</li> <li>Botones para editar y eliminar registros.</li> </ul> </li> </ul>"},{"location":"content/p10/#3-consumo-de-la-api","title":"3. Consumo de la API","text":"<ul> <li>Implementar solicitudes HTTP usando la API Fetch de JavaScript para consumir los endpoints de MockAPI.io.</li> <li>Cubrir las operaciones CRUD para la entidad definida:<ul> <li>Crear: Enviar una solicitud <code>POST</code> para crear un nuevo registro.</li> <li>Leer: Enviar una solicitud <code>GET</code> para obtener y mostrar la lista de registros.</li> <li>Actualizar: Enviar una solicitud <code>PUT</code> para modificar un registro existente.</li> <li>Eliminar: Enviar una solicitud <code>DELETE</code> para eliminar un registro.</li> </ul> </li> <li>Manejar las respuestas de la API, incluyendo c\u00f3digos de estado (200, 404, 500, etc.) y mensajes de error.</li> </ul>"},{"location":"content/p10/#4-manejo-del-dom","title":"4. Manejo del DOM","text":"<ul> <li>Usar JavaScript para actualizar din\u00e1micamente el DOM con los datos obtenidos de la API.</li> <li>Implementar eventos (como clics en botones o env\u00edos de formularios) para interactuar con la API.</li> <li>Mostrar retroalimentaci\u00f3n al usuario (por ejemplo, mensajes de \u00e9xito o error).</li> </ul>"},{"location":"content/p10/#5-validacion-y-manejo-de-errores","title":"5. Validaci\u00f3n y Manejo de Errores","text":"<ul> <li>Validar los datos del formulario en el frontend antes de enviarlos a la API.</li> <li>Mostrar mensajes de error claros si la solicitud falla (por ejemplo, datos inv\u00e1lidos o servidor no disponible).</li> <li>Usar <code>try-catch</code> para manejar errores en las solicitudes Fetch.</li> </ul>"},{"location":"content/p10/#6-persistencia-local-opcional","title":"6. Persistencia Local (Opcional)","text":"<ul> <li>Usar <code>localStorage</code> o <code>sessionStorage</code> para almacenar datos temporales, como un filtro aplicado o datos del formulario antes de enviarlos.</li> </ul>"},{"location":"content/p10/#7-documentacion","title":"7. Documentaci\u00f3n","text":"<ul> <li>Incluir un archivo <code>README.md</code> que explique:<ul> <li>C\u00f3mo configurar y ejecutar la aplicaci\u00f3n frontend.</li> <li>C\u00f3mo crear el proyecto en MockAPI.io (incluyendo el esquema de la entidad).</li> <li>Los endpoints de la API consumidos.</li> <li>Ejemplos de uso (por ejemplo, capturas de pantalla o solicitudes de ejemplo).</li> <li>Dependencias externas (si se usa un framework CSS o bibliotecas como Axios).</li> </ul> </li> </ul>"},{"location":"content/p10/#ejemplo-practico-interfaz-para-un-sistema-de-tareas","title":"Ejemplo Pr\u00e1ctico: Interfaz para un Sistema de Tareas","text":"<p>Este ejemplo muestra c\u00f3mo crear una API simulada en MockAPI.io para gestionar tareas y una interfaz web que la consume.</p>"},{"location":"content/p10/#paso-1-configuracion-en-mockapiio","title":"Paso 1: Configuraci\u00f3n en MockAPI.io","text":"<ol> <li>Reg\u00edstrate en https://mockapi.io/ y crea un nuevo proyecto llamado <code>TaskManager</code>.</li> <li>Define un recurso llamado <code>tasks</code> con el siguiente esquema:    <pre><code>{\n  \"id\": \"generated-id\",\n  \"title\": \"string\",\n  \"description\": \"string\",\n  \"completed\": \"boolean\"\n}\n</code></pre></li> <li>A\u00f1ade al menos 5 tareas iniciales, por ejemplo:    <pre><code>[\n  { \"id\": \"1\", \"title\": \"Comprar v\u00edveres\", \"description\": \"Leche, pan, huevos\", \"completed\": false },\n  { \"id\": \"2\", \"title\": \"Estudiar JavaScript\", \"description\": \"Completar tutorial\", \"completed\": true },\n  { \"id\": \"3\", \"title\": \"Hacer ejercicio\", \"description\": \"Correr 30 min\", \"completed\": false },\n  { \"id\": \"4\", \"title\": \"Llamar a mam\u00e1\", \"description\": \"Preguntar c\u00f3mo est\u00e1\", \"completed\": false },\n  { \"id\": \"5\", \"title\": \"Terminar proyecto\", \"description\": \"Revisar c\u00f3digo\", \"completed\": true }\n]\n</code></pre></li> <li>Obt\u00e9n la URL base de la API (por ejemplo, <code>https://1234567890.mockapi.io/api/v1/tasks</code>).</li> </ol>"},{"location":"content/p10/#paso-2-interfaz-web","title":"Paso 2: Interfaz Web","text":"<p>El siguiente c\u00f3digo implementa una interfaz para gestionar tareas consumiendo la API de MockAPI.io.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Gesti\u00f3n de Tareas&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      font-family: Arial, sans-serif;\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    .form-container {\n      margin-bottom: 20px;\n    }\n    input, textarea, button {\n      padding: 8px;\n      margin: 5px;\n      width: calc(100% - 18px);\n      box-sizing: border-box;\n    }\n    .task-list {\n      list-style: none;\n      padding: 0;\n    }\n    .task-item {\n      border: 1px solid #ccc;\n      padding: 10px;\n      margin: 5px 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    .completed {\n      text-decoration: line-through;\n      color: #888;\n    }\n    .error {\n      color: red;\n    }\n    .success {\n      color: green;\n    }\n    @media (max-width: 600px) {\n      .task-item {\n        flex-direction: column;\n        align-items: flex-start;\n      }\n      button {\n        width: 100%;\n      }\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Gesti\u00f3n de Tareas&lt;/h1&gt;\n  &lt;div class=\"form-container\"&gt;\n    &lt;input type=\"text\" id=\"taskTitle\" placeholder=\"T\u00edtulo de la tarea\" required&gt;\n    &lt;textarea id=\"taskDescription\" placeholder=\"Descripci\u00f3n de la tarea\"&gt;&lt;/textarea&gt;\n    &lt;label&gt;&lt;input type=\"checkbox\" id=\"taskCompleted\"&gt; Completada&lt;/label&gt;\n    &lt;button onclick=\"crearOActualizarTarea()\"&gt;Crear Tarea&lt;/button&gt;\n  &lt;/div&gt;\n  &lt;p id=\"mensaje\"&gt;&lt;/p&gt;\n  &lt;ul id=\"taskList\" class=\"task-list\"&gt;&lt;/ul&gt;\n\n  &lt;script&gt;\n    const API_URL = 'https://1234567890.mockapi.io/api/v1/tasks'; // Reemplazar con tu URL de MockAPI.io\n    const taskList = document.getElementById('taskList');\n    const taskTitle = document.getElementById('taskTitle');\n    const taskDescription = document.getElementById('taskDescription');\n    const taskCompleted = document.getElementById('taskCompleted');\n    const mensaje = document.getElementById('mensaje');\n    let editingTaskId = null;\n\n    // Cargar tareas al iniciar\n    cargarTareas();\n\n    // Funci\u00f3n para cargar y mostrar tareas\n    async function cargarTareas() {\n      try {\n        const response = await fetch(API_URL);\n        if (!response.ok) throw new Error('Error al cargar tareas');\n        const tareas = await response.json();\n        taskList.innerHTML = '';\n        tareas.forEach(tarea =&gt; {\n          const li = document.createElement('li');\n          li.className = 'task-item' + (tarea.completed ? ' completed' : '');\n          li.innerHTML = `\n            &lt;div&gt;\n              &lt;strong&gt;${tarea.title}&lt;/strong&gt;&lt;br&gt;\n              ${tarea.description || 'Sin descripci\u00f3n'}&lt;br&gt;\n              Estado: ${tarea.completed ? 'Completada' : 'Pendiente'}\n            &lt;/div&gt;\n            &lt;div&gt;\n              &lt;button onclick=\"prepararEdicion(${tarea.id}, '${tarea.title}', '${tarea.description || ''}', ${tarea.completed})\"&gt;Editar&lt;/button&gt;\n              &lt;button onclick=\"eliminarTarea(${tarea.id})\"&gt;Eliminar&lt;/button&gt;\n            &lt;/div&gt;\n          `;\n          taskList.appendChild(li);\n        });\n      } catch (error) {\n        mostrarMensaje(error.message, 'error');\n      }\n    }\n\n    // Funci\u00f3n para crear o actualizar una tarea\n    async function crearOActualizarTarea() {\n      const title = taskTitle.value.trim();\n      const description = taskDescription.value.trim();\n      const completed = taskCompleted.checked;\n\n      if (!title) {\n        mostrarMensaje('El t\u00edtulo es obligatorio', 'error');\n        return;\n      }\n\n      const tarea = { title, description, completed };\n      const url = editingTaskId ? `${API_URL}/${editingTaskId}` : API_URL;\n      const method = editingTaskId ? 'PUT' : 'POST';\n\n      try {\n        const response = await fetch(url, {\n          method,\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(tarea)\n        });\n        if (!response.ok) throw new Error(`Error al ${editingTaskId ? 'actualizar' : 'crear'} tarea`);\n        limpiarFormulario();\n        mostrarMensaje(`Tarea ${editingTaskId ? 'actualizada' : 'creada'} con \u00e9xito`, 'success');\n        cargarTareas();\n      } catch (error) {\n        mostrarMensaje(error.message, 'error');\n      }\n    }\n\n    // Funci\u00f3n para preparar la edici\u00f3n de una tarea\n    function prepararEdicion(id, title, description, completed) {\n      editingTaskId = id;\n      taskTitle.value = title;\n      taskDescription.value = description;\n      taskCompleted.checked = completed;\n      document.querySelector('button[onclick=\"crearOActualizarTarea()\"]').textContent = 'Actualizar Tarea';\n    }\n\n    // Funci\u00f3n para eliminar una tarea\n    async function eliminarTarea(id) {\n      if (confirm('\u00bfSeguro que quieres eliminar esta tarea?')) {\n        try {\n          const response = await fetch(`${API_URL}/${id}`, {\n            method: 'DELETE'\n          });\n          if (!response.ok) throw new Error('Error al eliminar tarea');\n          mostrarMensaje('Tarea eliminada con \u00e9xito', 'success');\n          cargarTareas();\n        } catch (error) {\n          mostrarMensaje(error.message, 'error');\n        }\n      }\n    }\n\n    // Funci\u00f3n para mostrar mensajes\n    function mostrarMensaje(texto, tipo) {\n      mensaje.textContent = texto;\n      mensaje.className = tipo;\n    }\n\n    // Funci\u00f3n para limpiar el formulario\n    function limpiarFormulario() {\n      taskTitle.value = '';\n      taskDescription.value = '';\n      taskCompleted.checked = false;\n      editingTaskId = null;\n      document.querySelector('button[onclick=\"crearOActualizarTarea()\"]').textContent = 'Crear Tarea';\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n del Ejemplo:</p> <ul> <li>Configuraci\u00f3n en MockAPI.io:<ul> <li>Se crea un recurso <code>tasks</code> con propiedades <code>id</code>, <code>title</code>, <code>description</code> y <code>completed</code>.</li> <li>MockAPI.io genera autom\u00e1ticamente los endpoints CRUD (<code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>).</li> <li>Se pobla con datos iniciales para pruebas.</li> </ul> </li> <li>HTML:<ul> <li>Contiene un formulario con campos para t\u00edtulo, descripci\u00f3n y estado (completada).</li> <li>Una lista (<code>&lt;ul&gt;</code>) muestra las tareas con opciones para editar o eliminar.</li> </ul> </li> <li>CSS:<ul> <li>Estiliza la interfaz con un dise\u00f1o limpio y responsivo (media queries para m\u00f3viles).</li> <li>Resalta tareas completadas con una l\u00ednea tachada.</li> </ul> </li> <li>JavaScript:<ul> <li>Usa <code>fetch</code> para consumir los endpoints de MockAPI.io.</li> <li>Actualiza el DOM din\u00e1micamente para mostrar la lista de tareas.</li> <li>Valida el campo de t\u00edtulo antes de enviar solicitudes <code>POST</code> o <code>PUT</code>.</li> <li>Maneja errores con <code>try-catch</code> y muestra mensajes de \u00e9xito o error.</li> <li>Soporta edici\u00f3n de tareas rellenando el formulario con los datos actuales.</li> </ul> </li> <li>Funcionalidad:<ul> <li>Crear: Env\u00eda una nueva tarea al endpoint <code>POST /tasks</code>.</li> <li>Leer: Obtiene todas las tareas con <code>GET /tasks</code> y las muestra.</li> <li>Actualizar: Modifica una tarea existente con <code>PUT /tasks/:id</code>.</li> <li>Eliminar: Elimina una tarea con <code>DELETE /tasks/:id</code>.</li> </ul> </li> </ul>"},{"location":"content/p10/#rubrica-de-evaluacion-creacion-y-consumo-de-api-con-mockapiio","title":"R\u00fabrica de Evaluaci\u00f3n: Creaci\u00f3n y Consumo de API con MockAPI.io","text":""},{"location":"content/p10/#descripcion-general_1","title":"Descripci\u00f3n General","text":"<p>Esta r\u00fabrica eval\u00faa el desarrollo de una interfaz web que consume una API simulada en MockAPI.io a lo largo de tres clases. Cada clase eval\u00faa aspectos espec\u00edficos, desde la configuraci\u00f3n inicial de la API y el dise\u00f1o de la interfaz hasta la implementaci\u00f3n completa y la exposici\u00f3n final. La Clase 3 incluye una presentaci\u00f3n oral del proyecto.</p>"},{"location":"content/p10/#estructura-de-evaluacion","title":"Estructura de Evaluaci\u00f3n","text":"<p>La evaluaci\u00f3n se divide en tres clases, con criterios espec\u00edficos para cada una. Cada criterio tiene una ponderaci\u00f3n y una escala de puntuaci\u00f3n (0 a 100). La nota final por clase se calcula seg\u00fan el cumplimiento de los criterios.</p>"},{"location":"content/p10/#escala-de-puntuacion","title":"Escala de Puntuaci\u00f3n","text":"Puntuaci\u00f3n Descripci\u00f3n 90-100 Excelente: Cumple todos los requisitos con alta calidad y creatividad. 70-89 Bueno: Cumple la mayor\u00eda de los requisitos con buena implementaci\u00f3n. 50-69 Regular: Cumple parcialmente los requisitos, con errores o limitaciones. 0-49 Insuficiente: No cumple los requisitos o presenta errores graves."},{"location":"content/p10/#clase-1-planificacion-y-diseno-inicial","title":"Clase 1: Planificaci\u00f3n y Dise\u00f1o Inicial","text":"<p>Objetivo: Evaluar la capacidad del equipo para configurar la API en MockAPI.io, definir la entidad y dise\u00f1ar la interfaz inicial.</p> Criterio Descripci\u00f3n Ponderaci\u00f3n Puntuaci\u00f3n Configuraci\u00f3n de MockAPI.io Se crea un proyecto en MockAPI.io con una entidad bien definida (m\u00ednimo 4 propiedades) y al menos 5 registros iniciales. 25% 0-100 Definici\u00f3n de la Interfaz La interfaz propuesta es clara, funcional y se alinea con el tema de la API. Incluye un formulario y una secci\u00f3n para mostrar datos. 25% 0-100 Dise\u00f1o Visual Se presenta un dise\u00f1o inicial (boceto o HTML/CSS est\u00e1tico) que es responsivo y estilizado. 25% 0-100 Planificaci\u00f3n de JavaScript Se describe c\u00f3mo se manejar\u00e1n las solicitudes HTTP y la manipulaci\u00f3n del DOM para consumir la API. 25% 0-100 <p>Entregable Esperado:</p> <ul> <li>Documento o presentaci\u00f3n con la descripci\u00f3n de la entidad en MockAPI.io, la interfaz propuesta y el boceto visual.</li> <li>URL del proyecto en MockAPI.io con el recurso configurado.</li> <li>Prototipo est\u00e1tico inicial (HTML/CSS) opcional.</li> </ul>"},{"location":"content/p10/#clase-2-implementacion-y-progreso-tecnico","title":"Clase 2: Implementaci\u00f3n y Progreso T\u00e9cnico","text":"<p>Objetivo: Evaluar el avance en la implementaci\u00f3n del consumo de la API y la funcionalidad de la interfaz.</p> Criterio Descripci\u00f3n Ponderaci\u00f3n Puntuaci\u00f3n Consumo de la API Se implementan solicitudes HTTP (m\u00ednimo <code>GET</code> y <code>POST</code>) usando Fetch, con manejo de respuestas. 30% 0-100 Manejo del DOM La interfaz actualiza din\u00e1micamente el DOM con los datos de la API. 25% 0-100 Validaci\u00f3n y Errores Se valida el formulario y se manejan errores de la API con mensajes claros al usuario. 20% 0-100 Estilo y Responsividad La interfaz es visualmente atractiva y responsiva en diferentes dispositivos. 15% 0-100 Pruebas Iniciales La interfaz responde correctamente a solicitudes de prueba (probadas manualmente). 10% 0-100 <p>Entregable Esperado:</p> <ul> <li>C\u00f3digo fuente parcial con HTML, CSS y JavaScript que consuma al menos dos endpoints (<code>GET</code> y <code>POST</code>).</li> <li>Ejemplos funcionales de solicitudes a la API.</li> <li>Interfaz estilizada y parcialmente funcional.</li> </ul>"},{"location":"content/p10/#clase-3-implementacion-final-y-exposicion","title":"Clase 3: Implementaci\u00f3n Final y Exposici\u00f3n","text":"<p>Objetivo: Evaluar la implementaci\u00f3n completa de la interfaz y la calidad de la exposici\u00f3n oral.</p> Criterio Descripci\u00f3n Ponderaci\u00f3n Puntuaci\u00f3n Funcionalidad Completa La interfaz consume todos los endpoints CRUD (<code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>) y funciona correctamente. 30% 0-100 Calidad del C\u00f3digo El c\u00f3digo est\u00e1 organizado, usa funciones modulares y sigue buenas pr\u00e1cticas de JavaScript. 20% 0-100 Documentaci\u00f3n El archivo <code>README.md</code> explica c\u00f3mo configurar MockAPI.io, ejecutar la aplicaci\u00f3n, los endpoints consumidos y ejemplos de uso. 20% 0-100 Exposici\u00f3n Oral La presentaci\u00f3n es clara, muestra la interfaz en acci\u00f3n y responde a preguntas de manera efectiva. 20% 0-100 Creatividad y Extras Se incluyen elementos adicionales (por ejemplo, <code>localStorage</code>, filtros, animaciones CSS) que enriquecen la interfaz. 10% 0-100 <p>Entregable Esperado:</p> <ul> <li>C\u00f3digo fuente completo y funcional de la interfaz.</li> <li>Proyecto configurado en MockAPI.io (URL compartida).</li> <li>Archivo <code>README.md</code> con instrucciones claras y ejemplos.</li> <li>Presentaci\u00f3n oral (5-10 minutos) que explique el proyecto, muestre la interfaz en acci\u00f3n y responda preguntas.</li> </ul>"},{"location":"content/p10/#formato-sugerido-para-la-exposicion","title":"Formato Sugerido para la Exposici\u00f3n","text":"<ul> <li>Introducci\u00f3n (1-2 min): Presentar el tema de la API y el prop\u00f3sito de la interfaz.</li> <li>Demostraci\u00f3n (3-5 min): Mostrar la interfaz interactuando con la API (crear, leer, actualizar, eliminar datos).</li> <li>Explicaci\u00f3n T\u00e9cnica (2-3 min): Describir la configuraci\u00f3n en MockAPI.io, el consumo de la API y decisiones de dise\u00f1o.</li> <li>Conclusi\u00f3n (1-2 min): Resumir aportes, desaf\u00edos superados y posibles mejoras.</li> </ul>"},{"location":"content/p10/#calculo-de-la-nota-final","title":"C\u00e1lculo de la Nota Final","text":"<p>La nota final del proyecto se calcula como el promedio ponderado de las tres clases:</p> <ul> <li>Clase 1: 30%</li> <li>Clase 2: 30%</li> <li>Clase 3: 40%</li> </ul>"},{"location":"content/p10/#instrucciones-para-la-evaluacion","title":"Instrucciones para la Evaluaci\u00f3n","text":"<ul> <li>Cada clase debe entregar los avances correspondientes en un repositorio (por ejemplo, GitHub).</li> <li>La exposici\u00f3n en la Clase 3 debe ser presentada por todos los miembros del equipo.</li> <li>Se valorar\u00e1 la colaboraci\u00f3n y la distribuci\u00f3n equitativa de tareas entre los integrantes.</li> <li>Compartan la URL del proyecto en MockAPI.io para que el evaluador pueda verificar los endpoints.</li> <li>Si usan dependencias externas (como Bootstrap), incl\u00fayanlas v\u00eda CDN para simplicidad.</li> </ul>"},{"location":"content/p10/#ejemplo-adicional-filtrar-tareas-por-estado","title":"Ejemplo Adicional: Filtrar Tareas por Estado","text":"<p>Este ejemplo extiende la interfaz anterior para incluir un filtro por estado (<code>completed</code>) usando un par\u00e1metro de consulta en el endpoint <code>GET /tasks?completed=true</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Gesti\u00f3n de Tareas con Filtro&lt;/title&gt;\n  &lt;style&gt;\n    body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }\n    .form-container { margin-bottom: 20px; }\n    input, textarea, button, select { padding: 8px; margin: 5px; width: calc(100% - 18px); box-sizing: border-box; }\n    .task-list { list-style: none; padding: 0; }\n    .task-item { border: 1px solid #ccc; padding: 10px; margin: 5px 0; }\n    .completed { text-decoration: line-through; color: #888; }\n    .error { color: red; }\n    .success { color: green; }\n    @media (max-width: 600px) { .task-item { flex-direction: column; } button { width: 100%; } }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Gesti\u00f3n de Tareas&lt;/h1&gt;\n  &lt;div class=\"form-container\"&gt;\n    &lt;input type=\"text\" id=\"taskTitle\" placeholder=\"T\u00edtulo de la tarea\" required&gt;\n    &lt;textarea id=\"taskDescription\" placeholder=\"Descripci\u00f3n de la tarea\"&gt;&lt;/textarea&gt;\n    &lt;label&gt;&lt;input type=\"checkbox\" id=\"taskCompleted\"&gt; Completada&lt;/label&gt;\n    &lt;select id=\"filterStatus\"&gt;\n      &lt;option value=\"\"&gt;Todas las tareas&lt;/option&gt;\n      &lt;option value=\"true\"&gt;Completadas&lt;/option&gt;\n      &lt;option value=\"false\"&gt;Pendientes&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;button onclick=\"crearOActualizarTarea()\"&gt;Crear Tarea&lt;/button&gt;\n  &lt;/div&gt;\n  &lt;p id=\"mensaje\"&gt;&lt;/p&gt;\n  &lt;ul id=\"taskList\" class=\"task-list\"&gt;&lt;/ul&gt;\n\n  &lt;script&gt;\n    const API_URL = 'https://1234567890.mockapi.io/api/v1/tasks'; // Reemplazar con tu URL de MockAPI.io\n    const taskList = document.getElementById('taskList');\n    const taskTitle = document.getElementById('taskTitle');\n    const taskDescription = document.getElementById('taskDescription');\n    const taskCompleted = document.getElementById('taskCompleted');\n    const filterStatus = document.getElementById('filterStatus');\n    const mensaje = document.getElementById('mensaje');\n    let editingTaskId = null;\n\n    // Cargar tareas al iniciar\n    cargarTareas();\n\n    // Funci\u00f3n para cargar y mostrar tareas\n    async function cargarTareas() {\n      const status = filterStatus.value;\n      const url = status ? `${API_URL}?completed=${status}` : API_URL;\n      try {\n        const response = await fetch(url);\n        if (!response.ok) throw new Error('Error al cargar tareas');\n        const tareas = await response.json();\n        taskList.innerHTML = '';\n        tareas.forEach(tarea =&gt; {\n          const li = document.createElement('li');\n          li.className = 'task-item' + (tarea.completed ? ' completed' : '');\n          li.innerHTML = `\n            &lt;div&gt;\n              &lt;strong&gt;${tarea.title}&lt;/strong&gt;&lt;br&gt;\n              ${tarea.description || 'Sin descripci\u00f3n'}&lt;br&gt;\n              Estado: ${tarea.completed ? 'Completada' : 'Pendiente'}\n            &lt;/div&gt;\n            &lt;div&gt;\n              &lt;button onclick=\"prepararEdicion(${tarea.id}, '${tarea.title}', '${tarea.description || ''}', ${tarea.completed})\"&gt;Editar&lt;/button&gt;\n              &lt;button onclick=\"eliminarTarea(${tarea.id})\"&gt;Eliminar&lt;/button&gt;\n            &lt;/div&gt;\n          `;\n          taskList.appendChild(li);\n        });\n      } catch (error) {\n        mostrarMensaje(error.message, 'error');\n      }\n    }\n\n    // Funci\u00f3n para crear o actualizar una tarea\n    async function crearOActualizarTarea() {\n      const title = taskTitle.value.trim();\n      const description = taskDescription.value.trim();\n      const completed = taskCompleted.checked;\n\n      if (!title) {\n        mostrarMensaje('El t\u00edtulo es obligatorio', 'error');\n        return;\n      }\n\n      const tarea = { title, description, completed };\n      const url = editingTaskId ? `${API_URL}/${editingTaskId}` : API_URL;\n      const method = editingTaskId ? 'PUT' : 'POST';\n\n      try {\n        const response = await fetch(url, {\n          method,\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(tarea)\n        });\n        if (!response.ok) throw new Error(`Error al ${editingTaskId ? 'actualizar' : 'crear'} tarea`);\n        limpiarFormulario();\n        mostrarMensaje(`Tarea ${editingTaskId ? 'actualizada' : 'creada'} con \u00e9xito`, 'success');\n        cargarTareas();\n      } catch (error) {\n        mostrarMensaje(error.message, 'error');\n      }\n    }\n\n    // Funci\u00f3n para preparar la edici\u00f3n de una tarea\n    function prepararEdicion(id, title, description, completed) {\n      editingTaskId = id;\n      taskTitle.value = title;\n      taskDescription.value = description;\n      taskCompleted.checked = completed;\n      document.querySelector('button[onclick=\"crearOActualizarTarea()\"]').textContent = 'Actualizar Tarea';\n    }\n\n    // Funci\u00f3n para eliminar una tarea\n    async function eliminarTarea(id) {\n      if (confirm('\u00bfSeguro que quieres eliminar esta tarea?')) {\n        try {\n          const response = await fetch(`${API_URL}/${id}`, {\n            method: 'DELETE'\n          });\n          if (!response.ok) throw new Error('Error al eliminar tarea');\n          mostrarMensaje('Tarea eliminada con \u00e9xito', 'success');\n          cargarTareas();\n        } catch (error) {\n          mostrarMensaje(error.message, 'error');\n        }\n      }\n    }\n\n    // Funci\u00f3n para mostrar mensajes\n    function mostrarMensaje(texto, tipo) {\n      mensaje.textContent = texto;\n      mensaje.className = tipo;\n    }\n\n    // Funci\u00f3n para limpiar el formulario\n    function limpiarFormulario() {\n      taskTitle.value = '';\n      taskDescription.value = '';\n      taskCompleted.checked = false;\n      editingTaskId = null;\n      document.querySelector('button[onclick=\"crearOActualizarTarea()\"]').textContent = 'Crear Tarea';\n    }\n\n    // Actualizar tareas al cambiar el filtro\n    filterStatus.addEventListener('change', cargarTareas);\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n del Ejemplo Adicional:</p> <ul> <li>HTML: Agrega un <code>&lt;select&gt;</code> para filtrar tareas por estado (<code>completed</code>).</li> <li>CSS: Mantiene el dise\u00f1o responsivo y limpio, con estilos para tareas completadas.</li> <li>JavaScript:<ul> <li>Filtra tareas usando el par\u00e1metro <code>completed</code> en <code>GET /tasks?completed=true</code>.</li> <li>Actualiza la lista de tareas din\u00e1micamente al cambiar el filtro.</li> </ul> </li> <li>Funcionalidad: Extiende el ejemplo anterior con un filtro por estado, demostrando c\u00f3mo usar par\u00e1metros de consulta en MockAPI.io.</li> </ul>"},{"location":"content/p1s/","title":"Tipos de datos y operadores b\u00e1sicos en JavaScript","text":""},{"location":"content/p1s/#1-tipos-de-datos-en-javascript","title":"1. Tipos de datos en JavaScript","text":"<p>JavaScript es un lenguaje din\u00e1micamente tipado, lo que significa que las variables no est\u00e1n vinculadas a un tipo de dato espec\u00edfico y pueden cambiar de tipo durante la ejecuci\u00f3n. Los tipos de datos primitivos m\u00e1s comunes son:</p> <ul> <li> <p>String: Representa texto. Se escribe entre comillas simples (<code>' '</code>), dobles (<code>\" \"</code>) o backticks (<code>`</code>) para plantillas literales.   <pre><code>let nombre = \"Ana\"; // String con comillas dobles\nlet saludo = '\u00a1Hola!'; // String con comillas simples\nlet mensaje = `Bienvenida, ${nombre}`; // Plantilla literal\nconsole.log(mensaje); // Imprime: Bienvenida, Ana\n</code></pre></p> </li> <li> <p>Number: Representa n\u00fameros, ya sean enteros o decimales. No distingue entre <code>int</code> y <code>float</code>.   <pre><code>let edad = 25; // Entero\nlet altura = 1.75; // Decimal\nconsole.log(edad + altura); // Imprime: 26.75\n</code></pre></p> </li> <li> <p>Boolean: Representa valores de verdad: <code>true</code> o <code>false</code>. \u00datil para condiciones.   <pre><code>let esMayorDeEdad = true;\nlet tienePermiso = false;\nconsole.log(esMayorDeEdad); // Imprime: true\n</code></pre></p> </li> <li> <p>Null: Representa la ausencia intencional de un valor.   <pre><code>let valorNulo = null;\nconsole.log(valorNulo); // Imprime: null\n</code></pre></p> </li> <li> <p>Undefined: Indica que una variable ha sido declarada pero no tiene un valor asignado.   <pre><code>let sinDefinir;\nconsole.log(sinDefinir); // Imprime: undefined\n</code></pre></p> </li> </ul> <p>Ejemplo pr\u00e1ctico: <pre><code>let nombre = \"Carlos\"; // String\nlet edad = 30; // Number\nlet esEstudiante = true; // Boolean\nlet direccion = null; // Null\nlet telefono; // Undefined\n\nconsole.log(\"Nombre:\", nombre, \"Edad:\", edad, \"Es estudiante:\", esEstudiante);\nconsole.log(\"Direcci\u00f3n:\", direccion, \"Tel\u00e9fono:\", telefono);\n</code></pre></p>"},{"location":"content/p1s/#2-declaracion-de-variables","title":"2. Declaraci\u00f3n de variables","text":"<p>JavaScript ofrece tres formas principales de declarar variables, cada una con un prop\u00f3sito espec\u00edfico:</p> <ul> <li> <p>var: M\u00e9todo antiguo para declarar variables. Tiene alcance de funci\u00f3n y permite redeclaraci\u00f3n, lo que puede causar errores. No se recomienda usarlo en c\u00f3digo moderno.   <pre><code>var x = 10;\nvar x = 20; // Redeclaraci\u00f3n permitida\nconsole.log(x); // Imprime: 20\n</code></pre></p> </li> <li> <p>let: Permite declarar variables con alcance de bloque (dentro de <code>{}</code>). Se puede reasignar, pero no redeclarar en el mismo \u00e1mbito.   <pre><code>let y = 15;\ny = 25; // Reasignaci\u00f3n permitida\n// let y = 30; // Error: no se puede redeclarar\nconsole.log(y); // Imprime: 25\n</code></pre></p> </li> <li> <p>const: Declara constantes con alcance de bloque. No permite reasignaci\u00f3n ni redeclaraci\u00f3n, pero los objetos o arreglos declarados con <code>const</code> pueden modificarse internamente.   <pre><code>const PI = 3.1416;\n// PI = 3.14; // Error: no se puede reasignar\nconsole.log(PI); // Imprime: 3.1416\n\nconst persona = { nombre: \"Luis\" };\npersona.nombre = \"Mar\u00eda\"; // Modificaci\u00f3n interna permitida\nconsole.log(persona.nombre); // Imprime: Mar\u00eda\n</code></pre></p> </li> </ul> <p>Buenas pr\u00e1cticas: - Usa <code>const</code> por defecto para evitar reasignaciones accidentales. - Usa <code>let</code> cuando necesites reasignar valores. - Evita <code>var</code> en c\u00f3digo moderno.</p>"},{"location":"content/p1s/#3-operadores","title":"3. Operadores","text":"<p>Los operadores permiten realizar c\u00e1lculos, comparaciones y combinaciones l\u00f3gicas.</p>"},{"location":"content/p1s/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<ul> <li><code>+</code>: Suma (tambi\u00e9n concatena strings).</li> <li><code>-</code>: Resta.</li> <li><code>*</code>: Multiplicaci\u00f3n.</li> <li><code>/</code>: Divisi\u00f3n.</li> <li><code>%</code>: M\u00f3dulo (resto de la divisi\u00f3n).</li> </ul> <pre><code>let a = 10;\nlet b = 3;\nconsole.log(\"Suma:\", a + b); // Imprime: 13\nconsole.log(\"Resta:\", a - b); // Imprime: 7\nconsole.log(\"Multiplicaci\u00f3n:\", a * b); // Imprime: 30\nconsole.log(\"Divisi\u00f3n:\", a / b); // Imprime: 3.333...\nconsole.log(\"M\u00f3dulo:\", a % b); // Imprime: 1\n</code></pre> <p>Nota sobre <code>+</code> con strings: <pre><code>let texto1 = \"Hola\";\nlet texto2 = \"Mundo\";\nconsole.log(texto1 + \" \" + texto2); // Imprime: Hola Mundo\n</code></pre></p>"},{"location":"content/p1s/#operadores-de-comparacion","title":"Operadores de comparaci\u00f3n","text":"<ul> <li><code>==</code>: Compara igualdad de valor (convierte tipos si es necesario).</li> <li><code>===</code>: Compara igualdad estricta (valor y tipo).</li> <li><code>!=</code>: Desigualdad de valor.</li> <li><code>!==</code>: Desigualdad estricta.</li> <li><code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>: Comparaciones num\u00e9ricas.</li> </ul> <pre><code>let x = 5;\nlet y = \"5\";\nconsole.log(x == y); // Imprime: true (convierte el string a n\u00famero)\nconsole.log(x === y); // Imprime: false (diferente tipo)\nconsole.log(x != y); // Imprime: false\nconsole.log(x !== y); // Imprime: true\nconsole.log(x &gt; 3); // Imprime: true\n</code></pre>"},{"location":"content/p1s/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<ul> <li><code>&amp;&amp;</code>: AND (verdadero si ambos operandos son verdaderos).</li> <li><code>||</code>: OR (verdadero si al menos un operando es verdadero).</li> <li><code>!</code>: NOT (invierte el valor booleano).</li> </ul> <pre><code>let esAdulto = true;\nlet tieneLicencia = false;\nconsole.log(esAdulto &amp;&amp; tieneLicencia); // Imprime: false\nconsole.log(esAdulto || tieneLicencia); // Imprime: true\nconsole.log(!esAdulto); // Imprime: false\n</code></pre> <p>Ejemplo combinado: <pre><code>let num1 = 8;\nlet num2 = 3;\nlet esMayor = num1 &gt; num2; // true\nlet esDivisible = num1 % 2 === 0; // true\nconsole.log(esMayor &amp;&amp; esDivisible); // Imprime: true\n</code></pre></p>"},{"location":"content/p1s/#objetivo-2-utilizar-entrada-de-usuario-con-prompt","title":"Objetivo 2: Utilizar entrada de usuario con <code>prompt</code>","text":""},{"location":"content/p1s/#entrada-de-usuario-con-prompt","title":"Entrada de usuario con <code>prompt</code>","text":"<p>La funci\u00f3n <code>prompt</code> muestra un cuadro de di\u00e1logo en el navegador donde el usuario puede ingresar texto. Devuelve un valor de tipo <code>string</code> o <code>null</code> si el usuario cancela.</p> <pre><code>let nombre = prompt(\"\u00bfCu\u00e1l es tu nombre?\");\nconsole.log(\"Hola, \" + nombre); // Imprime el nombre ingresado\n</code></pre>"},{"location":"content/p1s/#conversion-de-tipos","title":"Conversi\u00f3n de tipos","text":"<p>Dado que <code>prompt</code> devuelve un string, es necesario convertir el valor a otro tipo si se requiere, por ejemplo, para operaciones num\u00e9ricas.</p> <ul> <li>Convertir a n\u00famero:</li> <li><code>parseInt(string)</code>: Convierte a entero.</li> <li><code>parseFloat(string)</code>: Convierte a decimal.</li> <li><code>Number(string)</code>: Convierte a n\u00famero (entero o decimal seg\u00fan el caso).</li> </ul> <pre><code>let edadStr = prompt(\"Ingresa tu edad:\");\nlet edad = parseInt(edadStr); // Convierte a entero\nconsole.log(\"El pr\u00f3ximo a\u00f1o tendr\u00e1s\", edad + 1, \"a\u00f1os\");\n</code></pre> <p>Validaci\u00f3n b\u00e1sica: <pre><code>let numeroStr = prompt(\"Ingresa un n\u00famero:\");\nlet numero = Number(numeroStr);\nif (isNaN(numero)) {\n  console.log(\"Por favor, ingresa un n\u00famero v\u00e1lido\");\n} else {\n  console.log(\"El doble de tu n\u00famero es\", numero * 2);\n}\n</code></pre></p> <p>Ejemplo pr\u00e1ctico: Un script que pide dos n\u00fameros y realiza operaciones aritm\u00e9ticas: <pre><code>let num1Str = prompt(\"Ingresa el primer n\u00famero:\");\nlet num2Str = prompt(\"Ingresa el segundo n\u00famero:\");\nlet num1 = parseFloat(num1Str);\nlet num2 = parseFloat(num2Str);\n\nif (isNaN(num1) || isNaN(num2)) {\n  console.log(\"Por favor, ingresa n\u00fameros v\u00e1lidos\");\n} else {\n  console.log(\"Suma:\", num1 + num2);\n  console.log(\"Resta:\", num1 - num2);\n  console.log(\"Multiplicaci\u00f3n:\", num1 * num2);\n  console.log(\"Divisi\u00f3n:\", num1 / num2);\n}\n</code></pre></p>"},{"location":"content/p1s/#objetivo-3-crear-scripts-interactivos-en-la-consola","title":"Objetivo 3: Crear scripts interactivos en la consola","text":"<p>Ahora que hemos cubierto los fundamentos, podemos combinar todos los conceptos para crear scripts interactivos que se ejecuten en la consola del navegador o en un entorno como Node.js (aunque <code>prompt</code> es espec\u00edfico del navegador).</p>"},{"location":"content/p1s/#ejemplo-1-calculadora-basica","title":"Ejemplo 1: Calculadora b\u00e1sica","text":"<p>Este script pide al usuario dos n\u00fameros y una operaci\u00f3n, luego muestra el resultado.</p> <pre><code>let num1Str = prompt(\"Ingresa el primer n\u00famero:\");\nlet num2Str = prompt(\"Ingresa el segundo n\u00famero:\");\nlet operacion = prompt(\"Ingresa la operaci\u00f3n (+, -, *, /):\");\n\nlet num1 = parseFloat(num1Str);\nlet num2 = parseFloat(num2Str);\nlet resultado;\n\nif (isNaN(num1) || isNaN(num2)) {\n  console.log(\"Por favor, ingresa n\u00fameros v\u00e1lidos\");\n} else {\n  if (operacion === \"+\") {\n    resultado = num1 + num2;\n  } else if (operacion === \"-\") {\n    resultado = num1 - num2;\n  } else if (operacion === \"*\") {\n    resultado = num1 * num2;\n  } else if (operacion === \"/\") {\n    if (num2 === 0) {\n      console.log(\"Error: No se puede dividir por cero\");\n    } else {\n      resultado = num1 / num2;\n    }\n  } else {\n    console.log(\"Operaci\u00f3n no v\u00e1lida\");\n  }\n\n  if (resultado !== undefined) {\n    console.log(`Resultado: ${num1} ${operacion} ${num2} = ${resultado}`);\n  }\n}\n</code></pre> <p>Explicaci\u00f3n: - Usa <code>prompt</code> para obtener entrada del usuario. - Convierte strings a n\u00fameros con <code>parseFloat</code>. - Usa operadores aritm\u00e9ticos y condicionales para procesar la operaci\u00f3n. - Maneja casos de error (n\u00fameros inv\u00e1lidos, divisi\u00f3n por cero).</p>"},{"location":"content/p1s/#ejemplo-2-verificador-de-edad","title":"Ejemplo 2: Verificador de edad","text":"<p>Un script que pide la edad del usuario y determina si es mayor de edad.</p> <pre><code>const EDAD_MINIMA = 18;\nlet edadStr = prompt(\"Ingresa tu edad:\");\nlet edad = parseInt(edadStr);\n\nif (isNaN(edad)) {\n  console.log(\"Por favor, ingresa una edad v\u00e1lida\");\n} else {\n  let esMayor = edad &gt;= EDAD_MINIMA;\n  console.log(\"\u00bfEres mayor de edad?\", esMayor);\n  if (esMayor) {\n    console.log(\"\u00a1Puedes entrar!\");\n  } else {\n    console.log(\"Lo siento, no puedes entrar.\");\n  }\n}\n</code></pre> <p>Explicaci\u00f3n: - Usa <code>const</code> para una constante. - Convierte la entrada a entero con <code>parseInt</code>. - Usa operadores de comparaci\u00f3n y l\u00f3gicos para evaluar la condici\u00f3n. - Muestra mensajes personalizados seg\u00fan el resultado.</p>"},{"location":"content/p1s/#ejemplo-3-adivina-el-numero","title":"Ejemplo 3: Adivina el n\u00famero","text":"<p>Un juego interactivo donde el usuario intenta adivinar un n\u00famero generado aleatoriamente.</p> <pre><code>const numeroSecreto = Math.floor(Math.random() * 10) + 1; // N\u00famero entre 1 y 10\nlet intentos = 0;\nlet adivinado = false;\n\nwhile (!adivinado) {\n  let intentoStr = prompt(\"Adivina el n\u00famero (1-10):\");\n  let intento = parseInt(intentoStr);\n  intentos++;\n\n  if (isNaN(intento)) {\n    console.log(\"Por favor, ingresa un n\u00famero v\u00e1lido\");\n  } else if (intento === numeroSecreto) {\n    console.log(`\u00a1Felicidades! Adivinaste en ${intentos} intentos.`);\n    adivinado = true;\n  } else if (intento &lt; numeroSecreto) {\n    console.log(\"El n\u00famero es mayor. Intenta de nuevo.\");\n  } else {\n    console.log(\"El n\u00famero es menor. Intenta de nuevo.\");\n  }\n}\n</code></pre> <p>Explicaci\u00f3n: - Usa <code>Math.random</code> y <code>Math.floor</code> para generar un n\u00famero aleatorio. - Usa un bucle <code>while</code> para mantener el juego activo hasta que se adivine. - Incrementa un contador de intentos (<code>intentos</code>). - Usa operadores de comparaci\u00f3n para dar pistas al usuario.</p>"},{"location":"content/p1s/#resumen-de-los-objetivos-cumplidos","title":"Resumen de los objetivos cumplidos","text":"<ol> <li>Dominar tipos de datos y operadores:</li> <li>Explicamos <code>string</code>, <code>number</code>, <code>boolean</code>, <code>null</code> y <code>undefined</code> con ejemplos.</li> <li>Cubrimos <code>let</code>, <code>const</code>, <code>var</code> y sus diferencias.</li> <li> <p>Detallamos operadores aritm\u00e9ticos, de comparaci\u00f3n y l\u00f3gicos con ejemplos pr\u00e1cticos.</p> </li> <li> <p>Utilizar <code>prompt</code> y conversi\u00f3n de tipos:</p> </li> <li>Mostramos c\u00f3mo obtener entrada de usuario con <code>prompt</code>.</li> <li>Explicamos c\u00f3mo convertir strings a n\u00fameros con <code>parseInt</code>, <code>parseFloat</code> y <code>Number</code>.</li> <li> <p>Incluimos validaci\u00f3n para manejar entradas inv\u00e1lidas.</p> </li> <li> <p>Crear scripts interactivos:</p> </li> <li>Presentamos ejemplos de scripts que combinan entrada de usuario, tipos de datos, operadores y l\u00f3gica condicional.</li> <li>Los ejemplos (calculadora, verificador de edad, juego de adivinanza) son pr\u00e1cticos y escalables.</li> </ol>"},{"location":"content/p1s/#ejercicio-procesador-de-datos-personales","title":"Ejercicio: Procesador de datos personales","text":"<p>El ejercicio consiste en un programa que pide al usuario informaci\u00f3n personal (nombre, edad, altura) y realiza operaciones con esos datos, como calcular la edad en meses, comparar valores, y combinar resultados con operadores l\u00f3gicos. Todo el c\u00f3digo se envuelve en un artifact seg\u00fan las instrucciones.</p> <pre><code>// Declaraci\u00f3n de variables con diferentes tipos de datos y m\u00e9todos\nconst SALUDO_INICIAL = \"\u00a1Bienvenido al procesador de datos personales!\";\nvar mensajeFinal = \"Procesando tus datos...\";\nlet resultado = null; // Inicialmente null, se asignar\u00e1 despu\u00e9s\nlet sinAsignar; // Undefined por defecto\n\n// Mostrar mensaje inicial\nconsole.log(SALUDO_INICIAL);\n\n// Obtener entrada del usuario con prompt\nlet nombre = prompt(\"Ingresa tu nombre:\");\nlet edadStr = prompt(\"Ingresa tu edad (en a\u00f1os):\");\nlet alturaStr = prompt(\"Ingresa tu altura (en metros, ej. 1.75):\");\n\n// Conversi\u00f3n de tipos para los valores num\u00e9ricos\nlet edad = parseInt(edadStr); // Convertir edad a entero\nlet altura = parseFloat(alturaStr); // Convertir altura a decimal\n\n// Operaciones aritm\u00e9ticas\nlet edadEnMeses = edad * 12; // Calcular edad en meses\nlet alturaEnCm = altura * 100; // Convertir metros a cent\u00edmetros\nlet sumaEdadAltura = edad + altura; // Suma de edad y altura\nlet restoEdad = edad % 5; // Resto de dividir edad entre 5\n\n// Operaciones de comparaci\u00f3n\nlet esEdadPar = (edad % 2) === 0; // \u00bfEs la edad un n\u00famero par?\nlet esMayorQueCero = altura &gt; 0; // \u00bfEs la altura mayor que 0?\nlet esNombreVacio = nombre === \"\"; // \u00bfEl nombre est\u00e1 vac\u00edo?\nlet esEdadIgualAltura = edad == altura; // Comparaci\u00f3n no estricta\n\n// Operadores l\u00f3gicos\nlet combinacionLogica = esEdadPar &amp;&amp; esMayorQueCero; // AND: \u00bfEdad par y altura &gt; 0?\nlet otraCombinacion = esNombreVacio || esEdadPar; // OR: \u00bfNombre vac\u00edo o edad par?\nlet negacion = !esMayorQueCero; // NOT: Negar si altura &gt; 0\n\n// Asignar resultado para evitar null\nresultado = sumaEdadAltura;\n\n// Mostrar resultados en la consola\nconsole.log(\"--- Resultados ---\");\nconsole.log(\"Nombre ingresado:\", nombre); // String\nconsole.log(\"Edad en a\u00f1os:\", edad); // Number (entero)\nconsole.log(\"Altura en metros:\", altura); // Number (decimal)\nconsole.log(\"Edad en meses:\", edadEnMeses); // Operaci\u00f3n aritm\u00e9tica\nconsole.log(\"Altura en cent\u00edmetros:\", alturaEnCm); // Operaci\u00f3n aritm\u00e9tica\nconsole.log(\"Suma de edad y altura:\", resultado); // Resultado asignado\nconsole.log(\"Resto de edad \u00f7 5:\", restoEdad); // Operaci\u00f3n m\u00f3dulo\nconsole.log(\"\u00bfEs la edad par?\", esEdadPar); // Comparaci\u00f3n\nconsole.log(\"\u00bfEs la altura mayor que 0?\", esMayorQueCero); // Comparaci\u00f3n\nconsole.log(\"\u00bfEl nombre est\u00e1 vac\u00edo?\", esNombreVacio); // Comparaci\u00f3n\nconsole.log(\"\u00bfEdad igual a altura? (no estricta)\", esEdadIgualAltura); // Comparaci\u00f3n\nconsole.log(\"Edad par AND altura &gt; 0:\", combinacionLogica); // L\u00f3gico AND\nconsole.log(\"Nombre vac\u00edo OR edad par:\", otraCombinacion); // L\u00f3gico OR\nconsole.log(\"Negaci\u00f3n de altura &gt; 0:\", negacion); // L\u00f3gico NOT\nconsole.log(\"Valor de variable sin asignar:\", sinAsignar); // Undefined\nconsole.log(\"Mensaje final:\", mensajeFinal); // Var\n\n// Nota: No se valida la entrada del usuario para evitar condicionales\n</code></pre>"},{"location":"content/p1s/#explicacion-del-ejercicio","title":"Explicaci\u00f3n del ejercicio","text":"<ol> <li>Tipos de datos:</li> <li>String: <code>SALUDO_INICIAL</code>, <code>nombre</code>, <code>mensajeFinal</code>.</li> <li>Number: <code>edad</code> (entero), <code>altura</code> (decimal), <code>edadEnMeses</code>, <code>alturaEnCm</code>, <code>sumaEdadAltura</code>, <code>restoEdad</code>.</li> <li>Boolean: <code>esEdadPar</code>, <code>esMayorQueCero</code>, <code>esNombreVacio</code>, <code>esEdadIgualAltura</code>, <code>combinacionLogica</code>, <code>otraCombinacion</code>, <code>negacion</code>.</li> <li>Null: <code>resultado</code> inicialmente.</li> <li> <p>Undefined: <code>sinAsignar</code>.</p> </li> <li> <p>Declaraci\u00f3n de variables:</p> </li> <li>const: <code>SALUDO_INICIAL</code> para un mensaje constante.</li> <li>var: <code>mensajeFinal</code> para mostrar el uso de <code>var</code>.</li> <li> <p>let: <code>nombre</code>, <code>edad</code>, <code>altura</code>, <code>resultado</code>, <code>sinAsignar</code> y otras variables que pueden reasignarse o mantenerse sin valor inicial.</p> </li> <li> <p>Operadores:</p> </li> <li>Aritm\u00e9ticos: <code>*</code> para calcular <code>edadEnMeses</code> y <code>alturaEnCm</code>, <code>+</code> para <code>sumaEdadAltura</code>, <code>%</code> para <code>restoEdad</code> y <code>esEdadPar</code>.</li> <li>Comparaci\u00f3n: <code>===</code> para <code>esEdadPar</code>, <code>esNombreVacio</code>, <code>&gt;</code> para <code>esMayorQueCero</code>, <code>==</code> para <code>esEdadIgualAltura</code>.</li> <li> <p>L\u00f3gicos: <code>&amp;&amp;</code> para <code>combinacionLogica</code>, <code>||</code> para <code>otraCombinacion</code>, <code>!</code> para <code>negacion</code>.</p> </li> <li> <p>Entrada de usuario con <code>prompt</code> y conversi\u00f3n de tipos:</p> </li> <li>Usa <code>prompt</code> para obtener <code>nombre</code>, <code>edadStr</code> y <code>alturaStr</code>.</li> <li>Convierte <code>edadStr</code> a entero con <code>parseInt</code>.</li> <li> <p>Convierte <code>alturaStr</code> a decimal con <code>parseFloat</code>.</p> </li> <li> <p>Interactividad en la consola:</p> </li> <li>El script muestra un mensaje inicial, procesa las entradas del usuario, realiza c\u00e1lculos y comparaciones, y muestra todos los resultados en la consola.</li> <li>No usa condicionales ni ciclos, por lo que no valida entradas (por ejemplo, si el usuario ingresa texto en lugar de n\u00fameros, el resultado puede ser <code>NaN</code>).</li> </ol>"},{"location":"content/p1s/#como-ejecutar-el-ejercicio","title":"C\u00f3mo ejecutar el ejercicio","text":"<ol> <li>Copia el c\u00f3digo en un archivo con extensi\u00f3n <code>.js</code> (por ejemplo, <code>procesador_datos_personales.js</code>).</li> <li>Incl\u00fayelo en un archivo HTML b\u00e1sico para ejecutarlo en un navegador:    <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Ejercicio JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script src=\"procesador_datos_personales.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> <li>Abre el archivo HTML en un navegador y abre la consola (F12 o clic derecho &gt; Inspeccionar &gt; Consola).</li> <li>Ingresa datos cuando se muestren los cuadros de <code>prompt</code> (por ejemplo, \"Ana\", \"25\", \"1.75\").</li> <li>Observa los resultados en la consola.</li> </ol>"},{"location":"content/p1s/#ejemplo-de-salida-en-la-consola","title":"Ejemplo de salida en la consola","text":"<p>Si el usuario ingresa: - Nombre: \"Ana\" - Edad: \"25\" - Altura: \"1.75\"</p> <p>La consola mostrar\u00e1 algo como: <pre><code>\u00a1Bienvenido al procesador de datos personales!\n--- Resultados ---\nNombre ingresado: Ana\nEdad en a\u00f1os: 25\nAltura en metros: 1.75\nEdad en meses: 300\nAltura en cent\u00edmetros: 175\nSuma de edad y altura: 26.75\nResto de edad \u00f7 5: 0\n\u00bfEs la edad par? false\n\u00bfEs la altura mayor que 0? true\n\u00bfEl nombre est\u00e1 vac\u00edo? false\n\u00bfEdad igual a altura? (no estricta) false\nEdad par AND altura &gt; 0: false\nNombre vac\u00edo OR edad par: false\nNegaci\u00f3n de altura &gt; 0: false\nValor de variable sin asignar: undefined\nMensaje final: Procesando tus datos...\n</code></pre></p>"},{"location":"content/p1s/#actividad-1-ejercicios-de-variables-y-tipos-de-datos","title":"Actividad 1: Ejercicios de variables y Tipos de Datos","text":""},{"location":"content/p1s/#ejercicio-1-procesador-de-nombre-y-edad","title":"Ejercicio 1: Procesador de nombre y edad","text":"<p>Enunciado: Escribe un programa que pida al usuario su nombre y edad usando <code>prompt</code>. Convierte la edad a un n\u00famero entero. Calcula la edad en d\u00edas multiplicando por 365 (constante). Verifica si el nombre tiene menos de 5 caracteres. Usa <code>var</code> para la variable del nombre, <code>let</code> para la edad y el resultado de la comparaci\u00f3n, y <code>const</code> para la constante. Declara una variable con valor <code>null</code>. Muestra todos los resultados en la consola, incluyendo el nombre, edad en d\u00edas, si el nombre es corto y el valor nulo.</p> <pre><code>var nombre = prompt(\"Ingresa tu nombre:\"); // String\nlet edadStr = prompt(\"Ingresa tu edad:\"); // String\nconst DIAS_POR_ANIO = 365; // Number\nlet edad = parseInt(edadStr); // Number (entero)\nvar edadEnDias = edad * DIAS_POR_ANIO; // Operaci\u00f3n aritm\u00e9tica\nlet esNombreCorto = nombre.length &lt; 5; // Comparaci\u00f3n\nlet resultado = null; // Null\nconsole.log(\"Nombre:\", nombre);\nconsole.log(\"Edad en d\u00edas:\", edadEnDias);\nconsole.log(\"\u00bfNombre corto? (&lt;5 caracteres):\", esNombreCorto);\nconsole.log(\"Resultado:\", resultado);\n</code></pre>"},{"location":"content/p1s/#ejercicio-2-conversor-de-altura","title":"Ejercicio 2: Conversor de altura","text":"<p>Enunciado: Crea un script que pida al usuario su altura en metros (ej. 1.75) usando <code>prompt</code>. Convierte la entrada a un n\u00famero decimal. Calcula la altura en cent\u00edmetros (multiplicando por 100) y en mil\u00edmetros (multiplicando cent\u00edmetros por 10). Verifica si la altura es mayor a 1.5 metros (constante). Usa <code>let</code> para la altura y conversiones, <code>var</code> para la variable de mil\u00edmetros y una variable sin asignar (<code>undefined</code>), y <code>const</code> para la constante de referencia. Muestra en la consola la altura en cent\u00edmetros, mil\u00edmetros, si es alta y el valor de la variable sin asignar.</p> <pre><code>const ALTURA_REFERENCIA = 1.5; // Number\nlet alturaStr = prompt(\"Ingresa tu altura en metros (ej. 1.75):\"); // String\nlet altura = parseFloat(alturaStr); // Number (decimal)\nvar alturaEnCm = altura * 100; // Operaci\u00f3n aritm\u00e9tica\nlet alturaEnMm = alturaEnCm * 10; // Operaci\u00f3n aritm\u00e9tica\nlet esAlto = altura &gt; ALTURA_REFERENCIA; // Comparaci\u00f3n\nvar sinAsignar; // Undefined\nconsole.log(\"Altura en cent\u00edmetros:\", alturaEnCm);\nconsole.log(\"Altura en mil\u00edmetros:\", alturaEnMm);\nconsole.log(\"\u00bfEs alto? (&gt;1.5m):\", esAlto);\nconsole.log(\"Variable sin asignar:\", sinAsignar);\n</code></pre>"},{"location":"content/p1s/#ejercicio-3-calculadora-de-peso","title":"Ejercicio 3: Calculadora de peso","text":"<p>Enunciado: Desarrolla un programa que solicite al usuario su peso en kilogramos con <code>prompt</code>. Convierte el peso a un n\u00famero decimal. Calcula el peso en gramos (multiplicando por 1000). Verifica si el peso es mayor a 70 kg (constante). Usa <code>var</code> para la entrada y la comparaci\u00f3n, <code>let</code> para el peso y los gramos, y <code>const</code> para la constante. Crea una combinaci\u00f3n l\u00f3gica con el resultado de la comparaci\u00f3n y <code>true</code> usando <code>&amp;&amp;</code>. Muestra en la consola el peso en gramos, si es mayor a 70 kg y el resultado de la combinaci\u00f3n l\u00f3gica.</p> <pre><code>var pesoStr = prompt(\"Ingresa tu peso en kg:\"); // String\nlet peso = parseFloat(pesoStr); // Number (decimal)\nconst PESO_REFERENCIA = 70; // Number\nlet pesoEnGramos = peso * 1000; // Operaci\u00f3n aritm\u00e9tica\nvar esPesado = peso &gt; PESO_REFERENCIA; // Comparaci\u00f3n\nlet combinacionLogica = esPesado &amp;&amp; true; // Operador l\u00f3gico\nconsole.log(\"Peso en gramos:\", pesoEnGramos);\nconsole.log(\"\u00bfPeso mayor a 70 kg?:\", esPesado);\nconsole.log(\"Combinaci\u00f3n l\u00f3gica (esPesado AND true):\", combinacionLogica);\n</code></pre>"},{"location":"content/p1s/#ejercicio-4-procesador-de-texto","title":"Ejercicio 4: Procesador de texto","text":"<p>Enunciado: Escribe un script que pida al usuario un texto con <code>prompt</code>. Concatena el texto con un saludo constante (\"\u00a1Tu texto es: \"). Verifica si el texto tiene m\u00e1s de 10 caracteres. Usa <code>const</code> para el saludo, <code>let</code> para el texto y la comparaci\u00f3n, y <code>var</code> para la concatenaci\u00f3n y una variable con valor <code>null</code>. Aplica un operador l\u00f3gico <code>!</code> para negar el resultado de la comparaci\u00f3n. Muestra en la consola el texto completo, si es largo, la negaci\u00f3n y el valor nulo.</p> <pre><code>const SALUDO = \"\u00a1Tu texto es: \"; // String\nlet texto = prompt(\"Ingresa un texto:\"); // String\nvar textoCompleto = SALUDO + texto; // Concatenaci\u00f3n\nlet esTextoLargo = texto.length &gt; 10; // Comparaci\u00f3n\nlet negacion = !esTextoLargo; // Operador l\u00f3gico\nvar valorNulo = null; // Null\nconsole.log(textoCompleto);\nconsole.log(\"\u00bfTexto largo? (&gt;10 caracteres):\", esTextoLargo);\nconsole.log(\"Negaci\u00f3n de texto largo:\", negacion);\nconsole.log(\"Valor nulo:\", valorNulo);\n</code></pre>"},{"location":"content/p1s/#ejercicio-5-calculadora-de-area","title":"Ejercicio 5: Calculadora de \u00e1rea","text":"<p>Enunciado: Crea un programa que solicite al usuario el ancho y alto de un rect\u00e1ngulo con <code>prompt</code>. Convierte ambas entradas a n\u00fameros decimales. Calcula el \u00e1rea (ancho * alto). Verifica si el \u00e1rea es mayor a 50 (constante). Usa <code>let</code> para las entradas y la comparaci\u00f3n, <code>var</code> para el ancho y una variable sin definir (<code>undefined</code>), y <code>const</code> para la constante. Muestra en la consola el \u00e1rea, si es mayor a 50 y el valor de la variable sin definir.</p> <pre><code>let anchoStr = prompt(\"Ingresa el ancho del rect\u00e1ngulo:\"); // String\nlet altoStr = prompt(\"Ingresa el alto del rect\u00e1ngulo:\"); // String\nvar ancho = parseFloat(anchoStr); // Number\nlet alto = parseFloat(altoStr); // Number\nconst AREA_REFERENCIA = 50; // Number\nvar area = ancho * alto; // Operaci\u00f3n aritm\u00e9tica\nlet esAreaGrande = area &gt; AREA_REFERENCIA; // Comparaci\u00f3n\nlet sinDefinir; // Undefined\nconsole.log(\"\u00c1rea del rect\u00e1ngulo:\", area);\nconsole.log(\"\u00bf\u00c1rea mayor a 50?:\", esAreaGrande);\nconsole.log(\"Variable sin definir:\", sinDefinir);\n</code></pre>"},{"location":"content/p1s/#ejercicio-6-conversor-de-tiempo","title":"Ejercicio 6: Conversor de tiempo","text":"<p>Enunciado: Desarrolla un script que pida al usuario una cantidad de horas con <code>prompt</code>. Convierte la entrada a un n\u00famero decimal. Calcula los minutos (horas * 60) y los segundos (minutos * 60). Verifica si la cantidad de horas es mayor a 1. Usa <code>var</code> para las horas y los segundos, <code>let</code> para los minutos y la comparaci\u00f3n, y <code>const</code> para las constantes de conversi\u00f3n. Muestra en la consola los minutos, segundos y si es mayor a 1 hora.</p> <pre><code>var horasStr = prompt(\"Ingresa una cantidad de horas:\"); // String\nlet horas = parseFloat(horasStr); // Number\nconst MINUTOS_POR_HORA = 60; // Number\nconst SEGUNDOS_POR_MINUTO = 60; // Number\nlet minutos = horas * MINUTOS_POR_HORA; // Operaci\u00f3n aritm\u00e9tica\nvar segundos = minutos * SEGUNDOS_POR_MINUTO; // Operaci\u00f3n aritm\u00e9tica\nlet esMasDeUnaHora = horas &gt; 1; // Comparaci\u00f3n\nconsole.log(\"Minutos:\", minutos);\nconsole.log(\"Segundos:\", segundos);\nconsole.log(\"\u00bfM\u00e1s de 1 hora?:\", esMasDeUnaHora);\n</code></pre>"},{"location":"content/p1s/#ejercicio-7-comparador-de-numeros","title":"Ejercicio 7: Comparador de n\u00fameros","text":"<p>Enunciado: Escribe un programa que solicite al usuario dos n\u00fameros con <code>prompt</code>. Convierte las entradas a n\u00fameros decimales. Calcula la suma y la diferencia de los n\u00fameros. Verifica si los n\u00fameros son estrictamente iguales (<code>===</code>). Usa <code>let</code> para los n\u00fameros y la comparaci\u00f3n, <code>var</code> para las entradas y la suma, y <code>const</code> para el resultado de la comparaci\u00f3n. Aplica un operador l\u00f3gico <code>||</code> con el resultado de la comparaci\u00f3n y <code>false</code>. Muestra en la consola la suma, diferencia, si son iguales y el resultado de la combinaci\u00f3n l\u00f3gica.</p> <pre><code>let num1Str = prompt(\"Ingresa el primer n\u00famero:\"); // String\nvar num2Str = prompt(\"Ingresa el segundo n\u00famero:\"); // String\nlet num1 = parseFloat(num1Str); // Number\nlet num2 = parseFloat(num2Str); // Number\nvar suma = num1 + num2; // Operaci\u00f3n aritm\u00e9tica\nlet diferencia = num1 - num2; // Operaci\u00f3n aritm\u00e9tica\nconst sonIguales = num1 === num2; // Comparaci\u00f3n estricta\nlet combinacionLogica = sonIguales || false; // Operador l\u00f3gico\nconsole.log(\"Suma:\", suma);\nconsole.log(\"Diferencia:\", diferencia);\nconsole.log(\"\u00bfSon iguales? (estrictamente):\", sonIguales);\nconsole.log(\"Combinaci\u00f3n l\u00f3gica (sonIguales OR false):\", combinacionLogica);\n</code></pre>"},{"location":"content/p1s/#ejercicio-8-procesador-de-distancia","title":"Ejercicio 8: Procesador de distancia","text":"<p>Enunciado: Crea un script que pida al usuario una distancia en kil\u00f3metros con <code>prompt</code>. Convierte la entrada a un n\u00famero decimal. Calcula la distancia en metros (kil\u00f3metros * 1000) y cent\u00edmetros (metros * 100). Verifica si la distancia es menor a 1 km. Usa <code>const</code> para la constante de conversi\u00f3n, <code>let</code> para la distancia y los metros, y <code>var</code> para la comparaci\u00f3n y una variable con valor <code>null</code>. Muestra en la consola los metros, cent\u00edmetros, si es menor a 1 km y el valor nulo.</p> <pre><code>const METROS_POR_KM = 1000; // Number\nlet distanciaStr = prompt(\"Ingresa una distancia en km:\"); // String\nvar distancia = parseFloat(distanciaStr); // Number\nlet metros = distancia * METROS_POR_KM; // Operaci\u00f3n aritm\u00e9tica\nlet centimetros = metros * 100; // Operaci\u00f3n aritm\u00e9tica\nvar esCorta = distancia &lt; 1; // Comparaci\u00f3n\nlet valorNulo = null; // Null\nconsole.log(\"Metros:\", metros);\nconsole.log(\"Cent\u00edmetros:\", centimetros);\nconsole.log(\"\u00bfDistancia menor a 1 km?:\", esCorta);\nconsole.log(\"Valor nulo:\", valorNulo);\n</code></pre>"},{"location":"content/p1s/#ejercicio-9-calculadora-de-precio","title":"Ejercicio 9: Calculadora de precio","text":"<p>Enunciado: Desarrolla un programa que solicite al usuario el precio de un producto con <code>prompt</code>. Convierte la entrada a un n\u00famero decimal. Calcula el precio con un descuento del 10% (constante). Verifica si el precio original es mayor a 100. Usa <code>var</code> para la entrada y la comparaci\u00f3n, <code>let</code> para el precio, el precio con descuento y la negaci\u00f3n, y <code>const</code> para el descuento. Aplica un operador l\u00f3gico <code>!</code> para negar el resultado de la comparaci\u00f3n. Declara una variable <code>undefined</code>. Muestra en la consola el precio con descuento, si es mayor a 100, la negaci\u00f3n y el valor sin asignar.</p> <pre><code>var precioStr = prompt(\"Ingresa el precio del producto:\"); // String\nlet precio = parseFloat(precioStr); // Number\nconst DESCUENTO = 0.1; // Number (10%)\nlet precioDescuento = precio - (precio * DESCUENTO); // Operaci\u00f3n aritm\u00e9tica\nvar esCaro = precio &gt; 100; // Comparaci\u00f3n\nlet negacion = !esCaro; // Operador l\u00f3gico\nlet sinAsignar; // Undefined\nconsole.log(\"Precio con descuento:\", precioDescuento);\nconsole.log(\"\u00bfPrecio mayor a 100?:\", esCaro);\nconsole.log(\"Negaci\u00f3n de precio caro:\", negacion);\nconsole.log(\"Variable sin asignar:\", sinAsignar);\n</code></pre>"},{"location":"content/p1s/#ejercicio-10-procesador-de-datos-personales","title":"Ejercicio 10: Procesador de datos personales","text":"<p>Enunciado: Escribe un script que pida al usuario su nombre, edad y peso con <code>prompt</code>. Convierte la edad a un n\u00famero entero y el peso a un n\u00famero decimal. Calcula la edad en meses (edad * 12, constante) y el peso en gramos (peso * 1000). Verifica si el nombre est\u00e1 vac\u00edo (<code>=== \"\"</code>) y si la edad es par (<code>% 2 === 0</code>). Usa <code>let</code> para el nombre, edad, peso y comparaciones, <code>var</code> para las entradas de edad y los gramos, y <code>const</code> para la constante. Aplica un operador l\u00f3gico <code>||</code> para combinar las comparaciones. Muestra en la consola el nombre, edad en meses, peso en gramos, si el nombre est\u00e1 vac\u00edo, si la edad es par y el resultado de la combinaci\u00f3n l\u00f3gica.</p> <pre><code>let nombre = prompt(\"Ingresa tu nombre:\"); // String\nvar edadStr = prompt(\"Ingresa tu edad:\"); // String\nlet pesoStr = prompt(\"Ingresa tu peso en kg:\"); // String\nlet edad = parseInt(edadStr); // Number\nconst MESES_POR_ANIO = 12; // Number\nlet edadEnMeses = edad * MESES_POR_ANIO; // Operaci\u00f3n aritm\u00e9tica\nvar pesoEnGramos = parseFloat(pesoStr) * 1000; // Operaci\u00f3n aritm\u00e9tica\nlet esNombreVacio = nombre === \"\"; // Comparaci\u00f3n\nlet esEdadPar = (edad % 2) === 0; // Comparaci\u00f3n\nlet combinacionLogica = esNombreVacio || esEdadPar; // Operador l\u00f3gico\nconsole.log(\"Nombre:\", nombre);\nconsole.log(\"Edad en meses:\", edadEnMeses);\nconsole.log(\"Peso en gramos:\", pesoEnGramos);\nconsole.log(\"\u00bfNombre vac\u00edo?:\", esNombreVacio);\nconsole.log(\"\u00bfEdad par?:\", esEdadPar);\nconsole.log(\"Nombre vac\u00edo OR edad par:\", combinacionLogica);\n</code></pre>"},{"location":"content/p1s/#instrucciones-para-resolver-los-ejercicios","title":"Instrucciones para resolver los ejercicios","text":"<ol> <li>Preparaci\u00f3n:</li> <li>Copia el c\u00f3digo de cada ejercicio en un archivo con extensi\u00f3n <code>.js</code> (por ejemplo, <code>procesador_nombre_edad.js</code>).</li> <li>Crea un archivo HTML b\u00e1sico para ejecutarlo en un navegador:      <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Ejercicio JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script src=\"nombre_del_archivo.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> <li> <p>Abre el archivo HTML en un navegador y accede a la consola (F12 o clic derecho &gt; Inspeccionar &gt; Consola).</p> </li> <li> <p>Ejecuci\u00f3n:</p> </li> <li>Sigue las indicaciones del enunciado de cada ejercicio.</li> <li>Ingresa datos en los cuadros de <code>prompt</code> que aparecen (por ejemplo, un nombre, un n\u00famero para la edad, etc.).</li> <li> <p>Observa los resultados en la consola para verificar que el script funciona como se describe.</p> </li> <li> <p>Pr\u00e1ctica adicional:</p> </li> <li>Modifica las constantes (por ejemplo, cambia <code>DIAS_POR_ANIO</code> o <code>DESCUENTO</code>) para experimentar con diferentes valores.</li> <li>Cambia los operadores de comparaci\u00f3n (por ejemplo, de <code>&gt;</code> a <code>&lt;</code>) o l\u00f3gicos (de <code>&amp;&amp;</code> a <code>||</code>) para ver c\u00f3mo afectan los resultados.</li> <li> <p>Ingresa diferentes tipos de datos (por ejemplo, texto en lugar de n\u00fameros) para observar c\u00f3mo el script maneja entradas inv\u00e1lidas (puede producir <code>NaN</code>).</p> </li> <li> <p>Notas importantes:</p> </li> <li>Los ejercicios no incluyen validaci\u00f3n de entradas porque no se permiten condicionales ni ciclos, seg\u00fan las restricciones.</li> <li>Cada ejercicio usa una combinaci\u00f3n de <code>var</code>, <code>let</code> y <code>const</code> para reforzar sus diferencias (por ejemplo, <code>const</code> para valores fijos, <code>let</code> para valores convertidos, <code>var</code> para entradas).</li> <li>Se cubren todos los tipos de datos: <code>string</code> (entradas de <code>prompt</code>), <code>number</code> (valores convertidos y c\u00e1lculos), <code>boolean</code> (resultados de comparaciones), <code>null</code> (variables inicializadas como nulas) y <code>undefined</code> (variables sin valor).</li> <li>Los operadores incluyen aritm\u00e9ticos (<code>+</code>, <code>-</code>, <code>*</code>, <code>%</code>), de comparaci\u00f3n (<code>&gt;</code>, <code>&lt;</code>, <code>===</code>, <code>&lt;</code>), y l\u00f3gicos (<code>&amp;&amp;</code>, <code>||</code>, <code>!</code>).</li> </ol>"},{"location":"content/p1s/#ejemplo-de-salida-ejercicio-10","title":"Ejemplo de salida (Ejercicio 10)","text":"<p>Si el usuario ingresa: - Nombre: \"Ana\" - Edad: \"24\" - Peso: \"60\"</p> <p>La consola mostrar\u00e1: <pre><code>Nombre: Ana\nEdad en meses: 288\nPeso en gramos: 60000\n\u00bfNombre vac\u00edo?: false\n\u00bfEdad par?: true\nNombre vac\u00edo OR edad par: true\n</code></pre></p>"},{"location":"content/p2/","title":"Estructuras Condicionales, Bucles e Iteraciones en JavaScript","text":"<p>Este documento cubre todas las estructuras condicionales, bucles y m\u00e9todos de iteraci\u00f3n disponibles en JavaScript, con ejemplos pr\u00e1cticos basados en temas cotidianos. Cada secci\u00f3n incluye la sintaxis, casos de uso, ejemplos y notas importantes.</p>"},{"location":"content/p2/#1-estructuras-condicionales","title":"1. Estructuras Condicionales","text":"<p>Las estructuras condicionales permiten ejecutar diferentes bloques de c\u00f3digo dependiendo de si se cumplen ciertas condiciones. En JavaScript, las principales son <code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code> y el operador ternario.</p>"},{"location":"content/p2/#11-if-else-if-else","title":"1.1. <code>if</code>, <code>else if</code>, <code>else</code>","text":"<p>La estructura <code>if</code> eval\u00faa una condici\u00f3n. Si es <code>true</code>, ejecuta un bloque de c\u00f3digo. Si es <code>false</code>, puede evaluarse una condici\u00f3n alternativa con <code>else if</code> o ejecutarse un bloque por defecto con <code>else</code>.</p> <p>Sintaxis: <pre><code>if (condici\u00f3n) {\n    // C\u00f3digo si la condici\u00f3n es verdadera\n} else if (otraCondici\u00f3n) {\n    // C\u00f3digo si la otra condici\u00f3n es verdadera\n} else {\n    // C\u00f3digo si ninguna condici\u00f3n es verdadera\n}\n</code></pre></p> <p>Ejemplo 1: Determinar si un n\u00famero es positivo, negativo o cero <pre><code>let numero = 10;\n\nif (numero &gt; 0) {\n    console.log(\"El n\u00famero es positivo\");\n} else if (numero &lt; 0) {\n    console.log(\"El n\u00famero es negativo\");\n} else {\n    console.log(\"El n\u00famero es cero\");\n}\n// Salida: El n\u00famero es positivo\n</code></pre></p> <p>Ejemplo 2: Verificar si un usuario puede votar <pre><code>let edad = 17;\nlet esCiudadano = true;\n\nif (edad &gt;= 18 &amp;&amp; esCiudadano) {\n    console.log(\"Puedes votar\");\n} else if (edad &gt;= 18 &amp;&amp; !esCiudadano) {\n    console.log(\"No puedes votar porque no eres ciudadano\");\n} else {\n    console.log(\"No puedes votar porque eres menor de edad\");\n}\n// Salida: No puedes votar porque eres menor de edad\n</code></pre></p> <p>Notas:</p> <ul> <li>Las condiciones deben devolver un valor booleano (<code>true</code> o <code>false</code>).</li> <li>Puedes usar operadores l\u00f3gicos (<code>&amp;&amp;</code>, <code>||</code>, <code>!</code>) para combinar condiciones.</li> <li>No es obligatorio usar <code>else if</code> o <code>else</code>.</li> </ul>"},{"location":"content/p2/#12-switch","title":"1.2. <code>switch</code>","text":"<p>La estructura <code>switch</code> eval\u00faa una expresi\u00f3n y ejecuta el bloque correspondiente al valor coincidente. Es \u00fatil para m\u00faltiples casos espec\u00edficos.</p> <p>Sintaxis: <pre><code>switch (expresi\u00f3n) {\n    case valor1:\n        // C\u00f3digo si expresi\u00f3n === valor1\n        break;\n    case valor2:\n        // C\u00f3digo si expresi\u00f3n === valor2\n        break;\n    default:\n        // C\u00f3digo si no coincide con ning\u00fan caso\n}\n</code></pre></p> <p>Ejemplo 1: Determinar el d\u00eda de la semana <pre><code>let dia = 3;\n\nswitch (dia) {\n    case 1:\n        console.log(\"Lunes\");\n        break;\n    case 2:\n        console.log(\"Martes\");\n        break;\n    case 3:\n        console.log(\"Mi\u00e9rcoles\");\n        break;\n    default:\n        console.log(\"D\u00eda no v\u00e1lido\");\n}\n// Salida: Mi\u00e9rcoles\n</code></pre></p> <p>Ejemplo 2: Clasificar una calificaci\u00f3n <pre><code>let calificacion = \"B\";\n\nswitch (calificacion) {\n    case \"A\":\n        console.log(\"Excelente\");\n        break;\n    case \"B\":\n        console.log(\"Bueno\");\n        break;\n    case \"C\":\n        console.log(\"Regular\");\n        break;\n    default:\n        console.log(\"Calificaci\u00f3n no v\u00e1lida\");\n}\n// Salida: Bueno\n</code></pre></p> <p>Notas:</p> <ul> <li>Usa <code>break</code> para evitar fall-through.</li> <li>El bloque <code>default</code> es opcional.</li> <li>Usa comparaci\u00f3n estricta (<code>===</code>).</li> </ul>"},{"location":"content/p2/#13-operador-ternario","title":"1.3. Operador Ternario (<code>?:</code>)","text":"<p>El operador ternario es una forma compacta de escribir un <code>if-else</code> simple. Eval\u00faa una condici\u00f3n y retorna un valor si es <code>true</code> o otro si es <code>false</code>.</p> <p>Sintaxis: <pre><code>condici\u00f3n ? valorSiVerdadero : valorSiFalso;\n</code></pre></p> <p>Ejemplo 1: Determinar si es mayor de edad <pre><code>let edad = 20;\nlet mensaje = edad &gt;= 18 ? \"Es mayor de edad\" : \"Es menor de edad\";\nconsole.log(mensaje);\n// Salida: Es mayor de edad\n</code></pre></p> <p>Ejemplo 2: Asignar descuento <pre><code>let totalCompra = 150;\nlet descuento = totalCompra &gt; 100 ? 10 : 0;\nconsole.log(\"Descuento aplicado:\", descuento, \"%\");\n// Salida: Descuento aplicado: 10 %\n</code></pre></p> <p>Notas:</p> <ul> <li>\u00datil para asignaciones simples.</li> <li>Evita anidar m\u00faltiples ternarios para mantener la legibilidad.</li> <li>Solo retorna valores, no ejecuta bloques de c\u00f3digo complejos.</li> </ul>"},{"location":"content/p2/#2-bucles","title":"2. Bucles","text":"<p>Los bucles permiten repetir un bloque de c\u00f3digo mientras se cumpla una condici\u00f3n o para iterar sobre colecciones. Los bucles en JavaScript son <code>for</code>, <code>while</code>, <code>do-while</code>, <code>for...in</code> y <code>for...of</code>.</p>"},{"location":"content/p2/#21-for","title":"2.1. <code>for</code>","text":"<p>El bucle <code>for</code> es ideal cuando sabes cu\u00e1ntas veces repetir un bloque. Incluye inicializaci\u00f3n, condici\u00f3n y actualizaci\u00f3n.</p> <p>Sintaxis: <pre><code>for (inicializaci\u00f3n; condici\u00f3n; actualizaci\u00f3n) {\n    // C\u00f3digo a repetir\n}\n</code></pre></p> <p>Ejemplo 1: Imprimir n\u00fameros del 1 al 5 <pre><code>for (let i = 1; i &lt;= 5; i++) {\n    console.log(i);\n}\n// Salida:\n// 1\n// 2\n// 3\n// 4\n// 5\n</code></pre></p> <p>Ejemplo 2: Sumar elementos de un array <pre><code>let numeros = [1, 2, 3, 4, 5];\nlet suma = 0;\n\nfor (let i = 0; i &lt; numeros.length; i++) {\n    suma += numeros[i];\n}\nconsole.log(\"La suma es:\", suma);\n// Salida: La suma es: 15\n</code></pre></p> <p>Notas:</p> <ul> <li>Usa <code>let</code> para limitar el \u00e1mbito de la variable de iteraci\u00f3n.</li> </ul>"},{"location":"content/p2/#22-while","title":"2.2. <code>while</code>","text":"<p>El bucle <code>while</code> ejecuta un bloque mientras una condici\u00f3n sea <code>true</code>. Es \u00fatil cuando el n\u00famero de iteraciones es desconocido.</p> <p>Sintaxis: <pre><code>while (condici\u00f3n) {\n    // C\u00f3digo a repetir\n}\n</code></pre></p> <p>Ejemplo 1: Imprimir n\u00fameros hasta 5 <pre><code>let i = 1;\n\nwhile (i &lt;= 5) {\n    console.log(i);\n    i++;\n}\n// Salida:\n// 1\n// 2\n// 3\n// 4\n// 5\n</code></pre></p> <p>Ejemplo 2: Encontrar n\u00famero divisible por 7 <pre><code>let numero = 1;\n\nwhile (numero % 7 !== 0) {\n    numero++;\n}\nconsole.log(\"Primer n\u00famero divisible por 7:\", numero);\n// Salida: Primer n\u00famero divisible por 7: 7\n</code></pre></p> <p>Notas:</p> <ul> <li>Aseg\u00farate de actualizar variables para evitar bucles infinitos.</li> <li>\u00datil para condiciones din\u00e1micas.</li> </ul>"},{"location":"content/p2/#23-do-while","title":"2.3. <code>do-while</code>","text":"<p>El bucle <code>do-while</code> ejecuta el bloque al menos una vez antes de evaluar la condici\u00f3n.</p> <p>Sintaxis: <pre><code>do {\n    // C\u00f3digo a repetir\n} while (condici\u00f3n);\n</code></pre></p> <p>Ejemplo 1: Imprimir n\u00fameros del 1 al 5 <pre><code>let i = 1;\n\ndo {\n    console.log(i);\n    i++;\n} while (i &lt;= 5);\n// Salida:\n// 1\n// 2\n// 3\n// 4\n// 5\n</code></pre></p> <p>Ejemplo 2: Pedir n\u00famero positivo <pre><code>let numero;\n\ndo {\n    numero = prompt(\"Ingresa un n\u00famero positivo:\");\n    numero = Number(numero);\n} while (numero &lt;= 0);\n\nconsole.log(\"N\u00famero v\u00e1lido ingresado:\", numero);\n</code></pre></p> <p>Notas:</p> <ul> <li>Ideal para garantizar al menos una ejecuci\u00f3n.</li> <li>Cuidado con bucles infinitos.</li> </ul>"},{"location":"content/p2/#24-forin","title":"2.4. <code>for...in</code>","text":"<p>El bucle <code>for...in</code> itera sobre las propiedades enumerables de un objeto. Es \u00fatil para objetos, pero no se recomienda para arrays.</p> <p>Sintaxis: <pre><code>for (let clave in objeto) {\n    // C\u00f3digo usando clave y objeto[clave]\n}\n</code></pre></p> <p>Ejemplo 1: Mostrar propiedades de un objeto <pre><code>let persona = { nombre: \"Ana\", edad: 25, ciudad: \"Madrid\" };\n\nfor (let clave in persona) {\n    console.log(`${clave}: ${persona[clave]}`);\n}\n// Salida:\n// nombre: Ana\n// edad: 25\n// ciudad: Madrid\n</code></pre></p> <p>Ejemplo 2: Contar propiedades <pre><code>let coche = { marca: \"Toyota\", modelo: \"Corolla\", a\u00f1o: 2020 };\nlet contador = 0;\n\nfor (let clave in coche) {\n    contador++;\n}\nconsole.log(\"N\u00famero de propiedades:\", contador);\n// Salida: N\u00famero de propiedades: 3\n</code></pre></p> <p>Notas:</p> <ul> <li>No garantiza el orden de iteraci\u00f3n.</li> <li>Evita usarlo con arrays; usa <code>for...of</code> o <code>forEach</code> en su lugar.</li> </ul>"},{"location":"content/p2/#25-forof","title":"2.5. <code>for...of</code>","text":"<p>El bucle <code>for...of</code> itera sobre los valores de objetos iterables (arrays, strings, mapas, conjuntos, etc.).</p> <p>Sintaxis: <pre><code>for (let elemento of iterable) {\n    // C\u00f3digo usando elemento\n}\n</code></pre></p> <p>Ejemplo 1: Iterar sobre un array <pre><code>let frutas = [\"manzana\", \"banana\", \"naranja\"];\n\nfor (let fruta of frutas) {\n    console.log(fruta);\n}\n// Salida:\n// manzana\n// banana\n// naranja\n</code></pre></p> <p>Ejemplo 2: Iterar sobre un string <pre><code>let texto = \"Hola\";\n\nfor (let caracter of texto) {\n    console.log(caracter);\n}\n// Salida:\n// H\n// o\n// l\n// a\n</code></pre></p> <p>Notas:</p> <ul> <li>Ideal para arrays y otros iterables.</li> <li>No proporciona el \u00edndice directamente (usa <code>entries()</code> si lo necesitas).</li> </ul>"},{"location":"content/p2/#3-metodos-de-iteracion-de-arrays","title":"3. M\u00e9todos de Iteraci\u00f3n de Arrays","text":"<p>JavaScript ofrece m\u00e9todos funcionales para iterar sobre arrays, como <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>, <code>some</code>, <code>every</code>, <code>find</code>, y otros. Estos son m\u00e1s declarativos que los bucles tradicionales y promueven un estilo funcional.</p>"},{"location":"content/p2/#31-foreach","title":"3.1. <code>forEach</code>","text":"<p>El m\u00e9todo <code>forEach</code> ejecuta una funci\u00f3n para cada elemento del array. No retorna nada (<code>undefined</code>).</p> <p>Sintaxis: <pre><code>array.forEach((element, index, array) =&gt; {\n    // C\u00f3digo a ejecutar\n});\n</code></pre></p> <p>Ejemplo 1: Mostrar tareas pendientes JESUS <pre><code>let tareas = [\"Estudiar\", \"Comprar comida\", \"Llamar a mam\u00e1\"];\n\ntareas.forEach((tarea, indice) =&gt; {\n    console.log(`Tarea ${indice + 1}: ${tarea}`);\n});\n// Salida:\n// Tarea 1: Estudiar\n// Tarea 2: Comprar comida\n// Tarea 3: Llamar a mam\u00e1\n</code></pre></p> <p>Ejemplo 2: Sumar gastos <pre><code>let gastos = [10, 20, 15];\nlet total = 0;\n\ngastos.forEach(gasto =&gt; {\n    total += gasto;\n});\nconsole.log(\"Total de gastos:\", total);\n// Salida: Total de gastos: 45\n</code></pre></p> <p>Notas:</p> <ul> <li>No soporta <code>break</code> ni <code>continue</code>. Usa <code>return</code> para saltar una iteraci\u00f3n (similar a <code>continue</code>).</li> <li>\u00datil para acciones sin necesidad de transformar el array.</li> </ul>"},{"location":"content/p2/#32-map","title":"3.2. <code>map</code>","text":"<p>El m\u00e9todo <code>map</code> crea un nuevo array con los resultados de aplicar una funci\u00f3n a cada elemento.</p> <p>Sintaxis: <pre><code>let nuevoArray = array.map((element, index, array) =&gt; {\n    // Retornar nuevo valor\n});\n</code></pre></p> <p>Ejemplo 1: Convertir precios a otra moneda <pre><code>let preciosUSD = [10, 20, 30];\nlet preciosEUR = preciosUSD.map(precio =&gt; precio * 0.85);\n\nconsole.log(\"Precios en EUR:\", preciosEUR);\n// Salida: Precios en EUR: [8.5, 17, 25.5]\n</code></pre></p> <p>Ejemplo 2: Agregar prefijo a nombres <pre><code>let nombres = [\"Ana\", \"Luis\", \"Mar\u00eda\"];\nlet nombresConPrefijo = nombres.map(nombre =&gt; `Sr./Sra. ${nombre}`);\n\nconsole.log(nombresConPrefijo);\n// Salida: [\"Sr./Sra. Ana\", \"Sr./Sra. Luis\", \"Sr./Sra. Mar\u00eda\"]\n</code></pre></p> <p>Notas:</p> <ul> <li>No modifica el array original.</li> <li>Siempre retorna un nuevo array del mismo tama\u00f1o.</li> </ul>"},{"location":"content/p2/#33-filter","title":"3.3. <code>filter</code>","text":"<p>El m\u00e9todo <code>filter</code> crea un nuevo array con los elementos que cumplen una condici\u00f3n.</p> <p>Sintaxis: <pre><code>let nuevoArray = array.filter((element, index, array) =&gt; {\n    // Retornar true para incluir el elemento\n});\n</code></pre></p> <p>Ejemplo 1: Filtrar tareas completadas <pre><code>let tareas = [\n    { nombre: \"Estudiar\", completada: true },\n    { nombre: \"Comprar\", completada: false },\n    { nombre: \"Llamar\", completada: true }\n];\nlet tareasCompletadas = tareas.filter(tarea =&gt; tarea.completada);\n\nconsole.log(tareasCompletadas);\n// Salida: [{ nombre: \"Estudiar\", completada: true }, { nombre: \"Llamar\", completada: true }]\n</code></pre></p> <p>Ejemplo 2: Filtrar precios bajos <pre><code>let precios = [10, 25, 15, 30];\nlet preciosBajos = precios.filter(precio =&gt; precio &lt;= 20);\n\nconsole.log(\"Precios bajos:\", preciosBajos);\n// Salida: Precios bajos: [10, 15]\n</code></pre></p> <p>Notas:</p> <ul> <li>Retorna un array que puede ser m\u00e1s peque\u00f1o que el original.</li> <li>No modifica el array original.</li> </ul>"},{"location":"content/p2/#34-reduce","title":"3.4. <code>reduce</code>","text":"<p>El m\u00e9todo <code>reduce</code> reduce un array a un solo valor aplicando una funci\u00f3n acumuladora.</p> <p>Sintaxis: <pre><code>let resultado = array.reduce((acumulador, element, index, array) =&gt; {\n    // Retornar nuevo valor del acumulador\n}, valorInicial);\n</code></pre></p> <p>Ejemplo 1: Sumar gastos <pre><code>let gastos = [10, 20, 15];\nlet total = gastos.reduce((suma, gasto) =&gt; suma + gasto, 0);\n\nconsole.log(\"Total de gastos:\", total);\n// Salida: Total de gastos: 45\n</code></pre></p> <p>Ejemplo 2: Concatenar nombres <pre><code>let nombres = [\"Ana\", \"Luis\", \"Mar\u00eda\"];\nlet lista = nombres.reduce((texto, nombre) =&gt; texto + \", \" + nombre, \"Nombres\");\n\nconsole.log(lista);\n// Salida: Nombres, Ana, Luis, Mar\u00eda\n</code></pre></p> <p>Notas:</p> <ul> <li>El <code>valorInicial</code> es opcional, pero recomendado para evitar errores.</li> <li>Vers\u00e1til para acumulaciones complejas.</li> </ul>"},{"location":"content/p2/#35-some","title":"3.5. <code>some</code>","text":"<p>El m\u00e9todo <code>some</code> verifica si al menos un elemento cumple una condici\u00f3n, retornando <code>true</code> o <code>false</code>.</p> <p>Sintaxis: <pre><code>let resultado = array.some((element, index, array) =&gt; {\n    // Retornar true si la condici\u00f3n se cumple\n});\n</code></pre></p> <p>Ejemplo: Verificar si hay precios altos <pre><code>let precios = [10, 15, 25];\nlet hayAltos = precios.some(precio =&gt; precio &gt; 20);\n\nconsole.log(\"\u00bfHay precios mayores a 20?\", hayAltos);\n// Salida: \u00bfHay precios mayores a 20? true\n</code></pre></p> <p>Notas:</p> <ul> <li>Detiene la iteraci\u00f3n al encontrar un <code>true</code>.</li> <li>No modifica el array.</li> </ul>"},{"location":"content/p2/#36-every","title":"3.6. <code>every</code>","text":"<p>El m\u00e9todo <code>every</code> verifica si todos los elementos cumplen una condici\u00f3n, retornando <code>true</code> o <code>false</code>.</p> <p>Sintaxis: <pre><code>let resultado = array.every((element, index, array) =&gt; {\n    // Retornar true si la condici\u00f3n se cumple\n});\n</code></pre></p> <p>Ejemplo: Verificar si todas las tareas est\u00e1n completadas <pre><code>let tareas = [\n    { completada: true },\n    { completada: true },\n    { completada: false }\n];\nlet todasCompletadas = tareasevery(tarea =&gt; tarea.completada);\n\nconsole.log(\"\u00bfTodas las tareas est\u00e1n completadas?\", todasCompletadas);\n// Salida: \u00bfTodas las tareas est\u00e1n completadas? false\n</code></pre></p> <p>Notas:</p> <ul> <li>Detiene la iteraci\u00f3n al encontrar un <code>false</code>.</li> <li>No modifica el array.</li> </ul>"},{"location":"content/p2/#37-find","title":"3.7. <code>find</code>","text":"<p>El m\u00e9todo <code>find</code> retorna el primer elemento que cumple una condici\u00f3n.</p> <p>Sintaxis: <pre><code>let elemento = array.find((element, index, array) =&gt; {\n    // Retornar true si el elemento es el buscado\n});\n</code></pre></p> <p>Ejemplo: Encontrar una tarea espec\u00edfica <pre><code>let tareas = [\n    { nombre: \"Estudiar\", completada: false },\n    { nombre: \"Comprar\", completada: true }\n];\nlet tareaCompletada = tareas.find(tarea =&gt; tarea.completada);\n\nconsole.log(\"Primera tarea completada:\", tareaCompletada);\n// Salida: Primera tarea completada: { nombre: \"Comprar\", completada: true }\n</code></pre></p> <p>Notas:</p> <ul> <li>Retorna <code>undefined</code> si no encuentra nada.</li> <li>Detiene la iteraci\u00f3n al encontrar el primer elemento.</li> </ul>"},{"location":"content/p2/#4-instrucciones-de-control-de-flujo","title":"4. Instrucciones de Control de Flujo","text":"<p>Las instrucciones como <code>break</code>, <code>continue</code>, <code>return</code> y <code>throw</code> controlan el flujo de bucles y funciones.</p>"},{"location":"content/p2/#41-break","title":"4.1. <code>break</code>","text":"<p>Termina un bucle o <code>switch</code> inmediatamente.</p> <p>Ejemplo: Detener al encontrar un n\u00famero <pre><code>for (let i = 1; i &lt;= 10; i++) {\n    if (i === 6) {\n        break;\n    }\n    console.log(i);\n}\n// Salida:\n// 1\n// 2\n// 3\n// 4\n// 5\n</code></pre></p>"},{"location":"content/p2/#42-continue","title":"4.2. <code>continue</code>","text":"<p>Salta a la siguiente iteraci\u00f3n del bucle.</p> <p>Ejemplo: Imprimir solo impares <pre><code>for (let i = 1; i &lt;= 10; i++) {\n    if (i % 2 === 0) {\n        continue;\n    }\n    console.log(i);\n}\n// Salida:\n// 1\n// 3\n// 5\n// 7\n// 9\n</code></pre></p>"},{"location":"content/p2/#43-return","title":"4.3. <code>return</code>","text":"<p>Sale de una funci\u00f3n y retorna un valor. En un bucle dentro de una funci\u00f3n, tambi\u00e9n detiene el bucle.</p> <p>Ejemplo: Detener b\u00fasqueda <pre><code>function buscarProducto(productos, nombre) {\n    for (let producto of productos) {\n        if (producto.nombre === nombre) {\n            return producto;\n        }\n    }\n    return null;\n}\n\nlet productos = [\n    { nombre: \"Leche\", precio: 2 },\n    { nombre: \"Pan\", precio: 1 }\n];\nconsole.log(buscarProducto(productos, \"Pan\"));\n// Salida: { nombre: \"Pan\", precio: 1 }\n</code></pre></p>"},{"location":"content/p2/#44-throw","title":"4.4. <code>throw</code>","text":"<p>Lanza una excepci\u00f3n, deteniendo la ejecuci\u00f3n hasta que se capture con <code>try...catch</code>.</p> <p>Ejemplo: Validar entrada <pre><code>function validarEdad(edad) {\n    if (edad &lt; 0) {\n        throw new Error(\"La edad no puede ser negativa\");\n    }\n    console.log(\"Edad v\u00e1lida:\", edad);\n}\n\ntry {\n    validarEdad(-5);\n} catch (error) {\n    console.log(\"Error:\", error.message);\n}\n// Salida: Error: La edad no puede ser negativa\n</code></pre></p>"},{"location":"content/p2/#5-anidacion","title":"5. Anidaci\u00f3n","text":"<p>La anidaci\u00f3n combina condicionales, bucles y m\u00e9todos de iteraci\u00f3n para l\u00f3gica compleja.</p>"},{"location":"content/p2/#51-anidacion-de-condicionales","title":"5.1. Anidaci\u00f3n de Condicionales","text":"<p>Ejemplo: Verificar aprobaci\u00f3n de curso <pre><code>let nota = 85;\nlet asistencia = 90;\n\nif (nota &gt;= 70) {\n    if (asistencia &gt;= 80) {\n        console.log(\"Aprobado: Buena nota y asistencia\");\n    } else {\n        console.log(\"No aprobado: Asistencia insuficiente\");\n    }\n} else {\n    console.log(\"No aprobado: Nota insuficiente\");\n}\n// Salida: Aprobado: Buena nota y asistencia\n</code></pre></p>"},{"location":"content/p2/#52-anidacion-de-bucles","title":"5.2. Anidaci\u00f3n de Bucles","text":"<p>Ejemplo: Tabla de multiplicar <pre><code>for (let i = 1; i &lt;= 3; i++) {\n    console.log(`Tabla del ${i}:`);\n    for (let j = 1; j &lt;= 5; j++) {\n        console.log(`${i} x ${j} = ${i * j}`);\n    }\n}\n// Salida:\n// Tabla del 1:\n// 1 x 1 = 1\n// ...\n</code></pre></p>"},{"location":"content/p2/#53-combinacion-con-metodos-de-iteracion","title":"5.3. Combinaci\u00f3n con M\u00e9todos de Iteraci\u00f3n","text":"<p>Ejemplo: Clasificar gastos con <code>forEach</code> <pre><code>let gastos = [\n    { monto: 15, categoria: \"Comida\" },\n    { monto: 10, categoria: \"Transporte\" }\n];\nlet totalComida = 0;\n\ngastos.forEach(gasto =&gt; {\n    if (gasto.categoria === \"Comida\") {\n        totalComida += gasto.monto;\n    }\n});\nconsole.log(\"Total en Comida:\", totalComida);\n// Salida: Total en Comida: 15\n</code></pre></p> <p>Notas: - Limita la anidaci\u00f3n para mantener la legibilidad. - Considera funciones o m\u00e9todos como <code>map</code> o <code>filter</code> para simplificar.</p>"},{"location":"content/p2/#ejercicios-resueltos","title":"Ejercicios resueltos","text":""},{"location":"content/p2/#ejercicio-1-calcular-el-costo-de-un-viaje-en-taxi","title":"Ejercicio 1: Calcular el costo de un viaje en taxi","text":"<p>Descripci\u00f3n: Escribe un programa que calcule el costo de un viaje en taxi basado en la distancia recorrida (en kil\u00f3metros). Usa un bucle <code>while</code> para simular el avance del taxi, incrementando la distancia en 1 km por iteraci\u00f3n hasta alcanzar un l\u00edmite (por ejemplo, 5 km). Usa condicionales para aplicar una tarifa: $2 por km para los primeros 3 km, $1.5 por km despu\u00e9s. Si la distancia es 0, muestra un mensaje de error.</p> <p>Explicaci\u00f3n:</p> <ul> <li>Usamos una variable <code>distancia</code> inicial en 0 y un l\u00edmite de 5 km.</li> <li>Un bucle <code>while</code> simula el avance del taxi, incrementando <code>distancia</code> en 1 km por iteraci\u00f3n.</li> <li>Dentro del bucle, usamos un condicional <code>if-else</code> para calcular el costo: $2 por km si <code>distancia &lt;= 3</code>, $1.5 si es mayor.</li> <li>Antes del bucle, verificamos si la distancia inicial es 0, mostrando un mensaje de error si es el caso.</li> <li>Mostramos el costo total al final.</li> </ul> <pre><code>let distancia = 0;\nlet limite = 5;\nlet costo = 0;\n\nif (distancia === 0) {\n    console.log(\"Error: La distancia no puede ser cero\");\n} else {\n    while (distancia &lt; limite) {\n        distancia++;\n        if (distancia &lt;= 3) {\n            costo += 2;\n        } else {\n            costo += 1.5;\n        }\n        console.log(`Distancia recorrida: ${distancia} km, Costo acumulado: $${costo}`);\n    }\n    console.log(`Costo total del viaje: $${costo}`);\n}\n// Salida:\n// Distancia recorrida: 1 km, Costo acumulado: $2\n// Distancia recorrida: 2 km, Costo acumulado: $4\n// Distancia recorrida: 3 km, Costo acumulado: $6\n// Distancia recorrida: 4 km, Costo acumulado: $7.5\n// Distancia recorrida: 5 km, Costo acumulado: $9\n// Costo total del viaje: $9\n</code></pre> <p>Explicaci\u00f3n adicional:</p> <ul> <li>El bucle <code>while</code> itera 5 veces, simulando un viaje de 5 km.</li> <li>Los primeros 3 km tienen un costo de $2 cada uno (3 * $2 = $6).</li> <li>Los \u00faltimos 2 km tienen un costo de $1.5 cada uno (2 * $1.5 = $3).</li> <li>El costo total es $6 + $3 = $9.</li> <li>La verificaci\u00f3n inicial evita procesar un viaje sin distancia.</li> </ul>"},{"location":"content/p2/#ejercicio-2-planificar-descansos-durante-un-estudio","title":"Ejercicio 2: Planificar descansos durante un estudio","text":"<p>Descripci\u00f3n: Crea un programa que planifique descansos durante una sesi\u00f3n de estudio de 120 minutos. Usa un bucle <code>for</code> para simular el tiempo en intervalos de 25 minutos (m\u00e9todo Pomodoro). En cada iteraci\u00f3n, usa un condicional para alternar entre trabajo (25 minutos) y descanso (5 minutos para los primeros 3 ciclos, 15 minutos para el cuarto). Muestra el tipo de actividad y el tiempo restante.</p> <p>Explicaci\u00f3n:</p> <ul> <li>Usamos un bucle <code>for</code> para iterar desde 0 hasta 120 minutos, en intervalos de 25 minutos (tiempo de trabajo).</li> <li>Una variable <code>tiempoRestante</code> rastrea los minutos disponibles.</li> <li>Usamos un contador <code>ciclo</code> para determinar si es un ciclo de trabajo o descanso.</li> <li>Un condicional <code>if-else</code> alterna entre trabajo y descanso, aplicando 5 minutos de descanso para los primeros 3 ciclos y 15 minutos para el cuarto.</li> <li>Mostramos la actividad y el tiempo restante en cada iteraci\u00f3n.</li> </ul> <pre><code>let tiempoTotal = 120;\nlet tiempoRestante = tiempoTotal;\nlet ciclo = 0;\n\nfor (let tiempo = 0; tiempo &lt; tiempoTotal; tiempo += 25) {\n    ciclo++;\n    if (ciclo % 2 === 1) {\n        // Trabajo\n        tiempoRestante -= 25;\n        console.log(`Ciclo ${Math.ceil(ciclo/2)}: Trabajar 25 minutos, Tiempo restante: ${tiempoRestante} minutos`);\n    } else {\n        // Descanso\n        let descanso = ciclo &lt;= 6 ? 5 : 15;\n        tiempoRestante -= descanso;\n        console.log(`Ciclo ${ciclo/2}: Descansar ${descanso} minutos, Tiempo restante: ${tiempoRestante} minutos`);\n    }\n}\n// Salida:\n// Ciclo 1: Trabajar 25 minutos, Tiempo restante: 95 minutos\n// Ciclo 1: Descansar 5 minutos, Tiempo restante: 90 minutos\n// Ciclo 2: Trabajar 25 minutos, Tiempo restante: 65 minutos\n// Ciclo 2: Descansar 5 minutos, Tiempo restante: 60 minutos\n// Ciclo 3: Trabajar 25 minutos, Tiempo restante: 35 minutos\n// Ciclo 3: Descansar 5 minutos, Tiempo restante: 30 minutos\n// Ciclo 4: Trabajar 25 minutos, Tiempo restante: 5 minutos\n// Ciclo 4: Descansar 15 minutos, Tiempo restante: -10 minutos\n</code></pre> <p>Explicaci\u00f3n adicional:</p> <ul> <li>El bucle <code>for</code> itera en pasos de 25 minutos, simulando ciclos de trabajo.</li> <li><code>ciclo % 2 === 1</code> indica un ciclo de trabajo (impar), y <code>ciclo % 2 === 0</code> indica descanso (par).</li> <li>Los primeros 3 descansos (ciclos 2, 4, 6) son de 5 minutos; el cuarto (ciclo 8) es de 15 minutos.</li> <li>El tiempo restante se actualiza restando 25 o 5/15 minutos seg\u00fan corresponda.</li> <li>El tiempo restante puede volverse negativo, indicando que el \u00faltimo descanso excede el tiempo total, lo cual es aceptable en este contexto.</li> </ul>"},{"location":"content/p2/#ejercicio-3-simular-un-ahorro-diario","title":"Ejercicio 3: Simular un ahorro diario","text":"<p>Descripci\u00f3n: Escribe un programa que simule un ahorro diario durante 10 d\u00edas. Usa un bucle <code>do-while</code> para incrementar un ahorro inicial de $5 por d\u00eda, con una regla: si el d\u00eda es par, ahorras $3 adicionales; si es impar, ahorras $1 adicional. Usa un operador ternario para determinar el incremento adicional. Si el ahorro total supera $50 antes de los 10 d\u00edas, usa <code>break</code> para detener el proceso. Muestra el ahorro diario y el total final.</p> <p>Explicaci\u00f3n:</p> <ul> <li>Inicializamos <code>ahorro</code> en $5 y <code>dia</code> en 1.</li> <li>Un bucle <code>do-while</code> itera hasta que <code>dia &gt; 10</code>, incrementando <code>dia</code> en cada iteraci\u00f3n.</li> <li>Usamos un operador ternario para determinar el incremento adicional: $3 si el d\u00eda es par, $1 si es impar.</li> <li>Sumamos $5 (ahorro base) m\u00e1s el incremento adicional al ahorro total.</li> <li>Un condicional verifica si el ahorro supera $50, usando <code>break</code> para salir del bucle si es el caso.</li> <li>Mostramos el ahorro diario y el total final.</li> </ul> <pre><code>let ahorro = 5;\nlet dia = 1;\n\ndo {\n    let incrementoAdicional = dia % 2 === 0 ? 3 : 1;\n    ahorro += 5 + incrementoAdicional;\n    console.log(`D\u00eda ${dia}: Ahorro de $${5 + incrementoAdicional}, Total: $${ahorro}`);\n\n    if (ahorro &gt; 50) {\n        console.log(\"Ahorro super\u00f3 $50, deteniendo el proceso\");\n        break;\n    }\n    dia++;\n} while (dia &lt;= 10);\n\nconsole.log(`Ahorro total: $${ahorro}`);\n// Salida:\n// D\u00eda 1: Ahorro de $6, Total: $11\n// D\u00eda 2: Ahorro de $8, Total: $19\n// D\u00eda 3: Ahorro de $6, Total: $25\n// D\u00eda 4: Ahorro de $8, Total: $33\n// D\u00eda 5: Ahorro de $6, Total: $39\n// D\u00eda 6: Ahorro de $8, Total: $47\n// D\u00eda 7: Ahorro de $6, Total: $53\n// Ahorro super\u00f3 $50, deteniendo el proceso\n// Ahorro total: $53\n</code></pre> <p>Explicaci\u00f3n adicional:</p> <ul> <li>D\u00eda 1 (impar): $5 + $1 = $6, total $11.</li> <li>D\u00eda 2 (par): $5 + $3 = $8, total $19.</li> <li>D\u00eda 7: El ahorro alcanza $53, superando $50, por lo que <code>break</code> detiene el bucle.</li> <li>El operador ternario simplifica la l\u00f3gica para el incremento adicional.</li> <li>Mostramos el ahorro diario y el total final, incluyendo el mensaje de detenci\u00f3n.</li> </ul>"},{"location":"content/p2/#ejercicio-4-determinar-el-mejor-horario-para-una-cita","title":"Ejercicio 4: Determinar el mejor horario para una cita","text":"<p>Descripci\u00f3n: Crea un programa que determine el mejor horario para una cita seg\u00fan el d\u00eda de la semana (1 a 7). Usa <code>switch</code> para asignar un horario base: d\u00edas 1-5 (laborales) a las 18:00, d\u00eda 6 a las 10:00, d\u00eda 7 a las 14:00. Usa un bucle <code>while</code> para simular intentos de ajuste (m\u00e1ximo 3), sumando 1 hora si el usuario indica que el horario no es adecuado (simulado con una variable). Muestra el horario final.</p> <p>Explicaci\u00f3n:</p> <ul> <li>Definimos una variable <code>dia</code> (por ejemplo, 6) y una variable <code>intento</code> para contar ajustes.</li> <li>Usamos <code>switch</code> para asignar un horario base seg\u00fan el d\u00eda.</li> <li>Un bucle <code>while</code> simula hasta 3 intentos de ajuste, sumando 1 hora si el horario no es adecuado (simulado con una variable <code>ajustar</code>).</li> <li>Mostramos el horario base y los ajustes, finalizando con el horario definitivo.</li> <li>Si no se necesitan ajustes, el bucle termina antes.</li> </ul> <pre><code>let dia = 6;\nlet intento = 0;\nlet maxIntentos = 3;\nlet horario;\n\nswitch (dia) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n        horario = 18;\n        break;\n    case 6:\n        horario = 10;\n        break;\n    case 7:\n        horario = 14;\n        break;\n    default:\n        horario = 0;\n}\n\nconsole.log(`Horario base para d\u00eda ${dia}: ${horario}:00`);\n\nwhile (intento &lt; maxIntentos) {\n    let ajustar = intento &lt; 2 ? true : false; // Simula que los primeros 2 intentos requieren ajuste\n    if (!ajustar) break;\n    intento++;\n    horario++;\n    console.log(`Intento ${intento}: Ajustando a ${horario}:00`);\n}\n\nconsole.log(`Horario final para la cita: ${horario}:00`);\n// Salida:\n// Horario base para d\u00eda 6: 10:00\n// Intento 1: Ajustando a 11:00\n// Intento 2: Ajustando a 12:00\n// Horario final para la cita: 12:00\n</code></pre> <p>Explicaci\u00f3n adicional:</p> <ul> <li>Para el d\u00eda 6 (s\u00e1bado), <code>switch</code> asigna un horario base de 10:00.</li> <li>El bucle <code>while</code> simula 2 ajustes (11:00 y 12:00), deteni\u00e9ndose en el tercer intento porque <code>ajustar</code> es <code>false</code>.</li> <li>Mostramos el horario base, cada ajuste y el horario final.</li> <li>El <code>break</code> asegura que el bucle termine si no se necesitan m\u00e1s ajustes.</li> </ul>"},{"location":"content/p2/#ejercicio-5-controlar-el-consumo-de-agua-diario","title":"Ejercicio 5: Controlar el consumo de agua diario","text":"<p>Descripci\u00f3n: Escribe un programa que controle el consumo de agua diario durante 7 d\u00edas. Usa un bucle <code>for</code> para simular los d\u00edas. En cada d\u00eda, genera un consumo aleatorio entre 1 y 5 litros (simulado con <code>Math.random()</code>). Usa un operador ternario para aplicar una penalizaci\u00f3n: si el consumo supera 3 litros, suma $2 al costo total; si no, suma $1. Si el costo total supera $10, usa <code>break</code> para detener el seguimiento. Muestra el consumo y costo diario, y el costo total final.</p> <p>Explicaci\u00f3n:</p> <ul> <li>Usamos un bucle <code>for</code> para iterar sobre 7 d\u00edas.</li> <li>Generamos un consumo aleatorio entre 1 y 5 litros usando <code>Math.random()</code>.</li> <li>Un operador ternario determina el costo diario: $2 si el consumo es mayor a 3 litros, $1 si no.</li> <li>Acumulamos el costo total y verificamos si supera $10, usando <code>break</code> para detener el bucle si es el caso.</li> <li>Mostramos el consumo, costo diario y costo total final.</li> </ul> <pre><code>let costoTotal = 0;\n\nfor (let dia = 1; dia &lt;= 7; dia++) {\n    let consumo = Math.floor(Math.random() * 5) + 1; // Consumo aleatorio entre 1 y 5\n    let costoDiario = consumo &gt; 3 ? 2 : 1;\n    costoTotal += costoDiario;\n\n    console.log(`D\u00eda ${dia}: Consumo ${consumo} litros, Costo: $${costoDiario}, Total acumulado: $${costoTotal}`);\n\n    if (costoTotal &gt; 10) {\n        console.log(\"Costo total super\u00f3 $10, deteniendo el seguimiento\");\n        break;\n    }\n}\n\nconsole.log(`Costo total final: $${costoTotal}`);\n// Ejemplo de salida (var\u00eda por aleatoriedad):\n// D\u00eda 1: Consumo 2 litros, Costo: $1, Total acumulado: $1\n// D\u00eda 2: Consumo 4 litros, Costo: $2, Total acumulado: $3\n// D\u00eda 3: Consumo 3 litros, Costo: $1, Total acumulado: $4\n// D\u00eda 4: Consumo 5 litros, Costo: $2, Total acumulado: $6\n// D\u00eda 5: Consumo 4 litros, Costo: $2, Total acumulado: $8\n// D\u00eda 6: Consumo 3 litros, Costo: $1, Total acumulado: $9\n// D\u00eda 7: Consumo 4 litros, Costo: $2, Total acumulado: $11\n// Costo total super\u00f3 $10, deteniendo el seguimiento\n// Costo total final: $11\n</code></pre> <p>Explicaci\u00f3n adicional:</p> <ul> <li>El consumo es aleatorio, pero el ejemplo asume valores para ilustrar.</li> <li>El operador ternario asigna $2 para consumos de 4 o 5 litros, $1 para 1, 2 o 3 litros.</li> <li>En el d\u00eda 7, el costo total alcanza $11, superando $10, por lo que <code>break</code> detiene el bucle.</li> <li>Mostramos el consumo, costo diario y total acumulado en cada iteraci\u00f3n, y el total final.</li> <li>La aleatoriedad puede cambiar los resultados, pero la l\u00f3gica permanece consistente.</li> </ul>"},{"location":"content/p2/#actividad-crear-variaciones-de-los-ejercicios-anteriores","title":"Actividad: Crear variaciones de los ejercicios anteriores","text":"<p>Esta actividad consiste en desarrollar una nueva variaci\u00f3n para cada uno de los 5 ejercicios previos, adapt\u00e1ndolos a nuevos contextos cotidianos. Cada variaci\u00f3n mantiene la estructura de ciclos y condicionales del original, pero cambia el escenario, las reglas o las condiciones. A continuaci\u00f3n, se presentan los enunciados y los pasos para resolver cada variaci\u00f3n. Los estudiantes deben escribir el c\u00f3digo en JavaScript sin usar arrays, siguiendo los pasos proporcionados.</p>"},{"location":"content/p2/#variacion-1-calcular-el-costo-de-una-entrega-a-domicilio","title":"Variaci\u00f3n 1: Calcular el costo de una entrega a domicilio","text":"<p>Basado en: Ejercicio 1 (Calcular el costo de un viaje en taxi) Enunciado: Escribe un programa que calcule el costo de una entrega a domicilio basada en el tiempo de entrega (en minutos). Usa un bucle <code>while</code> para simular el avance del repartidor, incrementando el tiempo en 5 minutos por iteraci\u00f3n hasta alcanzar un l\u00edmite de 30 minutos. Usa condicionales para aplicar una tarifa: $0.5 por minuto para los primeros 15 minutos, $0.3 por minuto despu\u00e9s. Si el tiempo inicial es 0, muestra un mensaje de error.</p> <p>Paso a paso para resolver:</p> <ol> <li>Declara variables para el tiempo actual (<code>tiempo</code>, inicializado en 0), el l\u00edmite (30 minutos) y el costo total (<code>costo</code>, inicializado en 0).</li> <li>Antes del bucle, usa un condicional <code>if</code> para verificar si <code>tiempo</code> es 0. Si es as\u00ed, muestra un mensaje como \"Error: El tiempo no puede ser cero\" y termina el programa.</li> <li>Usa un bucle <code>while</code> que se ejecute mientras <code>tiempo</code> sea menor que el l\u00edmite (30 minutos).</li> <li>Dentro del bucle, incrementa <code>tiempo</code> en 5 minutos.</li> <li>Usa un condicional <code>if-else</code> para calcular el costo de los 5 minutos actuales: multiplica 5 por $0.5 si <code>tiempo</code> es menor o igual a 15, o por $0.3 si es mayor.</li> <li>Suma el costo calculado al <code>costo</code> total.</li> <li>Muestra un mensaje en cada iteraci\u00f3n con el tiempo acumulado y el costo acumulado (por ejemplo, \"Tiempo: 5 minutos, Costo: $2.5\").</li> <li>Al salir del bucle, muestra el costo total de la entrega.</li> </ol>"},{"location":"content/p2/#variacion-2-planificar-pausas-en-una-jornada-laboral","title":"Variaci\u00f3n 2: Planificar pausas en una jornada laboral","text":"<p>Basado en: Ejercicio 2 (Planificar descansos durante un estudio) Enunciado: Crea un programa que planifique pausas durante una jornada laboral de 240 minutos. Usa un bucle <code>for</code> para simular el tiempo en intervalos de 50 minutos de trabajo. En cada iteraci\u00f3n, usa un condicional para alternar entre trabajo (50 minutos) y pausas (10 minutos para las primeras 3 pausas, 20 minutos para la cuarta). Muestra el tipo de actividad y el tiempo restante.</p> <p>Paso a paso para resolver:</p> <ol> <li>Declara variables para el tiempo total (240 minutos), el tiempo restante (inicialmente 240) y un contador de ciclos (<code>ciclo</code>, inicializado en 0).</li> <li>Usa un bucle <code>for</code> que itere desde 0 hasta 240 minutos, en intervalos de 50 minutos (tiempo de trabajo).</li> <li>Dentro del bucle, incrementa <code>ciclo</code> en 1 para rastrear si es un ciclo de trabajo o pausa.</li> <li>Usa un condicional <code>if-else</code> basado en <code>ciclo % 2</code>:</li> <li>Si <code>ciclo</code> es impar, es un ciclo de trabajo: resta 50 minutos a <code>tiempoRestante</code> y muestra un mensaje como \"Ciclo X: Trabajar 50 minutos, Tiempo restante: Y minutos\".</li> <li>Si <code>ciclo</code> es par, es una pausa: determina la duraci\u00f3n de la pausa (10 minutos si <code>ciclo/2 &lt;= 3</code>, 20 minutos si es la cuarta pausa), resta la duraci\u00f3n a <code>tiempoRestante</code>, y muestra un mensaje como \"Ciclo X: Pausa de Z minutos, Tiempo restante: Y minutos\".</li> <li>Aseg\u00farate de calcular el n\u00famero de ciclo de trabajo o pausa dividiendo <code>ciclo/2</code> y redondeando hacia arriba (<code>Math.ceil</code>).</li> <li>Contin\u00faa hasta que el bucle complete los 240 minutos o el tiempo restante sea insuficiente.</li> </ol>"},{"location":"content/p2/#variacion-3-simular-una-inversion-semanal","title":"Variaci\u00f3n 3: Simular una inversi\u00f3n semanal","text":"<p>Basado en: Ejercicio 3 (Simular un ahorro diario) Enunciado: Escribe un programa que simule una inversi\u00f3n durante 14 d\u00edas. Usa un bucle <code>do-while</code> para incrementar una inversi\u00f3n inicial de $100 por d\u00eda, con una regla: si el d\u00eda es m\u00faltiplo de 3, ganas $10 adicionales; si no, ganas $5 adicionales. Usa un operador ternario para determinar el incremento adicional. Si la inversi\u00f3n total supera $200 antes de los 14 d\u00edas, usa <code>break</code> para detener el proceso. Muestra la ganancia diaria y el total final.</p> <p>Paso a paso para resolver:</p> <ol> <li>Declara variables para la inversi\u00f3n (<code>inversion</code>, inicializada en $100) y el d\u00eda (<code>dia</code>, inicializado en 1).</li> <li>Usa un bucle <code>do-while</code> que se ejecute mientras <code>dia</code> sea menor o igual a 14.</li> <li>Dentro del bucle, usa un operador ternario para determinar el incremento adicional: $10 si <code>dia % 3 === 0</code>, $5 si no.</li> <li>Suma a <code>inversion</code> un monto base de $10 m\u00e1s el incremento adicional.</li> <li>Muestra un mensaje con el d\u00eda, la ganancia del d\u00eda (base + adicional) y el total acumulado (por ejemplo, \"D\u00eda X: Ganancia de $Y, Total: $Z\").</li> <li>Usa un condicional <code>if</code> para verificar si <code>inversion</code> supera $200. Si es as\u00ed, muestra un mensaje como \"Inversi\u00f3n super\u00f3 $200, deteniendo el proceso\" y usa <code>break</code> para salir del bucle.</li> <li>Incrementa <code>dia</code> en 1 al final de cada iteraci\u00f3n.</li> <li>Al salir del bucle, muestra el total final de la inversi\u00f3n.</li> </ol>"},{"location":"content/p2/#variacion-4-asignar-un-horario-para-una-clase","title":"Variaci\u00f3n 4: Asignar un horario para una clase","text":"<p>Basado en: Ejercicio 4 (Determinar el mejor horario para una cita) Enunciado: Crea un programa que asigne un horario para una clase seg\u00fan el d\u00eda de la semana (1 a 7). Usa <code>switch</code> para asignar un horario base: d\u00edas 1-5 (laborales) a las 9:00, d\u00eda 6 a las 11:00, d\u00eda 7 a las 16:00. Usa un bucle <code>while</code> para simular intentos de ajuste (m\u00e1ximo 4), restando 1 hora si el horario no es adecuado (simulado con una variable). Si el horario ajustado es menor a 7:00, muestra un mensaje de error. Muestra el horario final.</p> <p>Paso a paso para resolver:</p> <ol> <li>Declara variables para el d\u00eda (<code>dia</code>, por ejemplo, 6), el horario (<code>horario</code>), el contador de intentos (<code>intento</code>, inicializado en 0) y el m\u00e1ximo de intentos (4).</li> <li>Usa una estructura <code>switch</code> para asignar un horario base seg\u00fan <code>dia</code>:</li> <li>D\u00edas 1-5: <code>horario = 9</code>.</li> <li>D\u00eda 6: <code>horario = 11</code>.</li> <li>D\u00eda 7: <code>horario = 16</code>.</li> <li>Default: <code>horario = 0</code>.</li> <li>Muestra el horario base con un mensaje como \"Horario base para d\u00eda X: Y:00\".</li> <li>Usa un bucle <code>while</code> que se ejecute mientras <code>intento</code> sea menor que 4.</li> <li>Dentro del bucle, simula la necesidad de ajuste con una variable (por ejemplo, <code>ajustar = true</code> para los primeros 3 intentos, <code>false</code> despu\u00e9s). Si <code>ajustar</code> es <code>false</code>, usa <code>break</code> para salir.</li> <li>Incrementa <code>intento</code> y resta 1 hora a <code>horario</code>. Muestra un mensaje como \"Intento Z: Ajustando a Y:00\".</li> <li>Despu\u00e9s del bucle, verifica si <code>horario</code> es menor a 7. Si es as\u00ed, muestra un mensaje como \"Error: Horario demasiado temprano\".</li> <li>Si no hay error, muestra el horario final con un mensaje como \"Horario final para la clase: Y:00\".</li> </ol>"},{"location":"content/p2/#variacion-5-monitorear-el-consumo-de-electricidad-diario","title":"Variaci\u00f3n 5: Monitorear el consumo de electricidad diario","text":"<p>Basado en: Ejercicio 5 (Controlar el consumo de agua diario) Enunciado: Escribe un programa que monitoree el consumo de electricidad diario durante 5 d\u00edas. Usa un bucle <code>for</code> para simular los d\u00edas. En cada d\u00eda, genera un consumo aleatorio entre 1 y 10 kWh (simulado con <code>Math.random()</code>). Usa un operador ternario para aplicar un costo: si el consumo supera 5 kWh, suma $3 al costo total; si no, suma $1.5. Si el costo total supera $12, usa <code>break</code> para detener el monitoreo. Muestra el consumo y costo diario, y el costo total final.</p> <p>Paso a paso para resolver:</p> <ol> <li>Declara una variable para el costo total (<code>costoTotal</code>, inicializada en 0).</li> <li>Usa un bucle <code>for</code> que itere desde 1 hasta 5 (d\u00edas).</li> <li>Dentro del bucle, genera un consumo aleatorio entre 1 y 10 kWh usando <code>Math.floor(Math.random() * 10) + 1</code>.</li> <li>Usa un operador ternario para determinar el costo diario: $3 si <code>consumo &gt; 5</code>, $1.5 si no.</li> <li>Suma el costo diario a <code>costoTotal</code>.</li> <li>Muestra un mensaje con el d\u00eda, el consumo, el costo diario y el costo acumulado (por ejemplo, \"D\u00eda X: Consumo Y kWh, Costo: $Z, Total: $W\").</li> <li>Usa un condicional <code>if</code> para verificar si <code>costoTotal</code> supera $12. Si es as\u00ed, muestra un mensaje como \"Costo total super\u00f3 $12, deteniendo el monitoreo\" y usa <code>break</code> para salir del bucle.</li> <li>Al salir del bucle, muestra el costo total final con un mensaje como \"Costo total final: $W\".</li> </ol>"},{"location":"content/p3/","title":"Funciones en JavaScript","text":""},{"location":"content/p3/#1-declaracion-de-funciones","title":"1. Declaraci\u00f3n de funciones","text":"<p>Las funciones en JavaScript son bloques de c\u00f3digo dise\u00f1ados para realizar una tarea espec\u00edfica y que pueden ser reutilizados. Existen varias formas de declarar funciones, cada una con caracter\u00edsticas espec\u00edficas.</p>"},{"location":"content/p3/#11-declaracion-de-funcion-function-declaration","title":"1.1. Declaraci\u00f3n de funci\u00f3n (Function Declaration)","text":"<p>La declaraci\u00f3n de funci\u00f3n es la forma m\u00e1s tradicional de definir una funci\u00f3n en JavaScript. Se utiliza la palabra clave <code>function</code>, seguida del nombre de la funci\u00f3n, par\u00e1metros entre par\u00e9ntesis y un bloque de c\u00f3digo entre llaves <code>{}</code>.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Las declaraciones de funciones son hoisted (elevadas), lo que significa que pueden ser llamadas antes de su definici\u00f3n en el c\u00f3digo.</li> <li>Son ideales para funciones reutilizables que se usar\u00e1n en m\u00faltiples partes del programa.</li> </ul> <p>Sintaxis: <pre><code>function nombreDeLaFuncion(parametro1, parametro2) {\n    // C\u00f3digo a ejecutar\n    return valor; // Opcional\n}\n</code></pre></p> <p>Ejemplo: <pre><code>function saludar(nombre) {\n    return `\u00a1Hola, ${nombre}!`;\n}\n\nconsole.log(saludar(\"Ana\")); // Imprime: \u00a1Hola, Ana!\nconsole.log(saludar(\"Juan\")); // Imprime: \u00a1Hola, Juan!\n</code></pre></p> <p>Hoisting en acci\u00f3n: <pre><code>console.log(sumar(3, 5)); // Imprime: 8 (funciona aunque la funci\u00f3n est\u00e9 definida despu\u00e9s)\n\nfunction sumar(a, b) {\n    return a + b;\n}\n</code></pre></p>"},{"location":"content/p3/#12-expresion-de-funcion-function-expression","title":"1.2. Expresi\u00f3n de funci\u00f3n (Function Expression)","text":"<p>Una expresi\u00f3n de funci\u00f3n define una funci\u00f3n dentro de una expresi\u00f3n, generalmente asign\u00e1ndola a una variable. A diferencia de las declaraciones de funciones, las expresiones no son hoisted, por lo que no pueden ser llamadas antes de su definici\u00f3n.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Pueden ser an\u00f3nimas (sin nombre) o nombradas.</li> <li>\u00datiles cuando se desea asignar una funci\u00f3n a una variable o pasarla como argumento.</li> </ul> <p>Sintaxis: <pre><code>const nombreDeLaFuncion = function(parametro1, parametro2) {\n    // C\u00f3digo a ejecutar\n    return valor; // Opcional\n};\n</code></pre></p> <p>Ejemplo (an\u00f3nima): <pre><code>const multiplicar = function(a, b) {\n    return a * b;\n};\n\nconsole.log(multiplicar(4, 5)); // Imprime: 20\n// console.log(multiplicar(2, 3)); // Error si se llama antes de la definici\u00f3n\n</code></pre></p> <p>Ejemplo (nombrada): <pre><code>const factorial = function calcularFactorial(n) {\n    if (n === 0) return 1;\n    return n * calcularFactorial(n - 1); // La funci\u00f3n nombrada permite recursi\u00f3n\n};\n\nconsole.log(factorial(5)); // Imprime: 120 (5 * 4 * 3 * 2 * 1)\n</code></pre></p>"},{"location":"content/p3/#13-arrow-functions-funciones-flecha","title":"1.3. Arrow Functions (Funciones Flecha)","text":"<p>Introducidas en ES6 (2015), las arrow functions son una sintaxis m\u00e1s concisa para definir funciones. Son siempre an\u00f3nimas y tienen un comportamiento especial con el \u00e1mbito de <code>this</code>.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Sintaxis m\u00e1s corta.</li> <li>No tienen su propio <code>this</code>, heredan el <code>this</code> del contexto en el que fueron definidas.</li> <li>No son hoisted.</li> <li>Ideales para funciones cortas o callbacks.</li> </ul> <p>Sintaxis: <pre><code>const nombreDeLaFuncion = (parametro1, parametro2) =&gt; {\n    // C\u00f3digo a ejecutar\n    return valor; // Opcional\n};\n</code></pre></p> <p>Ejemplo b\u00e1sico: <pre><code>const restar = (a, b) =&gt; {\n    return a - b;\n};\n\nconsole.log(restar(10, 4)); // Imprime: 6\n</code></pre></p> <p>Sintaxis abreviada (retorno impl\u00edcito): Si la funci\u00f3n tiene una sola expresi\u00f3n, se puede omitir las llaves y la palabra <code>return</code>: <pre><code>const sumar = (a, b) =&gt; a + b;\nconsole.log(sumar(3, 7)); // Imprime: 10\n</code></pre></p> <p>Con un solo par\u00e1metro: Si hay un solo par\u00e1metro, se pueden omitir los par\u00e9ntesis: <pre><code>const cuadrado = x =&gt; x * x;\nconsole.log(cuadrado(5)); // Imprime: 25\n</code></pre></p> <p>Sin par\u00e1metros: <pre><code>const saludar = () =&gt; \"\u00a1Hola, mundo!\";\nconsole.log(saludar()); // Imprime: \u00a1Hola, mundo!\n</code></pre></p> <p>Diferencia con <code>this</code>: <pre><code>const objeto = {\n    nombre: \"Ana\",\n    saludar: function() {\n        console.log(this.nombre); // Imprime: Ana\n    },\n    saludarFlecha: () =&gt; {\n        console.log(this.nombre); // Imprime: undefined (hereda this del \u00e1mbito global)\n    }\n};\n\nobjeto.saludar();\nobjeto.saludarFlecha();\n</code></pre></p>"},{"location":"content/p3/#14-funciones-constructoras-function-constructor","title":"1.4. Funciones Constructoras (Function Constructor)","text":"<p>Aunque menos comunes, las funciones constructoras se usan para crear objetos mediante el operador <code>new</code>. No son recomendadas en el JavaScript moderno (se prefieren clases de ES6).</p> <p>Ejemplo: <pre><code>function Persona(nombre, edad) {\n    this.nombre = nombre;\n    this.edad = edad;\n}\n\nconst persona1 = new Persona(\"Ana\", 30);\nconsole.log(persona1.nombre); // Imprime: Ana\nconsole.log(persona1.edad); // Imprime: 30\n</code></pre></p>"},{"location":"content/p3/#15-funciones-autoinvocadas-iife-immediately-invoked-function-expression","title":"1.5. Funciones Autoinvocadas (IIFE - Immediately Invoked Function Expression)","text":"<p>Una IIFE es una funci\u00f3n que se define y ejecuta inmediatamente. Es \u00fatil para evitar la contaminaci\u00f3n del \u00e1mbito global.</p> <p>Sintaxis: <pre><code>(function() {\n    // C\u00f3digo a ejecutar\n})();\n</code></pre></p> <p>Ejemplo: <pre><code>(function() {\n    const mensaje = \"\u00a1Soy una IIFE!\";\n    console.log(mensaje); // Imprime: \u00a1Soy una IIFE!\n})();\n\nconsole.log(typeof mensaje); // Imprime: undefined (mensaje no est\u00e1 en el \u00e1mbito global)\n</code></pre></p> <p>Con par\u00e1metros: <pre><code>(function(nombre) {\n    console.log(`Hola, ${nombre}`); // Imprime: Hola, Juan\n})(\"Juan\");\n</code></pre></p>"},{"location":"content/p3/#16-metodos-en-objetos","title":"1.6. M\u00e9todos en Objetos","text":"<p>Las funciones tambi\u00e9n pueden ser propiedades de objetos, conocidas como m\u00e9todos.</p> <p>Ejemplo: <pre><code>const calculadora = {\n    sumar: function(a, b) {\n        return a + b;\n    },\n    restar: (a, b) =&gt; a - b // M\u00e9todo con arrow function\n};\n\nconsole.log(calculadora.sumar(5, 3)); // Imprime: 8\nconsole.log(calculadora.restar(5, 3)); // Imprime: 2\n</code></pre></p>"},{"location":"content/p3/#2-parametros","title":"2. Par\u00e1metros","text":"<p>JavaScript ofrece varias formas de manejar par\u00e1metros en funciones, incluyendo valores por defecto y rest parameters.</p>"},{"location":"content/p3/#21-valores-por-defecto","title":"2.1. Valores por Defecto","text":"<p>Desde ES6, se pueden asignar valores por defecto a los par\u00e1metros de una funci\u00f3n, que se usan si no se proporciona un valor.</p> <p>Ejemplo: <pre><code>function saludar(nombre = \"Invitado\") {\n    return `\u00a1Hola, ${nombre}!`;\n}\n\nconsole.log(saludar()); // Imprime: \u00a1Hola, Invitado!\nconsole.log(saludar(\"Ana\")); // Imprime: \u00a1Hola, Ana!\n</code></pre></p> <p>Con m\u00faltiples par\u00e1metros: <pre><code>function calcularArea(base = 1, altura = 1) {\n    return base * altura;\n}\n\nconsole.log(calcularArea()); // Imprime: 1\nconsole.log(calcularArea(5)); // Imprime: 5\nconsole.log(calcularArea(5, 3)); // Imprime: 15\n</code></pre></p>"},{"location":"content/p3/#22-rest-parameters","title":"2.2. Rest Parameters","text":"<p>Los rest parameters permiten que una funci\u00f3n acepte un n\u00famero variable de argumentos como un array, usando el operador <code>...</code>.</p> <p>Sintaxis: <pre><code>function nombreDeLaFuncion(...parametros) {\n    // C\u00f3digo\n}\n</code></pre></p> <p>Ejemplo: <pre><code>function sumarTodo(...numeros) {\n    return numeros.reduce((total, num) =&gt; total + num, 0);\n}\n\nconsole.log(sumarTodo(1, 2, 3)); // Imprime: 6\nconsole.log(sumarTodo(1, 2, 3, 4, 5)); // Imprime: 15\nconsole.log(sumarTodo()); // Imprime: 0\n</code></pre></p> <p>Combinando con par\u00e1metros normales: <pre><code>function describirPersona(nombre, ...hobbies) {\n    return `${nombre} tiene los siguientes hobbies: ${hobbies.join(\", \")}`;\n}\n\nconsole.log(describirPersona(\"Ana\", \"leer\", \"pintar\", \"caminar\")); \n// Imprime: Ana tiene los siguientes hobbies: leer, pintar, caminar\n</code></pre></p> <p>Nota: Los rest parameters deben ser el \u00faltimo par\u00e1metro en la lista.</p>"},{"location":"content/p3/#3-retorno-de-valores-y-ambito-scope","title":"3. Retorno de Valores y \u00c1mbito (Scope)","text":""},{"location":"content/p3/#31-retorno-de-valores","title":"3.1. Retorno de Valores","text":"<p>Las funciones pueden devolver un valor usando la palabra clave <code>return</code>. Si no se especifica, la funci\u00f3n devuelve <code>undefined</code> por defecto.</p> <p>Ejemplo: <pre><code>function dividir(a, b) {\n    if (b === 0) return \"Error: Divisi\u00f3n por cero\";\n    return a / b;\n}\n\nconsole.log(dividir(10, 2)); // Imprime: 5\nconsole.log(dividir(10, 0)); // Imprime: Error: Divisi\u00f3n por cero\n</code></pre></p> <p>Retorno impl\u00edcito en arrow functions: <pre><code>const dividir = (a, b) =&gt; (b === 0 ? \"Error: Divisi\u00f3n por cero\" : a / b);\nconsole.log(dividir(10, 2)); // Imprime: 5\n</code></pre></p>"},{"location":"content/p3/#32-ambito-scope","title":"3.2. \u00c1mbito (Scope)","text":"<p>El \u00e1mbito determina la visibilidad de las variables dentro de una funci\u00f3n. JavaScript tiene tres tipos principales de \u00e1mbito:</p> <ul> <li>\u00c1mbito global: Variables definidas fuera de cualquier funci\u00f3n, accesibles desde cualquier lugar.</li> <li>\u00c1mbito de funci\u00f3n: Variables definidas dentro de una funci\u00f3n, accesibles solo dentro de ella.</li> <li>\u00c1mbito de bloque (ES6): Variables declaradas con <code>let</code> o <code>const</code> dentro de un bloque <code>{}</code> solo son accesibles dentro de ese bloque.</li> </ul> <p>Ejemplo de \u00e1mbito de funci\u00f3n: <pre><code>function mostrarMensaje() {\n    const mensaje = \"\u00a1Estoy dentro de la funci\u00f3n!\";\n    console.log(mensaje); // Imprime: \u00a1Estoy dentro de la funci\u00f3n!\n}\n\nmostrarMensaje();\n// console.log(mensaje); // Error: mensaje is not defined\n</code></pre></p> <p>Ejemplo de \u00e1mbito de bloque: <pre><code>if (true) {\n    let variableBloque = \"Solo en el bloque\";\n    console.log(variableBloque); // Imprime: Solo en el bloque\n}\n// console.log(variableBloque); // Error: variableBloque is not defined\n</code></pre></p> <p>Cierres (Closures): Un cierre ocurre cuando una funci\u00f3n interna tiene acceso a las variables de una funci\u00f3n externa, incluso despu\u00e9s de que la funci\u00f3n externa haya terminado de ejecutarse.</p> <p>Ejemplo: <pre><code>function crearContador() {\n    let contador = 0;\n    return function() {\n        contador++;\n        return contador;\n    };\n}\n\nconst contador1 = crearContador();\nconsole.log(contador1()); // Imprime: 1\nconsole.log(contador1()); // Imprime: 2\nconsole.log(contador1()); // Imprime: 3\n\nconst contador2 = crearContador();\nconsole.log(contador2()); // Imprime: 1 (nuevo contador independiente)\n</code></pre></p>"},{"location":"content/p3/#4-llamadas-a-funciones-y-reutilizacion-de-codigo","title":"4. Llamadas a Funciones y Reutilizaci\u00f3n de C\u00f3digo","text":""},{"location":"content/p3/#41-llamadas-a-funciones","title":"4.1. Llamadas a Funciones","text":"<p>Las funciones se invocan usando su nombre seguido de par\u00e9ntesis con los argumentos necesarios.</p> <p>Ejemplo: <pre><code>function saludar(nombre) {\n    return `\u00a1Hola, ${nombre}!`;\n}\n\nconsole.log(saludar(\"Ana\")); // Imprime: \u00a1Hola, Ana!\n</code></pre></p> <p>Pasando funciones como argumentos: <pre><code>function ejecutarOperacion(a, b, operacion) {\n    return operacion(a, b);\n}\n\nconst suma = (a, b) =&gt; a + b;\nconsole.log(ejecutarOperacion(5, 3, suma)); // Imprime: 8\n</code></pre></p>"},{"location":"content/p3/#42-reutilizacion-de-codigo","title":"4.2. Reutilizaci\u00f3n de C\u00f3digo","text":"<p>Las funciones son fundamentales para la reutilizaci\u00f3n de c\u00f3digo. Por ejemplo, una funci\u00f3n puede ser usada en diferentes contextos para evitar repetir l\u00f3gica.</p> <p>Ejemplo pr\u00e1ctico: <pre><code>function calcularImpuesto(precio, tasa = 0.21) {\n    return precio * tasa;\n}\n\nconst producto1 = 100;\nconst producto2 = 200;\n\nconsole.log(calcularImpuesto(producto1)); // Imprime: 21\nconsole.log(calcularImpuesto(producto2, 0.1)); // Imprime: 20\n</code></pre></p> <p>Ejemplo con arrays: <pre><code>const procesarNumeros = (numeros, callback) =&gt; {\n    return numeros.map(callback);\n};\n\nconst duplicar = num =&gt; num * 2;\nconst triplicar = num =&gt; num * 3;\n\nconst lista = [1, 2, 3, 4];\nconsole.log(procesarNumeros(lista, duplicar)); // Imprime: [2, 4, 6, 8]\nconsole.log(procesarNumeros(lista, triplicar)); // Imprime: [3, 6, 9, 12]\n</code></pre></p>"},{"location":"content/p3/#actividad-20-ejercicios-sobre-funciones-en-javascript","title":"Actividad: 20 Ejercicios sobre Funciones en JavaScript","text":""},{"location":"content/p3/#instrucciones","title":"Instrucciones","text":"<ol> <li>Resuelve cada ejercicio escribiendo el c\u00f3digo en JavaScript.</li> <li>Prueba tus soluciones en un entorno como la consola del navegador o un editor como VS Code.</li> <li>Aseg\u00farate de entender c\u00f3mo funcionan las funciones, los par\u00e1metros, el \u00e1mbito y las diferentes formas de declarar funciones.</li> </ol>"},{"location":"content/p3/#ejercicios-basicos","title":"Ejercicios B\u00e1sicos","text":"<ol> <li> <p>Saludo simple    Escribe una declaraci\u00f3n de funci\u00f3n que reciba un nombre como par\u00e1metro y devuelva un saludo. Ejemplo: <code>saludar(\"Ana\")</code> \u2192 <code>\"\u00a1Hola, Ana!\"</code>.</p> </li> <li> <p>Suma de dos n\u00fameros    Crea una expresi\u00f3n de funci\u00f3n que sume dos n\u00fameros y devuelva el resultado. Ejemplo: <code>sumar(3, 5)</code> \u2192 <code>8</code>.</p> </li> <li> <p>Arrow function para duplicar    Escribe una arrow function que reciba un n\u00famero y devuelva su doble. Ejemplo: <code>duplicar(4)</code> \u2192 <code>8</code>.</p> </li> <li> <p>Par o impar    Crea una declaraci\u00f3n de funci\u00f3n que determine si un n\u00famero es par o impar. Ejemplo: <code>esPar(6)</code> \u2192 <code>true</code>, <code>esPar(7)</code> \u2192 <code>false</code>.</p> </li> <li> <p>Valor por defecto    Escribe una funci\u00f3n que reciba un nombre y un saludo opcional (por defecto: \"Hola\"). Ejemplo: <code>saludar(\"Juan\")</code> \u2192 <code>\"Hola, Juan\"</code>, <code>saludar(\"Ana\", \"Buenos d\u00edas\")</code> \u2192 <code>\"Buenos d\u00edas, Ana\"</code>.</p> </li> <li> <p>Funci\u00f3n sin par\u00e1metros    Crea una arrow function sin par\u00e1metros que devuelva un mensaje fijo. Ejemplo: <code>mensaje()</code> \u2192 <code>\"\u00a1JavaScript es genial!\"</code>.</p> </li> <li> <p>IIFE simple    Escribe una IIFE que imprima en consola \"\u00a1Soy una IIFE!\" sin contaminar el \u00e1mbito global.</p> </li> </ol>"},{"location":"content/p3/#ejercicios-intermedios","title":"Ejercicios Intermedios","text":"<ol> <li> <p>Suma de un array    Crea una expresi\u00f3n de funci\u00f3n que reciba un array de n\u00fameros y devuelva su suma usando un bucle o <code>reduce</code>. Ejemplo: <code>sumarArray([1, 2, 3])</code> \u2192 <code>6</code>.</p> </li> <li> <p>Rest parameters    Escribe una funci\u00f3n que use rest parameters para aceptar cualquier n\u00famero de argumentos y devuelva su producto. Ejemplo: <code>multiplicar(2, 3, 4)</code> \u2192 <code>24</code>.</p> </li> <li> <p>Cierre (closure)     Crea una funci\u00f3n que devuelva otra funci\u00f3n que incremente un contador privado cada vez que se llame. Ejemplo: <pre><code>const contador = crearContador();\ncontador(); // 1\ncontador(); // 2\n</code></pre></p> </li> <li> <p>M\u00e9todo en objeto     Crea un objeto <code>calculadora</code> con un m\u00e9todo <code>sumar</code> (usando una declaraci\u00f3n de funci\u00f3n) y otro m\u00e9todo <code>restar</code> (usando una arrow function). Ejemplo: <pre><code>calculadora.sumar(5, 3); // 8\ncalculadora.restar(5, 3); // 2\n</code></pre></p> </li> <li> <p>Factorial recursivo     Escribe una expresi\u00f3n de funci\u00f3n nombrada que calcule el factorial de un n\u00famero. Ejemplo: <code>factorial(5)</code> \u2192 <code>120</code>.</p> </li> <li> <p>Filtrar mayores     Crea una arrow function que reciba un array de n\u00fameros y devuelva un nuevo array con los n\u00fameros mayores a 10. Ejemplo: <code>filtrarMayores([5, 12, 8, 15])</code> \u2192 <code>[12, 15]</code>.</p> </li> <li> <p>Par\u00e1metros por defecto avanzado     Escribe una funci\u00f3n que calcule el \u00e1rea de un rect\u00e1ngulo con base y altura, usando valores por defecto de 1 para ambos. Ejemplo: <code>calcularArea(5)</code> \u2192 <code>5</code>, <code>calcularArea(5, 3)</code> \u2192 <code>15</code>.</p> </li> </ol>"},{"location":"content/p3/#ejercicios-avanzados","title":"Ejercicios Avanzados","text":"<ol> <li> <p>Callback     Crea una funci\u00f3n que reciba un array de n\u00fameros y una funci\u00f3n de callback para procesar cada elemento. Ejemplo: <pre><code>procesar([1, 2, 3], num =&gt; num * 2); // [2, 4, 6]\n</code></pre></p> </li> <li> <p>\u00c1mbito y cierre     Crea una funci\u00f3n que genere un generador de saludos personalizados. La funci\u00f3n externa recibe un saludo base, y la funci\u00f3n interna recibe un nombre. Ejemplo: <pre><code>const saludarConHola = crearSaludo(\"Hola\");\nsaludarConHola(\"Ana\"); // \"Hola, Ana\"\n</code></pre></p> </li> <li> <p>IIFE con par\u00e1metros     Escribe una IIFE que reciba dos n\u00fameros y devuelva su suma, ejecut\u00e1ndose inmediatamente. Ejemplo: <code>(function(a, b) {...})(3, 5)</code> \u2192 <code>8</code>.</p> </li> <li> <p>Funci\u00f3n como m\u00e9todo din\u00e1mico     Crea un objeto <code>persona</code> con un m\u00e9todo <code>presentarse</code> que use una arrow function para devolver una presentaci\u00f3n. Ejemplo: <pre><code>persona.nombre = \"Ana\";\npersona.presentarse(); // \"Mi nombre es Ana\"\n</code></pre></p> </li> <li> <p>Rest parameters y reduce     Escribe una funci\u00f3n que use rest parameters para calcular el promedio de todos los n\u00fameros recibidos. Ejemplo: <code>promedio(10, 20, 30)</code> \u2192 <code>20</code>.</p> </li> <li> <p>Combinaci\u00f3n de funciones     Crea una funci\u00f3n <code>componer</code> que combine dos funciones, donde el resultado de la primera se pasa como argumento a la segunda. Ejemplo: <pre><code>const duplicar = x =&gt; x * 2;\nconst sumarDiez = x =&gt; x + 10;\nconst combinada = componer(duplicar, sumarDiez);\ncombinada(5); // (5 * 2) + 10 = 20\n</code></pre></p> </li> </ol>"},{"location":"content/p3s/","title":"Soluci\u00f3n a los Ejercicios","text":""},{"location":"content/p3s/#ejercicios-basicos","title":"Ejercicios B\u00e1sicos","text":"<pre><code>function saludar(nombre) {\n    return `\u00a1Hola, ${nombre}!`;\n}\n\nconst sumar = function(a, b) {\n    return a + b;\n};\n\nconst duplicar = x =&gt; x * 2;\n\nfunction esPar(numero) {\n    return numero % 2 === 0;\n}\n\nfunction saludarConDefault(nombre, saludo = \"Hola\") {\n    return `${saludo}, ${nombre}`;\n}\n\nconst mensaje = () =&gt; \"\u00a1JavaScript es genial!\";\n\n(function() {\n    console.log(\"\u00a1Soy una IIFE!\");\n})();\n\n## Ejercicios Intermedios\n\nconst sumarArray = function(arr) {\n    return arr.reduce((total, num) =&gt; total + num, 0);\n};\n\nfunction multiplicar(...numeros) {\n    return numeros.reduce((total, num) =&gt; total * num, 1);\n}\n\nfunction crearContador() {\n    let contador = 0;\n    return function() {\n        contador++;\n        return contador;\n    };\n}\n\nconst calculadora = {\n    sumar: function(a, b) {\n        return a + b;\n    },\n    restar: (a, b) =&gt; a - b\n};\n\nconst factorial = function calcularFactorial(n) {\n    if (n === 0) return 1;\n    return n * calcularFactorial(n - 1);\n};\n\nconst filtrarMayores = arr =&gt; arr.filter(num =&gt; num &gt; 10);\n\nfunction calcularArea(base = 1, altura = 1) {\n    return base * altura;\n}\n\n## Ejercicios Avanzados\n\nfunction procesar(arr, callback) {\n    return arr.map(callback);\n}\n\nfunction crearSaludo(saludoBase) {\n    return function(nombre) {\n        return `${saludoBase}, ${nombre}`;\n    };\n}\n\n(function(a, b) {\n    return a + b;\n})(3, 5);\n\nconst persona = {\n    nombre: \"\",\n    presentarse: () =&gt; `Mi nombre es ${persona.nombre}`\n};\n\nfunction promedio(...numeros) {\n    if (numeros.length === 0) return 0;\n    return numeros.reduce((total, num) =&gt; total + num, 0) / numeros.length;\n}\n\nfunction componer(f, g) {\n    return function(x) {\n        return g(f(x));\n    };\n}\n</code></pre>"},{"location":"content/p4/","title":"Arreglos en JavaScript","text":""},{"location":"content/p4/#1-creacion-y-acceso-a-arreglos","title":"1. Creaci\u00f3n y acceso a arreglos","text":""},{"location":"content/p4/#creacion-de-arreglos","title":"Creaci\u00f3n de arreglos","text":"<p>En JavaScript, los arreglos son estructuras de datos que permiten almacenar m\u00faltiples valores en una sola variable. Los arreglos son objetos especiales que indexan sus elementos con n\u00fameros enteros no negativos (0, 1, 2, ...).</p> <p>Hay varias formas de crear un arreglo:</p> <ol> <li> <p>Usando la notaci\u00f3n literal (<code>[]</code>):    <pre><code>let frutas = ['manzana', 'banana', 'naranja'];\n</code></pre></p> </li> <li> <p>Usando el constructor <code>Array</code> (menos com\u00fan):    <pre><code>let numeros = new Array(1, 2, 3, 4, 5);\n</code></pre></p> </li> <li> <p>Creando un arreglo vac\u00edo:    <pre><code>let vacio = [];\n</code></pre></p> </li> <li> <p>Con un tama\u00f1o predefinido (opcional):    <pre><code>let arregloTama\u00f1o = new Array(5); // Crea un arreglo con 5 elementos undefined\n</code></pre></p> </li> </ol> <p>Notas importantes: - Los arreglos en JavaScript son din\u00e1micos, es decir, pueden cambiar de tama\u00f1o. - Pueden contener diferentes tipos de datos (n\u00fameros, cadenas, objetos, etc.).</p>"},{"location":"content/p4/#acceso-a-elementos-del-arreglo","title":"Acceso a elementos del arreglo","text":"<p>Los elementos de un arreglo se acceden mediante su \u00edndice, que comienza en <code>0</code>. Por ejemplo:</p> <pre><code>let frutas = ['manzana', 'banana', 'naranja'];\nconsole.log(frutas[0]); // manzana\nconsole.log(frutas[2]); // naranja\n</code></pre> <ul> <li>\u00cdndices negativos: No son v\u00e1lidos en JavaScript para acceder a elementos (a diferencia de otros lenguajes como Python). Si intentas usar un \u00edndice negativo, obtendr\u00e1s <code>undefined</code>.</li> <li> <p>Modificar elementos: Puedes cambiar un elemento asignando un nuevo valor al \u00edndice:   <pre><code>frutas[1] = 'pera';\nconsole.log(frutas); // ['manzana', 'pera', 'naranja']\n</code></pre></p> </li> <li> <p>Propiedad <code>length</code>: Devuelve la cantidad de elementos en el arreglo:   <pre><code>console.log(frutas.length); // 3\n</code></pre></p> </li> <li> <p>Acceso fuera de rango: Si accedes a un \u00edndice que no existe, obtendr\u00e1s <code>undefined</code>:   <pre><code>console.log(frutas[10]); // undefined\n</code></pre></p> </li> </ul>"},{"location":"content/p4/#2-metodos-de-arreglos","title":"2. M\u00e9todos de arreglos","text":"<p>JavaScript proporciona muchos m\u00e9todos para trabajar con arreglos. A continuaci\u00f3n, explicar\u00e9 los m\u00e9todos solicitados: <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>forEach</code> y <code>map</code>.</p>"},{"location":"content/p4/#push","title":"push","text":"<p>A\u00f1ade uno o m\u00e1s elementos al final del arreglo y devuelve la nueva longitud del arreglo.</p> <pre><code>let colores = ['rojo', 'azul'];\nlet nuevaLongitud = colores.push('verde', 'amarillo');\nconsole.log(colores); // ['rojo', 'azul', 'verde', 'amarillo']\nconsole.log(nuevaLongitud); // 4\n</code></pre>"},{"location":"content/p4/#pop","title":"pop","text":"<p>Elimina el \u00faltimo elemento del arreglo y lo devuelve. El arreglo se modifica.</p> <pre><code>let colores = ['rojo', 'azul', 'verde'];\nlet eliminado = colores.pop();\nconsole.log(eliminado); // 'verde'\nconsole.log(colores); // ['rojo', 'azul']\n</code></pre>"},{"location":"content/p4/#shift","title":"shift","text":"<p>Elimina el primer elemento del arreglo y lo devuelve. Los \u00edndices de los elementos restantes se reordenan.</p> <pre><code>let colores = ['rojo', 'azul', 'verde'];\nlet eliminado = colores.shift();\nconsole.log(eliminado); // 'rojo'\nconsole.log(colores); // ['azul', 'verde']\n</code></pre>"},{"location":"content/p4/#unshift","title":"unshift","text":"<p>A\u00f1ade uno o m\u00e1s elementos al inicio del arreglo y devuelve la nueva longitud del arreglo.</p> <pre><code>let colores = ['azul', 'verde'];\nlet nuevaLongitud = colores.unshift('rojo', 'blanco');\nconsole.log(colores); // ['rojo', 'blanco', 'azul', 'verde']\nconsole.log(nuevaLongitud); // 4\n</code></pre>"},{"location":"content/p4/#slice","title":"slice","text":"<p>Devuelve una copia superficial de una porci\u00f3n del arreglo, desde un \u00edndice inicial (incluido) hasta un \u00edndice final (excluido). No modifica el arreglo original.</p> <pre><code>let numeros = [1, 2, 3, 4, 5];\nlet subArreglo = numeros.slice(1, 4);\nconsole.log(subArreglo); // [2, 3, 4]\nconsole.log(numeros); // [1, 2, 3, 4, 5] (sin cambios)\n</code></pre> <ul> <li>Par\u00e1metros:</li> <li><code>slice(inicio)</code>: Copia desde <code>inicio</code> hasta el final.</li> <li><code>slice(inicio, fin)</code>: Copia desde <code>inicio</code> hasta <code>fin - 1</code>.</li> <li>Tambi\u00e9n acepta \u00edndices negativos (cuenta desde el final).</li> </ul> <pre><code>console.log(numeros.slice(-2)); // [4, 5]\n</code></pre>"},{"location":"content/p4/#foreach","title":"forEach","text":"<p>Ejecuta una funci\u00f3n proporcionada para cada elemento del arreglo. No retorna nada (<code>undefined</code>) y se usa para realizar acciones sobre los elementos.</p> <pre><code>let frutas = ['manzana', 'banana', 'naranja'];\nfrutas.forEach((elemento, indice) =&gt; {\n  console.log(`\u00cdndice ${indice}: ${elemento}`);\n});\n</code></pre> <p>Salida: <pre><code>\u00cdndice 0: manzana\n\u00cdndice 1: banana\n\u00cdndice 2: naranja\n</code></pre></p> <ul> <li>Par\u00e1metros de la funci\u00f3n callback:</li> <li><code>elemento</code>: El elemento actual.</li> <li><code>indice</code> (opcional): El \u00edndice del elemento.</li> <li><code>arreglo</code> (opcional): El arreglo que se est\u00e1 recorriendo.</li> </ul>"},{"location":"content/p4/#map","title":"map","text":"<p>Crea un nuevo arreglo con los resultados de aplicar una funci\u00f3n a cada elemento del arreglo original. No modifica el arreglo original.</p> <pre><code>let numeros = [1, 2, 3, 4];\nlet duplicados = numeros.map(num =&gt; num * 2);\nconsole.log(duplicados); // [2, 4, 6, 8]\nconsole.log(numeros); // [1, 2, 3, 4] (sin cambios)\n</code></pre> <ul> <li>Diferencia con <code>forEach</code>:</li> <li><code>forEach</code> no retorna nada, solo ejecuta una acci\u00f3n.</li> <li><code>map</code> retorna un nuevo arreglo con los resultados transformados.</li> </ul>"},{"location":"content/p4/#3-iteracion-sobre-arreglos","title":"3. Iteraci\u00f3n sobre arreglos","text":"<p>Hay varias formas de iterar sobre arreglos en JavaScript: bucles tradicionales y m\u00e9todos funcionales. A continuaci\u00f3n, detallo ambos enfoques.</p>"},{"location":"content/p4/#bucles-tradicionales","title":"Bucles tradicionales","text":"<ol> <li>Bucle <code>for</code> cl\u00e1sico:    Recorre el arreglo usando un \u00edndice. Es \u00fatil cuando necesitas control total sobre la iteraci\u00f3n.</li> </ol> <pre><code>let frutas = ['manzana', 'banana', 'naranja'];\nfor (let i = 0; i &lt; frutas.length; i++) {\n  console.log(frutas[i]);\n}\n</code></pre> <ol> <li>Bucle <code>for...of</code>:    Itera directamente sobre los elementos del arreglo, sin necesidad de manejar \u00edndices manualmente.</li> </ol> <pre><code>let frutas = ['manzana', 'banana', 'naranja'];\nfor (let fruta of frutas) {\n  console.log(fruta);\n}\n</code></pre> <ol> <li>Bucle <code>for...in</code> (no recomendado para arreglos):    Itera sobre las propiedades enumerables de un objeto. Aunque t\u00e9cnicamente funciona con arreglos (porque son objetos), puede incluir propiedades no deseadas y no garantiza el orden.</li> </ol> <pre><code>let frutas = ['manzana', 'banana', 'naranja'];\nfor (let indice in frutas) {\n  console.log(frutas[indice]);\n}\n</code></pre> <p>Advertencia: Usa <code>for...in</code> solo para objetos, no para arreglos.</p>"},{"location":"content/p4/#metodos-funcionales","title":"M\u00e9todos funcionales","text":"<p>Los m\u00e9todos funcionales como <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>, etc., son m\u00e1s declarativos y suelen ser preferidos en el desarrollo moderno de JavaScript por su claridad y concisi\u00f3n. Ya explicamos <code>forEach</code> y <code>map</code>, pero aqu\u00ed hay un ejemplo adicional con <code>filter</code> para complementar:</p> <pre><code>let numeros = [1, 2, 3, 4, 5];\nlet pares = numeros.filter(num =&gt; num % 2 === 0);\nconsole.log(pares); // [2, 4]\n</code></pre> <ul> <li>Ventajas de los m\u00e9todos funcionales:</li> <li>C\u00f3digo m\u00e1s legible y expresivo.</li> <li>Evitan efectos secundarios si se usan correctamente (por ejemplo, <code>map</code> no modifica el arreglo original).</li> <li> <p>Facilitan operaciones en cadena (chaining).</p> </li> <li> <p>Desventajas:</p> </li> <li>Pueden ser menos intuitivos para principiantes.</li> <li>En algunos casos, como operaciones muy complejas, un bucle <code>for</code> puede ser m\u00e1s claro.</li> </ul> <p>Ejemplo combinado: <pre><code>let frutas = ['manzana', 'banana', 'naranja'];\nfrutas\n  .map(fruta =&gt; fruta.toUpperCase())\n  .forEach(fruta =&gt; console.log(fruta));\n// Salida:\n// MANZANA\n// BANANA\n// NARANJA\n</code></pre></p>"},{"location":"content/p4/#4-arreglos-multidimensionales-basico","title":"4. Arreglos multidimensionales (b\u00e1sico)","text":"<p>Un arreglo multidimensional es un arreglo de arreglos. En JavaScript, se crean anidando arreglos dentro de otros arreglos. Por ejemplo, una matriz bidimensional (como una tabla) se representa as\u00ed:</p> <pre><code>let matriz = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n</code></pre>"},{"location":"content/p4/#acceso-a-elementos","title":"Acceso a elementos","text":"<p>Para acceder a un elemento en un arreglo multidimensional, usas m\u00faltiples \u00edndices:</p> <pre><code>console.log(matriz[0][1]); // 2 (primera fila, segunda columna)\nconsole.log(matriz[2][0]); // 7 (tercera fila, primera columna)\n</code></pre>"},{"location":"content/p4/#modificacion-de-elementos","title":"Modificaci\u00f3n de elementos","text":"<p>Puedes modificar elementos de la misma forma:</p> <pre><code>matriz[1][2] = 10;\nconsole.log(matriz); // [[1, 2, 3], [4, 5, 10], [7, 8, 9]]\n</code></pre>"},{"location":"content/p4/#iteracion-sobre-arreglos-multidimensionales","title":"Iteraci\u00f3n sobre arreglos multidimensionales","text":"<p>Puedes usar bucles anidados o m\u00e9todos funcionales para recorrer una matriz:</p> <ol> <li> <p>Con bucles <code>for</code>:    <pre><code>for (let i = 0; i &lt; matriz.length; i++) {\n  for (let j = 0; j &lt; matriz[i].length; j++) {\n    console.log(matriz[i][j]);\n  }\n}\n</code></pre></p> </li> <li> <p>Con <code>forEach</code>:    <pre><code>matriz.forEach(fila =&gt; {\n  fila.forEach(elemento =&gt; {\n    console.log(elemento);\n  });\n});\n</code></pre></p> </li> </ol>"},{"location":"content/p4/#usos-comunes","title":"Usos comunes","text":"<ul> <li>Representar matrices matem\u00e1ticas.</li> <li>Tableros de juegos (como ajedrez o tres en raya).</li> <li>Almacenar datos estructurados en filas y columnas.</li> </ul> <p>Ejemplo pr\u00e1ctico: Imagina un tablero de tres en raya:</p> <pre><code>let tablero = [\n  ['X', 'O', 'X'],\n  [' ', 'X', 'O'],\n  ['O', ' ', 'X']\n];\n\nconsole.log('Tablero de tres en raya:');\ntablero.forEach(fila =&gt; console.log(fila.join(' | ')));\n</code></pre> <p>Salida: <pre><code>Tablero de tres en raya:\nX | O | X\n | X | O\nO |   | X\n</code></pre></p>"},{"location":"content/p4/#ejemplo-gestion-de-equipos-de-trabajo-en-una-empresa-de-consultoria","title":"Ejemplo: Gesti\u00f3n de Equipos de Trabajo en una Empresa de Consultor\u00eda","text":""},{"location":"content/p4/#enunciado","title":"Enunciado","text":"<p>Una empresa de consultor\u00eda necesita un sistema simple en JavaScript para gestionar los equipos de trabajo asignados a diferentes proyectos. Cada equipo est\u00e1 compuesto por empleados con roles espec\u00edficos (por ejemplo, analista, desarrollador, dise\u00f1ador). El sistema debe permitir:</p> <ol> <li>Crear y acceder a una lista de equipos (arreglos).</li> <li>Usar m\u00e9todos como <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>forEach</code> y <code>map</code> para manipular los datos de los equipos.</li> <li>Iterar sobre los equipos para generar reportes y res\u00famenes.</li> <li>Usar un arreglo multidimensional para representar los proyectos y los empleados asignados a cada uno.</li> </ol> <p>El ejemplo simular\u00e1 la creaci\u00f3n de equipos, la asignaci\u00f3n de empleados a proyectos, la generaci\u00f3n de un reporte con los nombres de los empleados en may\u00fasculas y la extracci\u00f3n de sublistas de empleados seg\u00fan ciertos criterios, todo en un contexto empresarial realista.</p>"},{"location":"content/p4/#solucion","title":"Soluci\u00f3n","text":"<p>A continuaci\u00f3n, se presenta un script en JavaScript que implementa el sistema descrito, utilizando todos los conceptos solicitados: creaci\u00f3n y acceso a arreglos, los m\u00e9todos <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>forEach</code>, <code>map</code>, iteraci\u00f3n con bucles y m\u00e9todos funcionales, y arreglos multidimensionales.</p> <pre><code>// Creaci\u00f3n de arreglos: Lista de empleados disponibles\nlet empleadosDisponibles = [\n  { nombre: \"Ana L\u00f3pez\", rol: \"Analista\" },\n  { nombre: \"Carlos P\u00e9rez\", rol: \"Desarrollador\" },\n  { nombre: \"Mar\u00eda G\u00f3mez\", rol: \"Dise\u00f1adora\" }\n];\n\n// 1. Uso de push: A\u00f1adir un nuevo empleado al final\nempleadosDisponibles.push({ nombre: \"Juan Mart\u00ednez\", rol: \"Consultor\" });\nconsole.log(\"Empleados tras push:\", empleadosDisponibles);\n\n// 2. Uso de pop: Eliminar el \u00faltimo empleado\nlet empleadoEliminado = empleadosDisponibles.pop();\nconsole.log(\"Empleado eliminado (pop):\", empleadoEliminado);\nconsole.log(\"Empleados tras pop:\", empleadosDisponibles);\n\n// 3. Uso de unshift: A\u00f1adir un empleado al inicio\nempleadosDisponibles.unshift({ nombre: \"Laura S\u00e1nchez\", rol: \"Gerente\" });\nconsole.log(\"Empleados tras unshift:\", empleadosDisponibles);\n\n// 4. Uso de shift: Eliminar el primer empleado\nlet primerEmpleado = empleadosDisponibles.shift();\nconsole.log(\"Primer empleado eliminado (shift):\", primerEmpleado);\nconsole.log(\"Empleados tras shift:\", empleadosDisponibles);\n\n// 5. Uso de slice: Extraer una sublista de empleados (\u00edndices 0 a 2)\nlet equipoParcial = empleadosDisponibles.slice(0, 2);\nconsole.log(\"Equipo parcial (slice):\", equipoParcial);\n\n// 6. Arreglo multidimensional: Estructura de proyectos con empleados asignados\nlet proyectos = [\n  [\n    { nombre: \"Ana L\u00f3pez\", rol: \"Analista\" },\n    { nombre: \"Carlos P\u00e9rez\", rol: \"Desarrollador\" }\n  ],\n  [\n    { nombre: \"Mar\u00eda G\u00f3mez\", rol: \"Dise\u00f1adora\" },\n    { nombre: \"Pedro Ruiz\", rol: \"Consultor\" }\n  ]\n];\n\n// 7. Iteraci\u00f3n con forEach: Mostrar los empleados de cada proyecto\nconsole.log(\"Reporte de proyectos:\");\nproyectos.forEach((equipo, indice) =&gt; {\n  console.log(`Proyecto ${indice + 1}:`);\n  equipo.forEach(empleado =&gt; {\n    console.log(`- ${empleado.nombre} (${empleado.rol})`);\n  });\n});\n\n// 8. Iteraci\u00f3n con bucle for...of: Contar empleados por proyecto\nfor (let equipo of proyectos) {\n  console.log(`Equipo con ${equipo.length} empleados:`);\n  for (let empleado of equipo) {\n    console.log(`  ${empleado.nombre}`);\n  }\n}\n\n// 9. Uso de map: Crear un nuevo arreglo con nombres en may\u00fasculas\nlet nombresMayusculas = empleadosDisponibles.map(empleado =&gt; ({\n  nombre: empleado.nombre.toUpperCase(),\n  rol: empleado.rol\n}));\nconsole.log(\"Nombres en may\u00fasculas:\", nombresMayusculas);\n\n// 10. Ejemplo combinado: Generar un reporte completo\nfunction generarReporteCompleto(proyectos) {\n  console.log(\"Reporte Completo de Proyectos:\");\n  for (let i = 0; i &lt; proyectos.length; i++) {\n    console.log(`Proyecto ${i + 1} (${proyectos[i].length} empleados):`);\n    proyectos[i].forEach((empleado, j) =&gt; {\n      console.log(`  ${j + 1}. ${empleado.nombre} - ${empleado.rol}`);\n    });\n  }\n}\n\ngenerarReporteCompleto(proyectos);\n</code></pre>"},{"location":"content/p4/#explicacion-del-codigo","title":"Explicaci\u00f3n del C\u00f3digo","text":"<ol> <li> <p>Creaci\u00f3n y acceso a arreglos:</p> <ul> <li>Se crea un arreglo <code>empleadosDisponibles</code> con objetos que representan empleados (nombre y rol).</li> <li>Se accede a los elementos mediante \u00edndices impl\u00edcitamente al usar m\u00e9todos como <code>push</code> o <code>slice</code>.</li> </ul> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>push</code>: Se a\u00f1ade un nuevo empleado (<code>Juan Mart\u00ednez</code>) al final del arreglo.</li> <li><code>pop</code>: Se elimina el \u00faltimo empleado y se muestra qui\u00e9n fue eliminado.</li> <li><code>unshift</code>: Se a\u00f1ade un gerente (<code>Laura S\u00e1nchez</code>) al inicio del arreglo.</li> <li><code>shift</code>: Se elimina el primer empleado (<code>Laura S\u00e1nchez</code>) y se muestra.</li> <li><code>slice</code>: Se extrae una sublista con los primeros dos empleados.</li> <li><code>forEach</code>: Se usa para iterar sobre los proyectos y mostrar los empleados asignados.</li> <li><code>map</code>: Se crea un nuevo arreglo con los nombres de los empleados en may\u00fasculas, manteniendo el rol.</li> </ul> </li> <li> <p>Iteraci\u00f3n:</p> <ul> <li>Con <code>forEach</code>: Se recorren los proyectos y sus empleados para generar un reporte legible.</li> <li>Con <code>for...of</code>: Se itera sobre los proyectos y empleados para contar y listar nombres.</li> <li>Con bucle <code>for</code> cl\u00e1sico: Se usa en la funci\u00f3n <code>generarReporteCompleto</code> para un control m\u00e1s detallado del formato del reporte.</li> </ul> </li> <li> <p>Arreglos multidimensionales:</p> <ul> <li>El arreglo <code>proyectos</code> es un arreglo bidimensional donde cada subarreglo representa un equipo asignado a un proyecto.</li> <li>Se accede a los empleados con notaci\u00f3n de doble \u00edndice (por ejemplo, <code>proyectos[0][1]</code> dar\u00eda el segundo empleado del primer proyecto).</li> <li>Se itera sobre la matriz usando <code>forEach</code> anidado para mostrar los detalles.</li> </ul> </li> </ol>"},{"location":"content/p4/#salida-esperada","title":"Salida Esperada","text":"<p>Al ejecutar el script, la salida en la consola ser\u00eda algo como esto:</p> <pre><code>Empleados tras push: [\n  { nombre: 'Ana L\u00f3pez', rol: 'Analista' },\n  { nombre: 'Carlos P\u00e9rez', rol: 'Desarrollador' },\n  { nombre: 'Mar\u00eda G\u00f3mez', rol: 'Dise\u00f1adora' },\n  { nombre: 'Juan Mart\u00ednez', rol: 'Consultor' }\n]\nEmpleado eliminado (pop): { nombre: 'Juan Mart\u00ednez', rol: 'Consultor' }\nEmpleados tras pop: [\n  { nombre: 'Ana L\u00f3pez', rol: 'Analista' },\n  { nombre: 'Carlos P\u00e9rez', rol: 'Desarrollador' },\n  { nombre: 'Mar\u00eda G\u00f3mez', rol: 'Dise\u00f1adora' }\n]\nEmpleados tras unshift: [\n  { nombre: 'Laura S\u00e1nchez', rol: 'Gerente' },\n  { nombre: 'Ana L\u00f3pez', rol: 'Analista' },\n  { nombre: 'Carlos P\u00e9rez', rol: 'Desarrollador' },\n  { nombre: 'Mar\u00eda G\u00f3mez', rol: 'Dise\u00f1adora' }\n]\nPrimer empleado eliminado (shift): { nombre: 'Laura S\u00e1nchez', rol: 'Gerente' }\nEmpleados tras shift: [\n  { nombre: 'Ana L\u00f3pez', rol: 'Analista' },\n  { nombre: 'Carlos P\u00e9rez', rol: 'Desarrollador' },\n  { nombre: 'Mar\u00eda G\u00f3mez', rol: 'Dise\u00f1adora' }\n]\nEquipo parcial (slice): [\n  { nombre: 'Ana L\u00f3pez', rol: 'Analista' },\n  { nombre: 'Carlos P\u00e9rez', rol: 'Desarrollador' }\n]\nReporte de proyectos:\nProyecto 1:\n- Ana L\u00f3pez (Analista)\n- Carlos P\u00e9rez (Desarrollador)\nProyecto 2:\n- Mar\u00eda G\u00f3mez (Dise\u00f1adora)\n- Pedro Ruiz (Consultor)\nEquipo con 2 empleados:\n  Ana L\u00f3pez\n  Carlos P\u00e9rez\nEquipo con 2 empleados:\n  Mar\u00eda G\u00f3mez\n  Pedro Ruiz\nNombres en may\u00fasculas: [\n  { nombre: 'ANA L\u00d3PEZ', rol: 'Analista' },\n  { nombre: 'CARLOS P\u00c9REZ', rol: 'Desarrollador' },\n  { nombre: 'MAR\u00cdA G\u00d3MEZ', rol: 'Dise\u00f1adora' }\n]\nReporte Completo de Proyectos:\nProyecto 1 (2 empleados):\n  1. Ana L\u00f3pez - Analista\n  2. Carlos P\u00e9rez - Desarrollador\nProyecto 2 (2 empleados):\n  1. Mar\u00eda G\u00f3mez - Dise\u00f1adora\n  2. Pedro Ruiz - Consultor\n</code></pre>"},{"location":"content/p4/#actividad-gestion-de-campanas-de-marketing-digital","title":"Actividad: Gesti\u00f3n de Campa\u00f1as de Marketing Digital","text":""},{"location":"content/p4/#enunciado_1","title":"Enunciado","text":"<p>Una agencia de marketing digital necesita un sistema en JavaScript para gestionar las campa\u00f1as publicitarias que ejecuta para sus clientes. Cada campa\u00f1a est\u00e1 formada por un equipo de especialistas (por ejemplo, estratega, redactor, dise\u00f1ador gr\u00e1fico). Los estudiantes deben completar una plantilla de c\u00f3digo que implemente las siguientes funcionalidades, utilizando los conceptos de arreglos, m\u00e9todos (<code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>forEach</code>, <code>map</code>), iteraci\u00f3n (bucles y m\u00e9todos funcionales) y arreglos multidimensionales:</p> <ol> <li>Crear y manipular una lista de especialistas disponibles.</li> <li>Usar los m\u00e9todos <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>forEach</code> y <code>map</code> para gestionar los datos.</li> <li>Iterar sobre los datos para generar reportes sobre las campa\u00f1as.</li> <li>Usar un arreglo multidimensional para representar las campa\u00f1as y los especialistas asignados.</li> </ol> <p>Los estudiantes deben completar las secciones marcadas con <code>// TODO</code> en la plantilla de c\u00f3digo, siguiendo las instrucciones espec\u00edficas en los comentarios.</p>"},{"location":"content/p4/#plantilla-de-codigo","title":"Plantilla de C\u00f3digo","text":"<p>A continuaci\u00f3n, se proporciona una plantilla en JavaScript con secciones incompletas (<code>// TODO</code>) que los estudiantes deben resolver. La plantilla incluye ejemplos de uso de todos los conceptos solicitados, aplicados al contexto de una agencia de marketing digital.</p> <pre><code>// Creaci\u00f3n de arreglos: Lista de especialistas disponibles\nlet especialistas = [\n  { nombre: \"Sof\u00eda Ram\u00edrez\", rol: \"Estratega\" },\n  { nombre: \"Diego Vargas\", rol: \"Redactor\" },\n  { nombre: \"Clara Morales\", rol: \"Dise\u00f1adora Gr\u00e1fica\" }\n];\n\n// TODO 1: Usar push para a\u00f1adir un nuevo especialista al final del arreglo\n// A\u00f1ade un especialista con nombre \"Luc\u00eda Fern\u00e1ndez\" y rol \"Analista de Datos\"\n// Imprime el arreglo actualizado\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 2: Usar pop para eliminar el \u00faltimo especialista y almacenarlo en una variable\n// Imprime el especialista eliminado y el arreglo actualizado\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 3: Usar unshift para a\u00f1adir un especialista al inicio del arreglo\n// A\u00f1ade un especialista con nombre \"Mateo Gonz\u00e1lez\" y rol \"Community Manager\"\n// Imprime el arreglo actualizado\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 4: Usar shift para eliminar el primer especialista y almacenarlo en una variable\n// Imprime el especialista eliminado y el arreglo actualizado\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 5: Usar slice para extraer una sublista con los primeros dos especialistas\n// Almacena la sublista en una variable e impr\u00edmela\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// Arreglo multidimensional: Estructura de campa\u00f1as con especialistas asignados\nlet campanas = [\n  [\n    { nombre: \"Sof\u00eda Ram\u00edrez\", rol: \"Estratega\" },\n    { nombre: \"Diego Vargas\", rol: \"Redactor\" }\n  ],\n  [\n    { nombre: \"Clara Morales\", rol: \"Dise\u00f1adora Gr\u00e1fica\" },\n    { nombre: \"Luc\u00eda Fern\u00e1ndez\", rol: \"Analista de Datos\" }\n  ]\n];\n\n// TODO 6: Usar forEach para iterar sobre las campa\u00f1as y mostrar un reporte\n// Para cada campa\u00f1a, imprime su n\u00famero (por ejemplo, \"Campa\u00f1a 1\") y la lista de especialistas con su rol\n// Ejemplo de salida:\n// Campa\u00f1a 1:\n// - Sof\u00eda Ram\u00edrez (Estratega)\n// - Diego Vargas (Redactor)\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 7: Usar un bucle for...of para contar el total de especialistas por campa\u00f1a\n// Imprime el n\u00famero de especialistas en cada campa\u00f1a\n// Ejemplo de salida:\n// Campa\u00f1a 1 tiene 2 especialistas\n// Campa\u00f1a 2 tiene 2 especialistas\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 8: Usar map para crear un nuevo arreglo con los nombres de los especialistas en may\u00fasculas\n// Mant\u00e9n el rol sin cambios y almacena el resultado en una variable\n// Imprime el nuevo arreglo\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 9: Crear una funci\u00f3n que genere un reporte completo de las campa\u00f1as\n// La funci\u00f3n debe usar un bucle for cl\u00e1sico para iterar sobre las campa\u00f1as\n// Para cada campa\u00f1a, imprime su n\u00famero, el total de especialistas y la lista de nombres con sus roles\n// Ejemplo de salida:\n// Reporte Completo:\n// Campa\u00f1a 1 (2 especialistas):\n//   1. Sof\u00eda Ram\u00edrez - Estratega\n//   2. Diego Vargas - Redactor\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n</code></pre>"},{"location":"content/p4/#instrucciones","title":"Instrucciones","text":"<ol> <li>Descarga la plantilla: Copia el c\u00f3digo de <code>gestion_campanas.js</code> en tu editor de JavaScript (puedes usar Node.js, un navegador con la consola de desarrollador, o un entorno como VS Code).</li> <li>Completa los TODOs: Resuelve cada secci\u00f3n marcada con <code>// TODO</code>, siguiendo las instrucciones en los comentarios. Usa los m\u00e9todos y estructuras indicadas (por ejemplo, <code>push</code>, <code>forEach</code>, etc.).</li> <li>Prueba tu c\u00f3digo: Ejecuta el script y verifica que la salida en la consola coincida con los ejemplos proporcionados en los comentarios.</li> <li>Requisitos:</li> <li>Usa los m\u00e9todos <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>forEach</code> y <code>map</code> donde se indique.</li> <li>Aseg\u00farate de que las iteraciones con bucles (<code>for...of</code> y <code>for</code> cl\u00e1sico) sean correctas.</li> <li>Mant\u00e9n la estructura del arreglo multidimensional para las campa\u00f1as.</li> <li>No modifiques las partes del c\u00f3digo que no est\u00e1n marcadas con <code>// TODO</code>.</li> </ol>"},{"location":"content/p4s/","title":"P4s","text":""},{"location":"content/p4s/#actividad-gestion-de-campanas-de-marketing-digital","title":"Actividad: Gesti\u00f3n de Campa\u00f1as de Marketing Digital","text":""},{"location":"content/p4s/#enunciado","title":"Enunciado","text":"<p>Una agencia de marketing digital necesita un sistema en JavaScript para gestionar las campa\u00f1as publicitarias que ejecuta para sus clientes. Cada campa\u00f1a est\u00e1 formada por un equipo de especialistas (por ejemplo, estratega, redactor, dise\u00f1ador gr\u00e1fico). Los estudiantes deben completar una plantilla de c\u00f3digo que implemente las siguientes funcionalidades, utilizando los conceptos de arreglos, m\u00e9todos (<code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>forEach</code>, <code>map</code>), iteraci\u00f3n (bucles y m\u00e9todos funcionales) y arreglos multidimensionales:</p> <ol> <li>Crear y manipular una lista de especialistas disponibles.</li> <li>Usar los m\u00e9todos <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>forEach</code> y <code>map</code> para gestionar los datos.</li> <li>Iterar sobre los datos para generar reportes sobre las campa\u00f1as.</li> <li>Usar un arreglo multidimensional para representar las campa\u00f1as y los especialistas asignados.</li> </ol> <p>Los estudiantes deben completar las secciones marcadas con <code>// TODO</code> en la plantilla de c\u00f3digo, siguiendo las instrucciones espec\u00edficas en los comentarios.</p>"},{"location":"content/p4s/#plantilla-de-codigo","title":"Plantilla de C\u00f3digo","text":"<p>A continuaci\u00f3n, se proporciona una plantilla en JavaScript con secciones incompletas (<code>// TODO</code>) que los estudiantes deben resolver. La plantilla incluye ejemplos de uso de todos los conceptos solicitados, aplicados al contexto de una agencia de marketing digital.</p> <pre><code>// Creaci\u00f3n de arreglos: Lista de especialistas disponibles\nlet especialistas = [\n  { nombre: \"Sof\u00eda Ram\u00edrez\", rol: \"Estratega\" },\n  { nombre: \"Diego Vargas\", rol: \"Redactor\" },\n  { nombre: \"Clara Morales\", rol: \"Dise\u00f1adora Gr\u00e1fica\" }\n];\n\n// TODO 1: Usar push para a\u00f1adir un nuevo especialista al final del arreglo\n// A\u00f1ade un especialista con nombre \"Luc\u00eda Fern\u00e1ndez\" y rol \"Analista de Datos\"\n// Imprime el arreglo actualizado\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 2: Usar pop para eliminar el \u00faltimo especialista y almacenarlo en una variable\n// Imprime el especialista eliminado y el arreglo actualizado\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 3: Usar unshift para a\u00f1adir un especialista al inicio del arreglo\n// A\u00f1ade un especialista con nombre \"Mateo Gonz\u00e1lez\" y rol \"Community Manager\"\n// Imprime el arreglo actualizado\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 4: Usar shift para eliminar el primer especialista y almacenarlo en una variable\n// Imprime el especialista eliminado y el arreglo actualizado\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 5: Usar slice para extraer una sublista con los primeros dos especialistas\n// Almacena la sublista en una variable e impr\u00edmela\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// Arreglo multidimensional: Estructura de campa\u00f1as con especialistas asignados\nlet campanas = [\n  [\n    { nombre: \"Sof\u00eda Ram\u00edrez\", rol: \"Estratega\" },\n    { nombre: \"Diego Vargas\", rol: \"Redactor\" }\n  ],\n  [\n    { nombre: \"Clara Morales\", rol: \"Dise\u00f1adora Gr\u00e1fica\" },\n    { nombre: \"Luc\u00eda Fern\u00e1ndez\", rol: \"Analista de Datos\" }\n  ]\n];\n\n// TODO 6: Usar forEach para iterar sobre las campa\u00f1as y mostrar un reporte\n// Para cada campa\u00f1a, imprime su n\u00famero (por ejemplo, \"Campa\u00f1a 1\") y la lista de especialistas con su rol\n// Ejemplo de salida:\n// Campa\u00f1a 1:\n// - Sof\u00eda Ram\u00edrez (Estratega)\n// - Diego Vargas (Redactor)\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 7: Usar un bucle for...of para contar el total de especialistas por campa\u00f1a\n// Imprime el n\u00famero de especialistas en cada campa\u00f1a\n// Ejemplo de salida:\n// Campa\u00f1a 1 tiene 2 especialistas\n// Campa\u00f1a 2 tiene 2 especialistas\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 8: Usar map para crear un nuevo arreglo con los nombres de los especialistas en may\u00fasculas\n// Mant\u00e9n el rol sin cambios y almacena el resultado en una variable\n// Imprime el nuevo arreglo\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n\n// TODO 9: Crear una funci\u00f3n que genere un reporte completo de las campa\u00f1as\n// La funci\u00f3n debe usar un bucle for cl\u00e1sico para iterar sobre las campa\u00f1as\n// Para cada campa\u00f1a, imprime su n\u00famero, el total de especialistas y la lista de nombres con sus roles\n// Ejemplo de salida:\n// Reporte Completo:\n// Campa\u00f1a 1 (2 especialistas):\n//   1. Sof\u00eda Ram\u00edrez - Estratega\n//   2. Diego Vargas - Redactor\n// TODO: Escribe tu c\u00f3digo aqu\u00ed\n</code></pre>"},{"location":"content/p4s/#instrucciones-para-los-estudiantes","title":"Instrucciones para los Estudiantes","text":"<ol> <li>Descarga la plantilla: Copia el c\u00f3digo de <code>gestion_campanas.js</code> en tu editor de JavaScript (puedes usar Node.js, un navegador con la consola de desarrollador, o un entorno como VS Code).</li> <li>Completa los TODOs: Resuelve cada secci\u00f3n marcada con <code>// TODO</code>, siguiendo las instrucciones en los comentarios. Usa los m\u00e9todos y estructuras indicadas (por ejemplo, <code>push</code>, <code>forEach</code>, etc.).</li> <li>Prueba tu c\u00f3digo: Ejecuta el script y verifica que la salida en la consola coincida con los ejemplos proporcionados en los comentarios.</li> <li>Requisitos:</li> <li>Usa los m\u00e9todos <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>forEach</code> y <code>map</code> donde se indique.</li> <li>Aseg\u00farate de que las iteraciones con bucles (<code>for...of</code> y <code>for</code> cl\u00e1sico) sean correctas.</li> <li>Mant\u00e9n la estructura del arreglo multidimensional para las campa\u00f1as.</li> <li>No modifiques las partes del c\u00f3digo que no est\u00e1n marcadas con <code>// TODO</code>.</li> </ol>"},{"location":"content/p4s/#solucion-de-referencia-para-el-instructor","title":"Soluci\u00f3n de Referencia (para el Instructor)","text":"<p>A continuaci\u00f3n, se proporciona una soluci\u00f3n completa para que el instructor pueda evaluar las respuestas de los estudiantes. Esta soluci\u00f3n no debe compartirse con los estudiantes hasta que completen la actividad.</p> <pre><code>// Creaci\u00f3n de arreglos: Lista de especialistas disponibles\nlet especialistas = [\n  { nombre: \"Sof\u00eda Ram\u00edrez\", rol: \"Estratega\" },\n  { nombre: \"Diego Vargas\", rol: \"Redactor\" },\n  { nombre: \"Clara Morales\", rol: \"Dise\u00f1adora Gr\u00e1fica\" }\n];\n\n// TODO 1: Usar push para a\u00f1adir un nuevo especialista al final del arreglo\nespecialistas.push({ nombre: \"Luc\u00eda Fern\u00e1ndez\", rol: \"Analista de Datos\" });\nconsole.log(\"Especialistas tras push:\", especialistas);\n\n// TODO 2: Usar pop para eliminar el \u00faltimo especialista y almacenarlo en una variable\nlet especialistaEliminado = especialistas.pop();\nconsole.log(\"Especialista eliminado (pop):\", especialistaEliminado);\nconsole.log(\"Especialistas tras pop:\", especialistas);\n\n// TODO 3: Usar unshift para a\u00f1adir un especialista al inicio del arreglo\nespecialistas.unshift({ nombre: \"Mateo Gonz\u00e1lez\", rol: \"Community Manager\" });\nconsole.log(\"Especialistas tras unshift:\", especialistas);\n\n// TODO 4: Usar shift para eliminar el primer especialista y almacenarlo en una variable\nlet primerEspecialista = especialistas.shift();\nconsole.log(\"Primer especialista eliminado (shift):\", primerEspecialista);\nconsole.log(\"Especialistas tras shift:\", especialistas);\n\n// TODO 5: Usar slice para extraer una sublista con los primeros dos especialistas\nlet subLista = especialistas.slice(0, 2);\nconsole.log(\"Sublista (slice):\", subLista);\n\n// Arreglo multidimensional: Estructura de campa\u00f1as con especialistas asignados\nlet campanas = [\n  [\n    { nombre: \"Sof\u00eda Ram\u00edrez\", rol: \"Estratega\" },\n    { nombre: \"Diego Vargas\", rol: \"Redactor\" }\n  ],\n  [\n    { nombre: \"Clara Morales\", rol: \"Dise\u00f1adora Gr\u00e1fica\" },\n    { nombre: \"Luc\u00eda Fern\u00e1ndez\", rol: \"Analista de Datos\" }\n  ]\n];\n\n// TODO 6: Usar forEach para iterar sobre las campa\u00f1as y mostrar un reporte\nconsole.log(\"Reporte de campa\u00f1as:\");\ncampanas.forEach((equipo, indice) =&gt; {\n  console.log(`Campa\u00f1a ${indice + 1}:`);\n  equipo.forEach(especialista =&gt; {\n    console.log(`- ${especialista.nombre} (${especialista.rol})`);\n  });\n});\n\n// TODO 7: Usar un bucle for...of para contar el total de especialistas por campa\u00f1a\nfor (let equipo of campanas) {\n  console.log(`Campa\u00f1a ${campanas.indexOf(equipo) + 1} tiene ${equipo.length} especialistas`);\n}\n\n// TODO 8: Usar map para crear un nuevo arreglo con los nombres de los especialistas en may\u00fasculas\nlet nombresMayusculas = especialistas.map(especialista =&gt; ({\n  nombre: especialista.nombre.toUpperCase(),\n  rol: especialista.rol\n}));\nconsole.log(\"Nombres en may\u00fasculas:\", nombresMayusculas);\n\n// TODO 9: Crear una funci\u00f3n que genere un reporte completo de las campa\u00f1as\nfunction generarReporteCompleto(campanas) {\n  console.log(\"Reporte Completo:\");\n  for (let i = 0; i &lt; campanas.length; i++) {\n    console.log(`Campa\u00f1a ${i + 1} (${campanas[i].length} especialistas):`);\n    campanas[i].forEach((especialista, j) =&gt; {\n      console.log(`  ${j + 1}. ${especialista.nombre} - ${especialista.rol}`);\n    });\n  }\n}\ngenerarReporteCompleto(campanas);\n</code></pre>"},{"location":"content/p4s/#salida-esperada","title":"Salida Esperada","text":"<p>La salida en la consola deber\u00eda ser similar a la siguiente:</p> <pre><code>Especialistas tras push: [\n  { nombre: 'Sof\u00eda Ram\u00edrez', rol: 'Estratega' },\n  { nombre: 'Diego Vargas', rol: 'Redactor' },\n  { nombre: 'Clara Morales', rol: 'Dise\u00f1adora Gr\u00e1fica' },\n  { nombre: 'Luc\u00eda Fern\u00e1ndez', rol: 'Analista de Datos' }\n]\nEspecialista eliminado (pop): { nombre: 'Luc\u00eda Fern\u00e1ndez', rol: 'Analista de Datos' }\nEspecialistas tras pop: [\n  { nombre: 'Sof\u00eda Ram\u00edrez', rol: 'Estratega' },\n  { nombre: 'Diego Vargas', rol: 'Redactor' },\n  { nombre: 'Clara Morales', rol: 'Dise\u00f1adora Gr\u00e1fica' }\n]\nEspecialistas tras unshift: [\n  { nombre: 'Mateo Gonz\u00e1lez', rol: 'Community Manager' },\n  { nombre: 'Sof\u00eda Ram\u00edrez', rol: 'Estratega' },\n  { nombre: 'Diego Vargas', rol: 'Redactor' },\n  { nombre: 'Clara Morales', rol: 'Dise\u00f1adora Gr\u00e1fica' }\n]\nPrimer especialista eliminado (shift): { nombre: 'Mateo Gonz\u00e1lez', rol: 'Community Manager' }\nEspecialistas tras shift: [\n  { nombre: 'Sof\u00eda Ram\u00edrez', rol: 'Estratega' },\n  { nombre: 'Diego Vargas', rol: 'Redactor' },\n  { nombre: 'Clara Morales', rol: 'Dise\u00f1adora Gr\u00e1fica' }\n]\nSublista (slice): [\n  { nombre: 'Sof\u00eda Ram\u00edrez', rol: 'Estratega' },\n  { nombre: 'Diego Vargas', rol: 'Redactor' }\n]\nReporte de campa\u00f1as:\nCampa\u00f1a 1:\n- Sof\u00eda Ram\u00edrez (Estratega)\n- Diego Vargas (Redactor)\nCampa\u00f1a 2:\n- Clara Morales (Dise\u00f1adora Gr\u00e1fica)\n- Luc\u00eda Fern\u00e1ndez (Analista de Datos)\nCampa\u00f1a 1 tiene 2 especialistas\nCampa\u00f1a 2 tiene 2 especialistas\nNombres en may\u00fasculas: [\n  { nombre: 'SOF\u00cdA RAM\u00cdREZ', rol: 'Estratega' },\n  { nombre: 'DIEGO VARGAS', rol: 'Redactor' },\n  { nombre: 'CLARA MORALES', rol: 'Dise\u00f1adora Gr\u00e1fica' }\n]\nReporte Completo:\nCampa\u00f1a 1 (2 especialistas):\n  1. Sof\u00eda Ram\u00edrez - Estratega\n  2. Diego Vargas - Redactor\nCampa\u00f1a 2 (2 especialistas):\n  1. Clara Morales - Dise\u00f1adora Gr\u00e1fica\n  2. Luc\u00eda Fern\u00e1ndez - Analista de Datos\n</code></pre>"},{"location":"content/p4s/#notas-para-el-instructor","title":"Notas para el Instructor","text":"<ul> <li>Objetivo educativo: Esta actividad refuerza el entendimiento de arreglos, m\u00e9todos, iteraciones y arreglos multidimensionales en un contexto empresarial realista (gesti\u00f3n de campa\u00f1as de marketing).</li> <li>Dificultad: Intermedia. Los estudiantes deben conocer los conceptos b\u00e1sicos de JavaScript (objetos, funciones, arreglos) y estar familiarizados con la sintaxis de los m\u00e9todos solicitados.</li> <li>Evaluaci\u00f3n:</li> <li>Verifica que los estudiantes usen correctamente los m\u00e9todos (<code>push</code>, <code>pop</code>, etc.) y las iteraciones (<code>forEach</code>, <code>for...of</code>, <code>for</code>).</li> <li>Aseg\u00farate de que los arreglos multidimensionales se manejen adecuadamente.</li> <li>Revisa que la salida en la consola sea clara y siga el formato indicado.</li> <li>Extensi\u00f3n opcional: Pide a los estudiantes que a\u00f1adan una funcionalidad adicional, como filtrar especialistas por rol (usando <code>filter</code>) o calcular el total de especialistas en todas las campa\u00f1as (usando <code>reduce</code>).</li> </ul> <p>Si necesitas ajustar la actividad, a\u00f1adir m\u00e1s TODOs o cambiar el contexto, \u00a1av\u00edsame!</p>"},{"location":"content/p5/","title":"Gu\u00eda Completa del DOM en JavaScript","text":""},{"location":"content/p5/#que-es-el-dom","title":"\u00bfQu\u00e9 es el DOM?","text":"<p>El DOM (Document Object Model, o Modelo de Objetos del Documento) es una interfaz de programaci\u00f3n proporcionada por los navegadores web que representa la estructura de un documento HTML o XML como un \u00e1rbol de objetos. Cada elemento, atributo y fragmento de texto en el documento se convierte en un nodo en este \u00e1rbol, lo que permite a los desarrolladores interactuar con la p\u00e1gina web de forma din\u00e1mica utilizando lenguajes como JavaScript.</p> <p>El DOM act\u00faa como un puente entre el c\u00f3digo HTML est\u00e1tico y el c\u00f3digo JavaScript, permitiendo modificar la estructura, el contenido y el estilo de una p\u00e1gina web en tiempo real. Es una representaci\u00f3n jer\u00e1rquica donde:</p> <ul> <li>Document: Es el nodo ra\u00edz que representa el documento completo.</li> <li>Elementos: Cada etiqueta HTML (como <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code>) se convierte en un nodo de elemento.</li> <li>Atributos: Los atributos de las etiquetas (como <code>id</code>, <code>class</code>) son nodos de atributo.</li> <li>Texto: El contenido de texto dentro de las etiquetas es un nodo de texto.</li> </ul>"},{"location":"content/p5/#estructura-del-dom","title":"Estructura del DOM","text":"<p>El DOM organiza los elementos de una p\u00e1gina web en una estructura de \u00e1rbol, donde cada nodo tiene una relaci\u00f3n jer\u00e1rquica (padre, hijo, hermano). Por ejemplo, considera el siguiente c\u00f3digo HTML:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Ejemplo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"contenedor\"&gt;\n    &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n    &lt;p class=\"texto\"&gt;Hola, mundo!&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>La estructura del DOM para este c\u00f3digo ser\u00eda:</p> <pre><code>Document\n\u251c\u2500\u2500 html\n    \u251c\u2500\u2500 head\n    \u2502   \u2514\u2500\u2500 title\n    \u2502       \u2514\u2500\u2500 \"Ejemplo\" (nodo de texto)\n    \u2514\u2500\u2500 body\n        \u2514\u2500\u2500 div (id=\"contenedor\")\n            \u251c\u2500\u2500 h1\n            \u2502   \u2514\u2500\u2500 \"T\u00edtulo\" (nodo de texto)\n            \u2514\u2500\u2500 p (class=\"texto\")\n                \u2514\u2500\u2500 \"Hola, mundo!\" (nodo de texto)\n</code></pre> <p>Cada elemento puede tener hijos, y los nodos de texto son los contenidos visibles de los elementos. Esta estructura permite acceder y manipular cualquier parte del documento de manera program\u00e1tica.</p>"},{"location":"content/p5/#metodos-para-acceder-al-dom","title":"M\u00e9todos para Acceder al DOM","text":"<p>JavaScript proporciona varios m\u00e9todos para seleccionar elementos del DOM. A continuaci\u00f3n, se detallan los m\u00e1s comunes: <code>getElementById</code>, <code>querySelector</code> y <code>querySelectorAll</code>.</p>"},{"location":"content/p5/#getelementbyid","title":"<code>getElementById</code>","text":"<p>El m\u00e9todo <code>getElementById</code> permite seleccionar un elemento del DOM por su atributo <code>id</code>. Es uno de los m\u00e9todos m\u00e1s antiguos y espec\u00edficos para acceder a elementos \u00fanicos, ya que el <code>id</code> debe ser \u00fanico en un documento HTML.</p> <p>Sintaxis: <pre><code>document.getElementById('idDelElemento');\n</code></pre></p> <p>Ejemplo: <pre><code>&lt;div id=\"miDiv\"&gt;Contenido&lt;/div&gt;\n&lt;script&gt;\n  const elemento = document.getElementById('miDiv');\n  console.log(elemento); // Devuelve el elemento &lt;div&gt; con id=\"miDiv\"\n&lt;/script&gt;\n</code></pre></p> <p>Caracter\u00edsticas: - Retorna un \u00fanico elemento (o <code>null</code> si no encuentra el <code>id</code>). - Es muy eficiente porque busca espec\u00edficamente por <code>id</code>. - Solo funciona con el atributo <code>id</code>.</p>"},{"location":"content/p5/#queryselector","title":"<code>querySelector</code>","text":"<p>El m\u00e9todo <code>querySelector</code> permite seleccionar el primer elemento que coincida con un selector CSS proporcionado. Es m\u00e1s flexible que <code>getElementById</code> porque puede usar cualquier selector CSS v\u00e1lido (clases, etiquetas, atributos, etc.).</p> <p>Sintaxis: <pre><code>document.querySelector('selectorCSS');\n</code></pre></p> <p>Ejemplo: <pre><code>&lt;p class=\"texto\"&gt;Primer p\u00e1rrafo&lt;/p&gt;\n&lt;p class=\"texto\"&gt;Segundo p\u00e1rrafo&lt;/p&gt;\n&lt;script&gt;\n  const parrafo = document.querySelector('.texto');\n  console.log(parrafo); // Devuelve el primer &lt;p&gt; con class=\"texto\"\n&lt;/script&gt;\n</code></pre></p> <p>Caracter\u00edsticas: - Retorna el primer elemento que coincide con el selector (o <code>null</code> si no hay coincidencias). - Acepta selectores CSS como <code>.clase</code>, <code>#id</code>, <code>[atributo]</code>, <code>etiqueta</code>, etc. - Es m\u00e1s vers\u00e1til pero puede ser menos eficiente que <code>getElementById</code> para IDs.</p>"},{"location":"content/p5/#queryselectorall","title":"<code>querySelectorAll</code>","text":"<p>El m\u00e9todo <code>querySelectorAll</code> devuelve una lista de nodos (NodeList) con todos los elementos que coinciden con un selector CSS. Es \u00fatil cuando necesitas trabajar con m\u00faltiples elementos.</p> <p>Sintaxis: <pre><code>document.querySelectorAll('selectorCSS');\n</code></pre></p> <p>Ejemplo: <pre><code>&lt;ul&gt;\n  &lt;li class=\"item\"&gt;Elemento 1&lt;/li&gt;\n  &lt;li class=\"item\"&gt;Elemento 2&lt;/li&gt;\n  &lt;li class=\"item\"&gt;Elemento 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;script&gt;\n  const items = document.querySelectorAll('.item');\n  items.forEach(item =&gt; console.log(item.textContent));\n  // Imprime: \"Elemento 1\", \"Elemento 2\", \"Elemento 3\"\n&lt;/script&gt;\n</code></pre></p> <p>Caracter\u00edsticas: - Retorna una <code>NodeList</code> (parecida a un array, pero no es un array). - Puedes iterar sobre la <code>NodeList</code> con m\u00e9todos como <code>forEach</code> o convertirla en un array con <code>Array.from()</code>. - Acepta cualquier selector CSS v\u00e1lido.</p>"},{"location":"content/p5/#modificacion-del-dom","title":"Modificaci\u00f3n del DOM","text":"<p>Una vez que has seleccionado un elemento, puedes modificar su contenido, estilo o atributos. Los m\u00e9todos y propiedades m\u00e1s comunes son <code>innerHTML</code>, <code>textContent</code> y <code>style</code>.</p>"},{"location":"content/p5/#innerhtml","title":"<code>innerHTML</code>","text":"<p>La propiedad <code>innerHTML</code> permite leer o modificar el contenido HTML de un elemento, incluyendo etiquetas HTML. Es poderosa, pero debe usarse con cuidado debido a posibles vulnerabilidades de seguridad (como inyecciones de c\u00f3digo).</p> <p>Sintaxis: <pre><code>elemento.innerHTML; // Leer el contenido HTML\nelemento.innerHTML = 'nuevo contenido HTML'; // Modificar el contenido\n</code></pre></p> <p>Ejemplo: <pre><code>&lt;div id=\"contenedor\"&gt;Texto original&lt;/div&gt;\n&lt;script&gt;\n  const contenedor = document.getElementById('contenedor');\n  contenedor.innerHTML = '&lt;p&gt;Nuevo &lt;strong&gt;contenido&lt;/strong&gt;&lt;/p&gt;';\n  // El div ahora contiene: &lt;p&gt;Nuevo &lt;strong&gt;contenido&lt;/strong&gt;&lt;/p&gt;\n&lt;/script&gt;\n</code></pre></p> <p>Consideraciones: - Permite insertar HTML completo, incluyendo etiquetas. - Puede ser peligroso si se inserta contenido no confiable (riesgo de XSS). - Es \u00fatil para actualizar grandes bloques de contenido.</p>"},{"location":"content/p5/#textcontent","title":"<code>textContent</code>","text":"<p>La propiedad <code>textContent</code> lee o modifica el contenido de texto de un elemento, ignorando cualquier etiqueta HTML. Es m\u00e1s segura que <code>innerHTML</code> porque no interpreta el contenido como HTML.</p> <p>Sintaxis: <pre><code>elemento.textContent; // Leer el texto\nelemento.textContent = 'nuevo texto'; // Modificar el texto\n</code></pre></p> <p>Ejemplo: <pre><code>&lt;div id=\"contenedor\"&gt;Texto original&lt;/div&gt;\n&lt;script&gt;\n  const contenedor = document.getElementById('contenedor');\n  contenedor.textContent = 'Texto nuevo';\n  // El div ahora contiene: Texto nuevo\n&lt;/script&gt;\n</code></pre></p> <p>Consideraciones: - Solo maneja texto plano, ignorando etiquetas HTML. - Es m\u00e1s seguro que <code>innerHTML</code> porque no ejecuta c\u00f3digo HTML. - Ideal para actualizar contenido de texto sin preocupaciones de seguridad.</p>"},{"location":"content/p5/#style","title":"<code>style</code>","text":"<p>La propiedad <code>style</code> permite modificar los estilos CSS de un elemento directamente desde JavaScript. Cada propiedad CSS se accede en formato camelCase (por ejemplo, <code>backgroundColor</code> en lugar de <code>background-color</code>).</p> <p>Sintaxis: <pre><code>elemento.style.propiedadCSS = 'valor';\n</code></pre></p> <p>Ejemplo: <pre><code>&lt;div id=\"caja\"&gt;Caja&lt;/div&gt;\n&lt;script&gt;\n  const caja = document.getElementById('caja');\n  caja.style.backgroundColor = 'blue';\n  caja.style.color = 'white';\n  caja.style.padding = '10px';\n&lt;/script&gt;\n</code></pre></p> <p>Consideraciones: - Solo afecta los estilos en l\u00ednea (inline styles) del elemento. - No modifica reglas CSS definidas en hojas de estilo externas o internas. - Es \u00fatil para cambios de estilo din\u00e1micos, como en animaciones o interacciones.</p>"},{"location":"content/p5/#creacion-y-eliminacion-de-elementos","title":"Creaci\u00f3n y Eliminaci\u00f3n de Elementos","text":"<p>El DOM permite crear nuevos elementos, a\u00f1adirlos a la p\u00e1gina y eliminar elementos existentes. Los m\u00e9todos clave son <code>createElement</code>, <code>appendChild</code> y <code>remove</code>.</p>"},{"location":"content/p5/#createelement","title":"<code>createElement</code>","text":"<p>El m\u00e9todo <code>createElement</code> crea un nuevo elemento HTML especificado por su etiqueta.</p> <p>Sintaxis: <pre><code>document.createElement('etiqueta');\n</code></pre></p> <p>Ejemplo: <pre><code>const nuevoDiv = document.createElement('div');\nnuevoDiv.textContent = 'Nuevo elemento';\n</code></pre></p> <p>Caracter\u00edsticas: - Crea un elemento en memoria, pero no lo a\u00f1ade al DOM hasta que se use un m\u00e9todo como <code>appendChild</code>. - La etiqueta debe ser una cadena v\u00e1lida (como <code>'div'</code>, <code>'p'</code>, <code>'span'</code>).</p>"},{"location":"content/p5/#appendchild","title":"<code>appendChild</code>","text":"<p>El m\u00e9todo <code>appendChild</code> agrega un nodo (como un elemento creado con <code>createElement</code>) como hijo de otro elemento en el DOM.</p> <p>Sintaxis: <pre><code>padre.appendChild(hijo);\n</code></pre></p> <p>Ejemplo: <pre><code>&lt;div id=\"contenedor\"&gt;&lt;/div&gt;\n&lt;script&gt;\n  const contenedor = document.getElementById('contenedor');\n  const nuevoParrafo = document.createElement('p');\n  nuevoParrafo.textContent = 'P\u00e1rrafo din\u00e1mico';\n  contenedor.appendChild(nuevoParrafo);\n  // El div ahora contiene: &lt;p&gt;P\u00e1rrafo din\u00e1mico&lt;/p&gt;\n&lt;/script&gt;\n</code></pre></p> <p>Caracter\u00edsticas: - A\u00f1ade el elemento como el \u00faltimo hijo del elemento padre. - Si el elemento ya existe en el DOM, lo mueve a la nueva ubicaci\u00f3n.</p>"},{"location":"content/p5/#remove","title":"<code>remove</code>","text":"<p>El m\u00e9todo <code>remove</code> elimina un elemento del DOM.</p> <p>Sintaxis: <pre><code>elemento.remove();\n</code></pre></p> <p>Ejemplo: <pre><code>&lt;div id=\"contenedor\"&gt;\n  &lt;p id=\"parrafo\"&gt;Texto a eliminar&lt;/p&gt;\n&lt;/div&gt;\n&lt;script&gt;\n  const parrafo = document.getElementById('parrafo');\n  parrafo.remove();\n  // El p\u00e1rrafo ya no est\u00e1 en el DOM\n&lt;/script&gt;\n</code></pre></p> <p>Consideraciones: - Elimina el elemento y todos sus hijos. - Es compatible con navegadores modernos; en navegadores antiguos, se usaba <code>parentNode.removeChild(elemento)</code>.</p>"},{"location":"content/p5/#ejemplo-1","title":"Ejemplo 1","text":"<p>A continuaci\u00f3n, un ejemplo que combina los conceptos explicados:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Ejemplo DOM&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"contenedor\"&gt;\n    &lt;p class=\"texto\"&gt;Texto inicial&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;button onclick=\"modificarDOM()\"&gt;Modificar&lt;/button&gt;\n  &lt;script&gt;\n    function modificarDOM() {\n      // Seleccionar elementos\n      const contenedor = document.getElementById('contenedor');\n      const parrafos = document.querySelectorAll('.texto');\n\n      // Modificar contenido\n      parrafos.forEach(p =&gt; {\n        p.textContent = 'Texto modificado';\n        p.style.color = 'red';\n      });\n\n      // Crear y a\u00f1adir un nuevo elemento\n      const nuevoParrafo = document.createElement('p');\n      nuevoParrafo.innerHTML = '&lt;strong&gt;Nuevo p\u00e1rrafo&lt;/strong&gt;';\n      contenedor.appendChild(nuevoParrafo);\n\n      // Eliminar el primer p\u00e1rrafo\n      if (parrafos.length &gt; 0) {\n        parrafos[0].remove();\n      }\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n del ejemplo: 1. Se selecciona el contenedor con <code>getElementById</code> y los p\u00e1rrafos con <code>querySelectorAll</code>. 2. Se modifica el texto y el estilo de los p\u00e1rrafos con <code>textContent</code> y <code>style</code>. 3. Se crea un nuevo p\u00e1rrafo con <code>createElement</code> y se a\u00f1ade con <code>appendChild</code>. 4. Se elimina el primer p\u00e1rrafo con <code>remove</code>.</p>"},{"location":"content/p5/#ejemplo-2","title":"Ejemplo 2","text":""},{"location":"content/p5/#calculadora-basica","title":"Calculadora B\u00e1sica","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Calculadora B\u00e1sica&lt;/title&gt;\n    &lt;style&gt;\n        .calculator {\n            width: 300px;\n            margin: 50px auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n            text-align: center;\n            font-family: Arial, sans-serif;\n        }\n        #display {\n            width: 90%;\n            height: 40px;\n            margin-bottom: 10px;\n            font-size: 20px;\n            text-align: right;\n            padding: 5px;\n        }\n        .buttons {\n            display: grid;\n            grid-template-columns: repeat(4, 1fr);\n            gap: 5px;\n        }\n        button {\n            padding: 10px;\n            font-size: 18px;\n            cursor: pointer;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n            background-color: #f9f9f9;\n        }\n        button:hover {\n            background-color: #e0e0e0;\n        }\n        .operator {\n            background-color: #ff9500;\n            color: white;\n        }\n        .operator:hover {\n            background-color: #e68a00;\n        }\n        .clear {\n            background-color: #ff3b30;\n            color: white;\n        }\n        .clear:hover {\n            background-color: #e6332a;\n        }\n        .equals {\n            background-color: #28a745;\n            color: white;\n        }\n        .equals:hover {\n            background-color: #218838;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"calculator\"&gt;\n        &lt;input type=\"text\" id=\"display\" readonly value=\"0\"&gt;\n        &lt;div class=\"buttons\"&gt;\n            &lt;button class=\"clear\" onclick=\"clearDisplay()\"&gt;C&lt;/button&gt;\n            &lt;button onclick=\"appendToDisplay('7')\"&gt;7&lt;/button&gt;\n            &lt;button onclick=\"appendToDisplay('8')\"&gt;8&lt;/button&gt;\n            &lt;button onclick=\"appendToDisplay('9')\"&gt;9&lt;/button&gt;\n            &lt;button class=\"operator\" onclick=\"setOperator('/')\"&gt;/&lt;/button&gt;\n            &lt;button onclick=\"appendToDisplay('4')\"&gt;4&lt;/button&gt;\n            &lt;button onclick=\"appendToDisplay('5')\"&gt;5&lt;/button&gt;\n            &lt;button onclick=\"appendToDisplay('6')\"&gt;6&lt;/button&gt;\n            &lt;button class=\"operator\" onclick=\"setOperator('*')\"&gt;\u00d7&lt;/button&gt;\n            &lt;button onclick=\"appendToDisplay('1')\"&gt;1&lt;/button&gt;\n            &lt;button onclick=\"appendToDisplay('2')\"&gt;2&lt;/button&gt;\n            &lt;button onclick=\"appendToDisplay('3')\"&gt;3&lt;/button&gt;\n            &lt;button class=\"operator\" onclick=\"setOperator('-')\"&gt;-&lt;/button&gt;\n            &lt;button onclick=\"appendToDisplay('0')\"&gt;0&lt;/button&gt;\n            &lt;button onclick=\"appendToDisplay('.')\"&gt;.&lt;/button&gt;\n            &lt;button class=\"equals\" onclick=\"calculate()\"&gt;=&lt;/button&gt;\n            &lt;button class=\"operator\" onclick=\"setOperator('+')\"&gt;+&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        // Paso 1: Obtener referencia al elemento del DOM donde se mostrar\u00e1 el resultado\n        const display = document.getElementById('display');\n        let currentNumber = '0'; // Almacena el n\u00famero actual\n        let firstNumber = null; // Primer n\u00famero de la operaci\u00f3n\n        let operator = null; // Operador actual\n        let waitingForSecondNumber = false; // Estado para manejar el segundo n\u00famero\n\n        // Paso 2: Funci\u00f3n para agregar caracteres al n\u00famero actual\n        function appendToDisplay(value) {\n            if (waitingForSecondNumber) {\n                // Si estamos esperando el segundo n\u00famero, reiniciamos el display\n                currentNumber = value === '.' ? '0.' : value;\n                waitingForSecondNumber = false;\n            } else {\n                // Agregamos al n\u00famero actual, evitando ceros iniciales\n                if (currentNumber === '0' &amp;&amp; value !== '.') {\n                    currentNumber = value;\n                } else {\n                    currentNumber += value;\n                }\n            }\n            // Actualizamos el valor del display en el DOM\n            display.value = currentNumber;\n        }\n\n        // Paso 3: Funci\u00f3n para establecer el operador\n        function setOperator(op) {\n            if (firstNumber === null) {\n                // Guardamos el primer n\u00famero y el operador\n                firstNumber = parseFloat(currentNumber);\n                operator = op;\n                waitingForSecondNumber = true;\n            } else if (!waitingForSecondNumber) {\n                // Si ya hay un primer n\u00famero y operador, calculamos\n                calculate();\n                operator = op;\n                waitingForSecondNumber = true;\n            }\n        }\n\n        // Paso 4: Funci\u00f3n para limpiar el display y reiniciar variables\n        function clearDisplay() {\n            currentNumber = '0';\n            firstNumber = null;\n            operator = null;\n            waitingForSecondNumber = false;\n            display.value = '0';\n        }\n\n        // Paso 5: Funci\u00f3n para realizar la operaci\u00f3n\n        function performOperation(num1, op, num2) {\n            const n1 = parseFloat(num1);\n            const n2 = parseFloat(num2);\n            switch (op) {\n                case '+':\n                    return n1 + n2;\n                case '-':\n                    return n1 - n2;\n                case '*':\n                    return n1 * n2;\n                case '/':\n                    if (n2 === 0) {\n                        throw new Error('Divisi\u00f3n por cero');\n                    }\n                    return n1 / n2;\n                default:\n                    throw new Error('Operador inv\u00e1lido');\n            }\n        }\n\n        // Paso 6: Funci\u00f3n para calcular el resultado\n        function calculate() {\n            if (firstNumber === null || operator === null || waitingForSecondNumber) {\n                return; // No calculamos si faltan datos\n            }\n            try {\n                // Calculamos el resultado usando el primer n\u00famero, el operador y el n\u00famero actual\n                const result = performOperation(firstNumber, operator, currentNumber);\n                // Actualizamos el display con el resultado\n                display.value = isFinite(result) ? result : 'Error';\n                // Preparamos para la siguiente operaci\u00f3n\n                currentNumber = result.toString();\n                firstNumber = null;\n                operator = null;\n                waitingForSecondNumber = false;\n            } catch (error) {\n                display.value = 'Error';\n                clearDisplay();\n            }\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/p5/#explicacion-paso-a-paso-de-la-manipulacion-del-dom-y-la-logica-simple","title":"Explicaci\u00f3n paso a paso de la manipulaci\u00f3n del DOM y la l\u00f3gica simple:","text":"<ol> <li> <p>Estructura HTML y CSS (sin cambios significativos):</p> <ul> <li>El HTML usa un <code>&lt;input id=\"display\"&gt;</code> de solo lectura para mostrar n\u00fameros y resultados.</li> <li>Los botones est\u00e1n organizados en una cuadr\u00edcula con CSS para un dise\u00f1o claro.</li> <li>Los botones de operadores ahora usan <code>setOperator(op)</code> en lugar de <code>appendToDisplay(op)</code> para manejar la l\u00f3gica de operadores.</li> </ul> </li> <li> <p>Variables de estado:</p> <ul> <li><code>currentNumber</code>: Almacena el n\u00famero que el usuario est\u00e1 ingresando.</li> <li><code>firstNumber</code>: Guarda el primer n\u00famero de la operaci\u00f3n.</li> <li><code>operator</code>: Almacena el operador actual (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>).</li> <li><code>waitingForSecondNumber</code>: Indica si estamos esperando el segundo n\u00famero despu\u00e9s de seleccionar un operador.</li> <li>Estas variables simplifican la l\u00f3gica al mantener el estado de la calculadora.</li> </ul> </li> <li> <p>Obtener referencia al DOM:</p> <ul> <li>Usamos <code>document.getElementById('display')</code> para obtener el elemento <code>&lt;input&gt;</code> y manipular su propiedad <code>value</code>.</li> </ul> </li> <li> <p>Funci\u00f3n <code>appendToDisplay(value)</code>:</p> <ul> <li>Maneja la entrada de n\u00fameros y puntos decimales.</li> <li>Si <code>waitingForSecondNumber</code> es <code>true</code>, reinicia <code>currentNumber</code> con el nuevo valor (evitando concatenar al n\u00famero anterior).</li> <li>Evita ceros iniciales reemplazando <code>'0'</code> con el nuevo d\u00edgito, salvo que sea un punto decimal.</li> <li>Actualiza el DOM asignando <code>currentNumber</code> a <code>display.value</code>.</li> </ul> </li> <li> <p>Funci\u00f3n <code>setOperator(op)</code>:</p> <ul> <li>Almacena el operador seleccionado (<code>op</code>) y el primer n\u00famero (<code>firstNumber</code>) si a\u00fan no est\u00e1n definidos.</li> <li>Si ya hay un operador y un primer n\u00famero, realiza un c\u00e1lculo intermedio antes de establecer el nuevo operador.</li> <li>Cambia <code>waitingForSecondNumber</code> a <code>true</code> para preparar la entrada del segundo n\u00famero.</li> </ul> </li> <li> <p>Funci\u00f3n <code>clearDisplay()</code>:</p> <ul> <li>Reinicia todas las variables (<code>currentNumber</code>, <code>firstNumber</code>, <code>operator</code>, <code>waitingForSecondNumber</code>) y establece <code>display.value</code> a <code>'0'</code>.</li> </ul> </li> <li> <p>Funci\u00f3n <code>performOperation(num1, op, num2)</code>:</p> <ul> <li>Realiza una operaci\u00f3n matem\u00e1tica entre dos n\u00fameros seg\u00fan el operador.</li> <li>Convierte los n\u00fameros a flotantes con <code>parseFloat</code> para manejar decimales.</li> <li>Lanza errores para divisiones por cero o operadores inv\u00e1lidos.</li> </ul> </li> <li> <p>Funci\u00f3n <code>calculate()</code>:</p> <ul> <li>Se ejecuta al presionar <code>=</code>. Verifica que <code>firstNumber</code> y <code>operator</code> est\u00e9n definidos y que no estemos esperando el segundo n\u00famero.</li> <li>Usa <code>performOperation</code> para calcular el resultado usando <code>firstNumber</code>, <code>operator</code> y <code>currentNumber</code>.</li> <li>Actualiza el DOM con el resultado (<code>display.value</code>) si es finito; de lo contrario, muestra <code>'Error'</code>.</li> <li>Reinicia las variables para permitir nuevas operaciones, almacenando el resultado como <code>currentNumber</code>.</li> </ul> </li> </ol>"},{"location":"content/p5/#actividad-1-manipulacion-del-dom-con-javascript","title":"Actividad 1: Manipulaci\u00f3n del DOM con JavaScript","text":""},{"location":"content/p5/#objetivo","title":"Objetivo","text":"<p>Esta actividad tiene como prop\u00f3sito que los estudiantes practiquen los conceptos del Document Object Model (DOM) en JavaScript, incluyendo la selecci\u00f3n, modificaci\u00f3n, creaci\u00f3n y eliminaci\u00f3n de elementos en una p\u00e1gina web. Los estudiantes aplicar\u00e1n los m\u00e9todos <code>getElementById</code>, <code>querySelector</code>, <code>querySelectorAll</code>, <code>innerHTML</code>, <code>textContent</code>, <code>style</code>, <code>createElement</code>, <code>appendChild</code> y <code>remove</code> en un ejercicio interactivo.</p>"},{"location":"content/p5/#instrucciones-generales","title":"Instrucciones Generales","text":"<ol> <li>Entorno: Usa un editor de c\u00f3digo (como VS Code) y un navegador web para probar tu c\u00f3digo.</li> <li>Archivo base: Crea un archivo HTML con la estructura inicial proporcionada m\u00e1s abajo.</li> <li>Tareas: Completa las tareas descritas, escribiendo el c\u00f3digo JavaScript necesario para manipular el DOM.</li> <li>Validaci\u00f3n: Prueba tu c\u00f3digo en el navegador y verifica que cumpla con los requisitos de cada tarea.</li> <li>Entrega: Comparte el archivo HTML final con el c\u00f3digo JavaScript implementado (puedes usar un enlace a un repositorio o un archivo comprimido).</li> </ol>"},{"location":"content/p5/#archivo-base-html","title":"Archivo Base (HTML)","text":"<p>Copia el siguiente c\u00f3digo HTML en un archivo llamado <code>actividad-dom.html</code> para usar como base:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Actividad DOM&lt;/title&gt;\n  &lt;style&gt;\n    .tarea {\n      border: 1px solid #ccc;\n      padding: 10px;\n      margin: 10px 0;\n    }\n    .item-lista {\n      margin: 5px 0;\n    }\n    button {\n      padding: 5px 10px;\n      margin: 5px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Actividad Pr\u00e1ctica: Manipulaci\u00f3n del DOM&lt;/h1&gt;\n\n  &lt;div id=\"contenedor-tareas\"&gt;\n    &lt;!-- Tarea 1: Modificar texto --&gt;\n    &lt;div class=\"tarea\" id=\"tarea1\"&gt;\n      &lt;h2&gt;Tarea 1: Modificar Texto&lt;/h2&gt;\n      &lt;p id=\"texto-inicial\"&gt;Este es un texto inicial&lt;/p&gt;\n      &lt;button onclick=\"modificarTexto()\"&gt;Cambiar Texto&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Tarea 2: Cambiar estilos --&gt;\n    &lt;div class=\"tarea\" id=\"tarea2\"&gt;\n      &lt;h2&gt;Tarea 2: Cambiar Estilos&lt;/h2&gt;\n      &lt;div id=\"caja-estilo\"&gt;Caja con estilo inicial&lt;/div&gt;\n      &lt;button onclick=\"cambiarEstilo()\"&gt;Cambiar Estilo&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Tarea 3: A\u00f1adir elementos --&gt;\n    &lt;div class=\"tarea\" id=\"tarea3\"&gt;\n      &lt;h2&gt;Tarea 3: A\u00f1adir Elementos&lt;/h2&gt;\n      &lt;ul id=\"lista-dinamica\"&gt;\n        &lt;li class=\"item-lista\"&gt;Elemento 1&lt;/li&gt;\n        &lt;li class=\"item-lista\"&gt;Elemento 2&lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;button onclick=\"agregarElemento()\"&gt;A\u00f1adir Elemento&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Tarea 4: Eliminar elementos --&gt;\n    &lt;div class=\"tarea\" id=\"tarea4\"&gt;\n      &lt;h2&gt;Tarea 4: Eliminar Elementos&lt;/h2&gt;\n      &lt;ul id=\"lista-eliminar\"&gt;\n        &lt;li class=\"item-lista\"&gt;Elemento A&lt;/li&gt;\n        &lt;li class=\"item-lista\"&gt;Elemento B&lt;/li&gt;\n        &lt;li class=\"item-lista\"&gt;Elemento C&lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;button onclick=\"eliminarElemento()\"&gt;Eliminar \u00daltimo Elemento&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;script&gt;\n    // Escribe tu c\u00f3digo JavaScript aqu\u00ed\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/p5/#tareas","title":"Tareas","text":""},{"location":"content/p5/#tarea-1-modificar-texto","title":"Tarea 1: Modificar Texto","text":"<p>Objetivo: Usar <code>getElementById</code> y <code>textContent</code> para cambiar el contenido de un elemento.</p> <ol> <li>Selecciona el elemento con <code>id=\"texto-inicial\"</code> usando <code>getElementById</code>.</li> <li>Implementa la funci\u00f3n <code>modificarTexto()</code> para que, al hacer clic en el bot\u00f3n \"Cambiar Texto\", el contenido del p\u00e1rrafo cambie a: \"\u00a1Texto modificado con \u00e9xito!\".</li> <li>Usa <code>textContent</code> para realizar el cambio (no uses <code>innerHTML</code>).</li> </ol> <p>Pista: - Usa <code>document.getElementById('texto-inicial')</code> para seleccionar el elemento. - Asigna el nuevo texto con <code>elemento.textContent = 'nuevo texto'</code>.</p>"},{"location":"content/p5/#tarea-2-cambiar-estilos","title":"Tarea 2: Cambiar Estilos","text":"<p>Objetivo: Usar <code>querySelector</code> y la propiedad <code>style</code> para modificar los estilos de un elemento.</p> <ol> <li>Selecciona el elemento con <code>id=\"caja-estilo\"</code> usando <code>querySelector</code>.</li> <li>Implementa la funci\u00f3n <code>cambiarEstilo()</code> para que, al hacer clic en el bot\u00f3n \"Cambiar Estilo\", se apliquen los siguientes estilos:</li> <li>Fondo: azul (<code>backgroundColor: 'blue'</code>).</li> <li>Color de texto: blanco (<code>color: 'white'</code>).</li> <li>Relleno: 15px (<code>padding: '15px'</code>).</li> <li>Borde: 2px s\u00f3lido negro (<code>border: '2px solid black'</code>).</li> </ol> <p>Pista: - Usa <code>document.querySelector('#caja-estilo')</code> para seleccionar el elemento. - Modifica las propiedades de estilo con <code>elemento.style.propiedad = 'valor'</code>.</p>"},{"location":"content/p5/#tarea-3-anadir-elementos","title":"Tarea 3: A\u00f1adir Elementos","text":"<p>Objetivo: Usar <code>createElement</code>, <code>textContent</code> y <code>appendChild</code> para a\u00f1adir un nuevo elemento a una lista.</p> <ol> <li>Selecciona la lista con <code>id=\"lista-dinamica\"</code> usando <code>querySelector</code>.</li> <li>Implementa la funci\u00f3n <code>agregarElemento()</code> para que, al hacer clic en el bot\u00f3n \"A\u00f1adir Elemento\":</li> <li>Cree un nuevo elemento <code>&lt;li&gt;</code> con <code>createElement</code>.</li> <li>Establezca su contenido de texto a \"Elemento X\" (donde X es el n\u00famero del nuevo elemento, empezando desde 3).</li> <li>A\u00f1ada la clase <code>item-lista</code> al nuevo elemento usando <code>classList.add('item-lista')</code>.</li> <li>A\u00f1ada el nuevo elemento a la lista con <code>appendChild</code>.</li> </ol> <p>Pista: - Usa <code>document.querySelectorAll('.item-lista')</code> para contar los elementos existentes y determinar el n\u00famero del nuevo elemento. - Crea el elemento con <code>document.createElement('li')</code>. - A\u00f1ade el elemento con <code>lista.appendChild(nuevoElemento)</code>.</p>"},{"location":"content/p5/#tarea-4-eliminar-elementos","title":"Tarea 4: Eliminar Elementos","text":"<p>Objetivo: Usar <code>querySelectorAll</code> y <code>remove</code> para eliminar un elemento de una lista.</p> <ol> <li>Selecciona todos los elementos <code>&lt;li&gt;</code> dentro de la lista con <code>id=\"lista-eliminar\"</code> usando <code>querySelectorAll</code>.</li> <li>Implementa la funci\u00f3n <code>eliminarElemento()</code> para que, al hacer clic en el bot\u00f3n \"Eliminar \u00daltimo Elemento\":</li> <li>Elimine el \u00faltimo <code>&lt;li&gt;</code> de la lista.</li> <li>Si no hay elementos en la lista, muestra una alerta con el mensaje: \"No hay m\u00e1s elementos para eliminar\".</li> </ol> <p>Pista: - Usa <code>document.querySelectorAll('#lista-eliminar li')</code> para obtener los elementos. - Accede al \u00faltimo elemento con <code>elementos[elementos.length - 1]</code>. - Usa <code>elemento.remove()</code> para eliminar el elemento.</p>"},{"location":"content/p5/#actividad-2-calculadora-conversora-de-divisas","title":"Actividad 2: Calculadora Conversora de Divisas","text":""},{"location":"content/p5/#enunciado","title":"Enunciado","text":"<p>Completar una calculadora conversora de divisas que permita convertir entre pesos colombianos (COP), d\u00f3lares estadounidenses (USD) y euros (EUR). El HTML y CSS ya est\u00e1n proporcionados, pero el archivo JavaScript est\u00e1 vac\u00edo. Debes implementar la l\u00f3gica en JavaScript para realizar las conversiones de divisas seg\u00fan las tasas de cambio proporcionadas.</p>"},{"location":"content/p5/#objetivo_1","title":"Objetivo","text":"<p>Implementar la funci\u00f3n <code>convert()</code> en JavaScript para que: - Obtenga la cantidad ingresada por el usuario. - Identifique las monedas de origen y destino seleccionadas. - Realice la conversi\u00f3n usando las tasas de cambio dadas. - Muestre el resultado con dos decimales en el formato: <code>Resultado: [valor] [moneda destino]</code>. - Maneje casos de error, como cantidades no v\u00e1lidas.</p>"},{"location":"content/p5/#tasas-de-cambio","title":"Tasas de Cambio","text":"<p>Usa las siguientes tasas de cambio fijas (no necesitas obtenerlas de una API):</p> <ul> <li>1 COP = 0.00024 USD</li> <li>1 COP = 0.00022 EUR</li> <li>1 USD = 4200 COP</li> <li>1 USD = 0.93 EUR</li> <li>1 EUR = 4500 COP</li> <li>1 EUR = 1.08 USD</li> </ul>"},{"location":"content/p5/#instrucciones","title":"Instrucciones","text":"<ol> <li>Abre el archivo <code>index.html</code> proporcionado abajo.</li> <li>Crea un archivo <code>script.js</code> en el mismo directorio.</li> <li>Implementa la funci\u00f3n <code>convert()</code> que se ejecuta al hacer clic en el bot\u00f3n \"Convertir\".</li> <li>Usa el objeto <code>exchangeRates</code> para almacenar las tasas de cambio. <pre><code>const exchangeRates = {\n    COP: { USD: 0.00024, EUR: 0.00022 },\n    USD: { COP: 4200, EUR: 0.93 },\n    EUR: { COP: 4500, USD: 1.08 }\n};\n</code></pre></li> <li> <p>Aseg\u00farate de:</p> </li> <li> <p>Validar que la cantidad ingresada sea un n\u00famero mayor a cero.</p> </li> <li>Mostrar un mensaje de error si la cantidad no es v\u00e1lida.</li> <li>No realizar conversiones si la moneda de origen y destino son la misma (mostrar la cantidad tal cual).</li> <li> <p>Mostrar el resultado con dos decimales.</p> </li> <li> <p>Prueba la calculadora en un navegador para verificar que las conversiones sean correctas.</p> </li> </ol>"},{"location":"content/p5/#archivos-proporcionados","title":"Archivos Proporcionados","text":""},{"location":"content/p5/#indexhtml","title":"index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Actividad: Conversor de Divisas&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"converter\"&gt;\n        &lt;h2&gt;Conversor de Divisas&lt;/h2&gt;\n        &lt;div class=\"input-group\"&gt;\n            &lt;input type=\"number\" id=\"amount\" placeholder=\"Cantidad\" min=\"0\"&gt;\n            &lt;select id=\"fromCurrency\"&gt;\n                &lt;option value=\"COP\"&gt;Pesos Colombianos (COP)&lt;/option&gt;\n                &lt;option value=\"USD\"&gt;D\u00f3lares (USD)&lt;/option&gt;\n                &lt;option value=\"EUR\"&gt;Euros (EUR)&lt;/option&gt;\n            &lt;/select&gt;\n            &lt;span&gt;a&lt;/span&gt;\n            &lt;select id=\"toCurrency\"&gt;\n                &lt;option value=\"COP\"&gt;Pesos Colombianos (COP)&lt;/option&gt;\n                &lt;option value=\"USD\"&gt;D\u00f3lares (USD)&lt;/option&gt;\n                &lt;option value=\"EUR\"&gt;Euros (EUR)&lt;/option&gt;\n            &lt;/select&gt;\n        &lt;/div&gt;\n        &lt;button onclick=\"convert()\"&gt;Convertir&lt;/button&gt;\n        &lt;div id=\"result\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/p5/#stylescss","title":"styles.css","text":"<pre><code>body {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background: linear-gradient(135deg, #e0e7ff, #c7d2fe);\n    min-height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 0;\n}\n.converter {\n    background: #ffffff;\n    border-radius: 15px;\n    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\n    padding: 30px;\n    max-width: 500px;\n    width: 90%;\n    transition: transform 0.3s ease;\n}\n.converter:hover {\n    transform: translateY(-5px);\n}\nh2 {\n    color: #1e3a8a;\n    margin-bottom: 20px;\n    font-size: 1.8em;\n    text-align: center;\n}\n.input-group {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 20px;\n}\ninput, select {\n    padding: 12px;\n    font-size: 1em;\n    border: 1px solid #d1d5db;\n    border-radius: 8px;\n    outline: none;\n    transition: border-color 0.3s ease;\n}\ninput:focus, select:focus {\n    border-color: #3b82f6;\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\ninput {\n    width: 120px;\n}\nselect {\n    width: 150px;\n    background: #f9fafb;\n}\nbutton {\n    background: #3b82f6;\n    color: white;\n    border: none;\n    padding: 12px 24px;\n    font-size: 1em;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: background 0.3s ease, transform 0.2s ease;\n}\nbutton:hover {\n    background: #2563eb;\n    transform: scale(1.05);\n}\nbutton:active {\n    transform: scale(0.95);\n}\n#result {\n    margin-top: 20px;\n    font-size: 1.2em;\n    color: #1e3a8a;\n    font-weight: bold;\n    text-align: center;\n}\n@media (max-width: 480px) {\n    .converter {\n        padding: 20px;\n    }\n    input, select {\n        width: 100%;\n    }\n    .input-group {\n        flex-direction: column;\n    }\n}\n</code></pre>"},{"location":"content/p5/#scriptjs","title":"script.js","text":"<pre><code>//Tu Soluci\u00f3n\n</code></pre>"},{"location":"content/p5s/","title":"Actividad Pr\u00e1ctica: Manipulaci\u00f3n del DOM con JavaScript","text":""},{"location":"content/p5s/#objetivo","title":"Objetivo","text":"<p>Esta actividad tiene como prop\u00f3sito que los estudiantes practiquen los conceptos del Document Object Model (DOM) en JavaScript, incluyendo la selecci\u00f3n, modificaci\u00f3n, creaci\u00f3n y eliminaci\u00f3n de elementos en una p\u00e1gina web. Los estudiantes aplicar\u00e1n los m\u00e9todos <code>getElementById</code>, <code>querySelector</code>, <code>querySelectorAll</code>, <code>innerHTML</code>, <code>textContent</code>, <code>style</code>, <code>createElement</code>, <code>appendChild</code> y <code>remove</code> en un ejercicio interactivo.</p>"},{"location":"content/p5s/#instrucciones-generales","title":"Instrucciones Generales","text":"<ol> <li>Entorno: Usa un editor de c\u00f3digo (como VS Code) y un navegador web para probar tu c\u00f3digo.</li> <li>Archivo base: Crea un archivo HTML con la estructura inicial proporcionada m\u00e1s abajo.</li> <li>Tareas: Completa las tareas descritas, escribiendo el c\u00f3digo JavaScript necesario para manipular el DOM.</li> <li>Validaci\u00f3n: Prueba tu c\u00f3digo en el navegador y verifica que cumpla con los requisitos de cada tarea.</li> <li>Entrega: Comparte el archivo HTML final con el c\u00f3digo JavaScript implementado (puedes usar un enlace a un repositorio o un archivo comprimido).</li> </ol>"},{"location":"content/p5s/#archivo-base-html","title":"Archivo Base (HTML)","text":"<p>Copia el siguiente c\u00f3digo HTML en un archivo llamado <code>actividad-dom.html</code> para usar como base:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Actividad DOM&lt;/title&gt;\n  &lt;style&gt;\n    .tarea {\n      border: 1px solid #ccc;\n      padding: 10px;\n      margin: 10px 0;\n    }\n    .item-lista {\n      margin: 5px 0;\n    }\n    button {\n      padding: 5px 10px;\n      margin: 5px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Actividad Pr\u00e1ctica: Manipulaci\u00f3n del DOM&lt;/h1&gt;\n\n  &lt;div id=\"contenedor-tareas\"&gt;\n    &lt;!-- Tarea 1: Modificar texto --&gt;\n    &lt;div class=\"tarea\" id=\"tarea1\"&gt;\n      &lt;h2&gt;Tarea 1: Modificar Texto&lt;/h2&gt;\n      &lt;p id=\"texto-inicial\"&gt;Este es un texto inicial&lt;/p&gt;\n      &lt;button onclick=\"modificarTexto()\"&gt;Cambiar Texto&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Tarea 2: Cambiar estilos --&gt;\n    &lt;div class=\"tarea\" id=\"tarea2\"&gt;\n      &lt;h2&gt;Tarea 2: Cambiar Estilos&lt;/h2&gt;\n      &lt;div id=\"caja-estilo\"&gt;Caja con estilo inicial&lt;/div&gt;\n      &lt;button onclick=\"cambiarEstilo()\"&gt;Cambiar Estilo&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Tarea 3: A\u00f1adir elementos --&gt;\n    &lt;div class=\"tarea\" id=\"tarea3\"&gt;\n      &lt;h2&gt;Tarea 3: A\u00f1adir Elementos&lt;/h2&gt;\n      &lt;ul id=\"lista-dinamica\"&gt;\n        &lt;li class=\"item-lista\"&gt;Elemento 1&lt;/li&gt;\n        &lt;li class=\"item-lista\"&gt;Elemento 2&lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;button onclick=\"agregarElemento()\"&gt;A\u00f1adir Elemento&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Tarea 4: Eliminar elementos --&gt;\n    &lt;div class=\"tarea\" id=\"tarea4\"&gt;\n      &lt;h2&gt;Tarea 4: Eliminar Elementos&lt;/h2&gt;\n      &lt;ul id=\"lista-eliminar\"&gt;\n        &lt;li class=\"item-lista\"&gt;Elemento A&lt;/li&gt;\n        &lt;li class=\"item-lista\"&gt;Elemento B&lt;/li&gt;\n        &lt;li class=\"item-lista\"&gt;Elemento C&lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;button onclick=\"eliminarElemento()\"&gt;Eliminar \u00daltimo Elemento&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;script&gt;\n    // Escribe tu c\u00f3digo JavaScript aqu\u00ed\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/p5s/#tareas","title":"Tareas","text":""},{"location":"content/p5s/#tarea-1-modificar-texto","title":"Tarea 1: Modificar Texto","text":"<p>Objetivo: Usar <code>getElementById</code> y <code>textContent</code> para cambiar el contenido de un elemento.</p> <ol> <li>Selecciona el elemento con <code>id=\"texto-inicial\"</code> usando <code>getElementById</code>.</li> <li>Implementa la funci\u00f3n <code>modificarTexto()</code> para que, al hacer clic en el bot\u00f3n \"Cambiar Texto\", el contenido del p\u00e1rrafo cambie a: \"\u00a1Texto modificado con \u00e9xito!\".</li> <li>Usa <code>textContent</code> para realizar el cambio (no uses <code>innerHTML</code>).</li> </ol> <p>Pista: - Usa <code>document.getElementById('texto-inicial')</code> para seleccionar el elemento. - Asigna el nuevo texto con <code>elemento.textContent = 'nuevo texto'</code>.</p>"},{"location":"content/p5s/#tarea-2-cambiar-estilos","title":"Tarea 2: Cambiar Estilos","text":"<p>Objetivo: Usar <code>querySelector</code> y la propiedad <code>style</code> para modificar los estilos de un elemento.</p> <ol> <li>Selecciona el elemento con <code>id=\"caja-estilo\"</code> usando <code>querySelector</code>.</li> <li>Implementa la funci\u00f3n <code>cambiarEstilo()</code> para que, al hacer clic en el bot\u00f3n \"Cambiar Estilo\", se apliquen los siguientes estilos:</li> <li>Fondo: azul (<code>backgroundColor: 'blue'</code>).</li> <li>Color de texto: blanco (<code>color: 'white'</code>).</li> <li>Relleno: 15px (<code>padding: '15px'</code>).</li> <li>Borde: 2px s\u00f3lido negro (<code>border: '2px solid black'</code>).</li> </ol> <p>Pista: - Usa <code>document.querySelector('#caja-estilo')</code> para seleccionar el elemento. - Modifica las propiedades de estilo con <code>elemento.style.propiedad = 'valor'</code>.</p>"},{"location":"content/p5s/#tarea-3-anadir-elementos","title":"Tarea 3: A\u00f1adir Elementos","text":"<p>Objetivo: Usar <code>createElement</code>, <code>textContent</code> y <code>appendChild</code> para a\u00f1adir un nuevo elemento a una lista.</p> <ol> <li>Selecciona la lista con <code>id=\"lista-dinamica\"</code> usando <code>querySelector</code>.</li> <li>Implementa la funci\u00f3n <code>agregarElemento()</code> para que, al hacer clic en el bot\u00f3n \"A\u00f1adir Elemento\":</li> <li>Cree un nuevo elemento <code>&lt;li&gt;</code> con <code>createElement</code>.</li> <li>Establezca su contenido de texto a \"Elemento X\" (donde X es el n\u00famero del nuevo elemento, empezando desde 3).</li> <li>A\u00f1ada la clase <code>item-lista</code> al nuevo elemento usando <code>classList.add('item-lista')</code>.</li> <li>A\u00f1ada el nuevo elemento a la lista con <code>appendChild</code>.</li> </ol> <p>Pista: - Usa <code>document.querySelectorAll('.item-lista')</code> para contar los elementos existentes y determinar el n\u00famero del nuevo elemento. - Crea el elemento con <code>document.createElement('li')</code>. - A\u00f1ade el elemento con <code>lista.appendChild(nuevoElemento)</code>.</p>"},{"location":"content/p5s/#tarea-4-eliminar-elementos","title":"Tarea 4: Eliminar Elementos","text":"<p>Objetivo: Usar <code>querySelectorAll</code> y <code>remove</code> para eliminar un elemento de una lista.</p> <ol> <li>Selecciona todos los elementos <code>&lt;li&gt;</code> dentro de la lista con <code>id=\"lista-eliminar\"</code> usando <code>querySelectorAll</code>.</li> <li>Implementa la funci\u00f3n <code>eliminarElemento()</code> para que, al hacer clic en el bot\u00f3n \"Eliminar \u00daltimo Elemento\":</li> <li>Elimine el \u00faltimo <code>&lt;li&gt;</code> de la lista.</li> <li>Si no hay elementos en la lista, muestra una alerta con el mensaje: \"No hay m\u00e1s elementos para eliminar\".</li> </ol> <p>Pista: - Usa <code>document.querySelectorAll('#lista-eliminar li')</code> para obtener los elementos. - Accede al \u00faltimo elemento con <code>elementos[elementos.length - 1]</code>. - Usa <code>elemento.remove()</code> para eliminar el elemento.</p>"},{"location":"content/p5s/#solucion-de-referencia","title":"Soluci\u00f3n de Referencia","text":"<p>A continuaci\u00f3n, se proporciona una soluci\u00f3n de referencia para todas las tareas. Intenta completar las tareas por tu cuenta antes de consultar esta soluci\u00f3n.</p> <pre><code>&lt;script&gt;\n  // Tarea 1: Modificar Texto\n  function modificarTexto() {\n    const texto = document.getElementById('texto-inicial');\n    texto.textContent = '\u00a1Texto modificado con \u00e9xito!';\n  }\n\n  // Tarea 2: Cambiar Estilos\n  function cambiarEstilo() {\n    const caja = document.querySelector('#caja-estilo');\n    caja.style.backgroundColor = 'blue';\n    caja.style.color = 'white';\n    caja.style.padding = '15px';\n    caja.style.border = '2px solid black';\n  }\n\n  // Tarea 3: A\u00f1adir Elementos\n  function agregarElemento() {\n    const lista = document.querySelector('#lista-dinamica');\n    const items = document.querySelectorAll('#lista-dinamica .item-lista');\n    const nuevoItem = document.createElement('li');\n    nuevoItem.textContent = `Elemento ${items.length + 1}`;\n    nuevoItem.classList.add('item-lista');\n    lista.appendChild(nuevoItem);\n  }\n\n  // Tarea 4: Eliminar Elementos\n  function eliminarElemento() {\n    const items = document.querySelectorAll('#lista-eliminar li');\n    if (items.length &gt; 0) {\n      items[items.length - 1].remove();\n    } else {\n      alert('No hay m\u00e1s elementos para eliminar');\n    }\n  }\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p5s/#preguntas-de-reflexion","title":"Preguntas de Reflexi\u00f3n","text":"<ol> <li>\u00bfCu\u00e1l es la diferencia entre <code>innerHTML</code> y <code>textContent</code>? \u00bfPor qu\u00e9 usamos <code>textContent</code> en la Tarea 1?</li> <li>\u00bfQu\u00e9 ventajas tiene <code>querySelector</code> frente a <code>getElementById</code>? \u00bfCu\u00e1ndo usar\u00edas uno u otro?</li> <li>\u00bfQu\u00e9 sucede si intentas eliminar un elemento de una lista vac\u00eda sin validar? \u00bfC\u00f3mo lo manejaste en la Tarea 4?</li> <li>\u00bfC\u00f3mo podr\u00edas mejorar esta actividad para que los nuevos elementos a\u00f1adidos en la Tarea 3 tengan estilos din\u00e1micos?</li> </ol>"},{"location":"content/p5s/#solucion-actividad-2","title":"Soluci\u00f3n actividad 2","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Conversor de Divisas&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #e0e7ff, #c7d2fe);\n            min-height: 100vh;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            margin: 0;\n        }\n        .converter {\n            background: #ffffff;\n            border-radius: 15px;\n            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\n            padding: 30px;\n            max-width: 500px;\n            width: 90%;\n            transition: transform 0.3s ease;\n        }\n        .converter:hover {\n            transform: translateY(-5px);\n        }\n        h2 {\n            color: #1e3a8a;\n            margin-bottom: 20px;\n            font-size: 1.8em;\n            text-align: center;\n        }\n        .input-group {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 10px;\n            justify-content: center;\n            align-items: center;\n            margin-bottom: 20px;\n        }\n        input, select {\n            padding: 12px;\n            font-size: 1em;\n            border: 1px solid #d1d5db;\n            border-radius: 8px;\n            outline: none;\n            transition: border-color 0.3s ease;\n        }\n        input:focus, select:focus {\n            border-color: #3b82f6;\n            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n        }\n        input {\n            width: 120px;\n        }\n        select {\n            width: 150px;\n            background: #f9fafb;\n        }\n        button {\n            background: #3b82f6;\n            color: white;\n            border: none;\n            padding: 12px 24px;\n            font-size: 1em;\n            border-radius: 8px;\n            cursor: pointer;\n            transition: background 0.3s ease, transform 0.2s ease;\n        }\n        button:hover {\n            background: #2563eb;\n            transform: scale(1.05);\n        }\n        button:active {\n            transform: scale(0.95);\n        }\n        #result {\n            margin-top: 20px;\n            font-size: 1.2em;\n            color: #1e3a8a;\n            font-weight: bold;\n            text-align: center;\n        }\n        @media (max-width: 480px) {\n            .converter {\n                padding: 20px;\n            }\n            input, select {\n                width: 100%;\n            }\n            .input-group {\n                flex-direction: column;\n            }\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"converter\"&gt;\n        &lt;h2&gt;Conversor de Divisas&lt;/h2&gt;\n        &lt;div class=\"input-group\"&gt;\n            &lt;input type=\"number\" id=\"amount\" placeholder=\"Cantidad\" min=\"0\"&gt;\n            &lt;select id=\"fromCurrency\"&gt;\n                &lt;option value=\"COP\"&gt;Pesos Colombianos (COP)&lt;/option&gt;\n                &lt;option value=\"USD\"&gt;D\u00f3lares (USD)&lt;/option&gt;\n                &lt;option value=\"EUR\"&gt;Euros (EUR)&lt;/option&gt;\n            &lt;/select&gt;\n            &lt;span&gt;a&lt;/span&gt;\n            &lt;select id=\"toCurrency\"&gt;\n                &lt;option value=\"COP\"&gt;Pesos Colombianos (COP)&lt;/option&gt;\n                &lt;option value=\"USD\"&gt;D\u00f3lares (USD)&lt;/option&gt;\n                &lt;option value=\"EUR\"&gt;Euros (EUR)&lt;/option&gt;\n            &lt;/select&gt;\n        &lt;/div&gt;\n        &lt;button onclick=\"convert()\"&gt;Convertir&lt;/button&gt;\n        &lt;div id=\"result\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        // Tasas de cambio fijas (actualizar seg\u00fan tasas reales)\n        const exchangeRates = {\n            COP: { USD: 0.00024, EUR: 0.00022 },\n            USD: { COP: 4200, EUR: 0.93 },\n            EUR: { COP: 4500, USD: 1.08 }\n        };\n\n        function convert() {\n            const amount = parseFloat(document.getElementById('amount').value);\n            const fromCurrency = document.getElementById('fromCurrency').value;\n            const toCurrency = document.getElementById('toCurrency').value;\n            const resultDiv = document.getElementById('result');\n\n            if (isNaN(amount) || amount &lt;= 0) {\n                resultDiv.innerHTML = \"Por favor, ingrese una cantidad v\u00e1lida.\";\n                return;\n            }\n\n            if (fromCurrency === toCurrency) {\n                resultDiv.innerHTML = `Resultado: ${amount.toFixed(2)} ${toCurrency}`;\n                return;\n            }\n\n            const rate = exchangeRates[fromCurrency][toCurrency];\n            const convertedAmount = amount * rate;\n            resultDiv.innerHTML = `Resultado: ${convertedAmount.toFixed(2)} ${toCurrency}`;\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/p6/","title":"M\u00e9todos As\u00edncronos y Fetch en JavaScript con Mockoon Playground","text":""},{"location":"content/p6/#introduccion","title":"Introducci\u00f3n","text":"<p>JavaScript es un lenguaje de programaci\u00f3n que, por naturaleza, es s\u00edncrono y de un solo hilo, lo que significa que ejecuta una tarea a la vez en un orden secuencial. Sin embargo, muchas operaciones, como solicitudes HTTP, acceso a bases de datos o lectura de archivos, son as\u00edncronas porque pueden tardar un tiempo indeterminado en completarse. Para manejar estas operaciones, JavaScript proporciona mecanismos como callbacks, promesas, y las palabras clave <code>async/await</code>, junto con la API moderna <code>fetch</code> para realizar solicitudes HTTP.</p> <p>En este documento, exploraremos en detalle:</p> <ol> <li>\u00bfQu\u00e9 es la programaci\u00f3n as\u00edncrona?</li> <li>Mecanismos para manejar asincron\u00eda en JavaScript:<ul> <li>Callbacks</li> <li>Promesas</li> <li>Async/Await</li> </ul> </li> <li>La API <code>fetch</code>: c\u00f3mo realizar solicitudes HTTP</li> <li>Uso de Mockoon Playground para probar APIs</li> <li>Ejemplos pr\u00e1cticos completos con Mockoon Playground</li> <li>Buenas pr\u00e1cticas y manejo de errores</li> </ol> <p>Los ejemplos utilizan el endpoint p\u00fablico de Mockoon Playground en <code>https://playground.mockoon.com/users</code>, que proporciona una API simulada para pruebas sin necesidad de configurar un servidor local.</p>"},{"location":"content/p6/#que-es-la-programacion-asincrona","title":"\u00bfQu\u00e9 es la programaci\u00f3n as\u00edncrona?","text":"<p>La programaci\u00f3n as\u00edncrona permite que el c\u00f3digo contin\u00fae ejecut\u00e1ndose mientras se espera que una operaci\u00f3n de larga duraci\u00f3n (como una solicitud HTTP) se complete, sin bloquear el hilo principal. Esto es crucial en aplicaciones web para mejorar la experiencia del usuario, ya que evita que la interfaz se \"congele\" mientras se espera una respuesta.</p> <p>JavaScript utiliza el event loop (bucle de eventos) para manejar operaciones as\u00edncronas. El event loop permite que las tareas as\u00edncronas se procesen en segundo plano y se ejecuten una vez que est\u00e9n listas, mientras el resto del c\u00f3digo sigue ejecut\u00e1ndose.</p>"},{"location":"content/p6/#mecanismos-para-manejar-asincronia-en-javascript","title":"Mecanismos para manejar asincron\u00eda en JavaScript","text":""},{"location":"content/p6/#1-callbacks","title":"1. Callbacks","text":"<p>Los callbacks son funciones que se pasan como argumentos a otras funciones y se ejecutan una vez que la operaci\u00f3n as\u00edncrona ha terminado. Aunque son un enfoque antiguo, es importante entenderlos porque son la base de los m\u00e9todos modernos.</p>"},{"location":"content/p6/#ejemplo-de-callback","title":"Ejemplo de callback","text":"<pre><code>function obtenerDatos(url, callback) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', url);\n  xhr.onload = function () {\n    if (xhr.status === 200) {\n      callback(null, JSON.parse(xhr.responseText));\n    } else {\n      callback(new Error('Error en la solicitud'), null);\n    }\n  };\n  xhr.onerror = function () {\n    callback(new Error('Error de red'), null);\n  };\n  xhr.send();\n}\n\nobtenerDatos('https://playground.mockoon.com/users', function (error, datos) {\n  if (error) {\n    console.error('Error:', error.message);\n    return;\n  }\n  console.log('Datos recibidos:', datos);\n});\n</code></pre> <p>Problema con callbacks: Cuando se anidan m\u00faltiples callbacks, se genera el problema conocido como \"callback hell\" o \"pir\u00e1mide de la fatalidad\", que hace que el c\u00f3digo sea dif\u00edcil de leer y mantener.</p>"},{"location":"content/p6/#2-promesas","title":"2. Promesas","text":"<p>Las promesas son objetos que representan la eventual finalizaci\u00f3n (o falla) de una operaci\u00f3n as\u00edncrona. Una promesa puede estar en uno de tres estados:</p> <ul> <li>Pending (pendiente): La operaci\u00f3n a\u00fan no se ha completado.</li> <li>Fulfilled (resuelta): La operaci\u00f3n se complet\u00f3 con \u00e9xito.</li> <li>Rejected (rechazada): La operaci\u00f3n fall\u00f3.</li> </ul>"},{"location":"content/p6/#estructura-de-una-promesa","title":"Estructura de una promesa","text":"<pre><code>const promesa = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    const exito = true;\n    if (exito) {\n      resolve('\u00a1Operaci\u00f3n exitosa!');\n    } else {\n      reject(new Error('Algo sali\u00f3 mal'));\n    }\n  }, 2000);\n});\n\npromesa\n  .then((resultado) =&gt; {\n    console.log(resultado); // \u00a1Operaci\u00f3n exitosa!\n  })\n  .catch((error) =&gt; {\n    console.error(error.message); // Algo sali\u00f3 mal\n  });\n</code></pre> <p>Las promesas permiten encadenar operaciones con <code>.then()</code> y manejar errores con <code>.catch()</code>, lo que mejora la legibilidad respecto a los callbacks.</p>"},{"location":"content/p6/#3-asyncawait","title":"3. Async/Await","text":"<p>La sintaxis <code>async/await</code> es una forma m\u00e1s moderna y legible de trabajar con promesas. Una funci\u00f3n marcada con la palabra clave <code>async</code> siempre devuelve una promesa, y dentro de ella se puede usar <code>await</code> para esperar a que una promesa se resuelva.</p>"},{"location":"content/p6/#ejemplo-de-asyncawait","title":"Ejemplo de async/await","text":"<pre><code>async function obtenerDatos() {\n  try {\n    const respuesta = await fetch('https://playground.mockoon.com/users');\n    if (!respuesta.ok) {\n      throw new Error(`Error HTTP: ${respuesta.status}`);\n    }\n    const datos = await respuesta.json();\n    console.log('Datos recibidos:', datos);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n}\n\nobtenerDatos();\n</code></pre> <p>Ventajas de async/await:</p> <ul> <li>C\u00f3digo m\u00e1s limpio y similar al s\u00edncrono.</li> <li>Mejor manejo de errores con bloques <code>try/catch</code>.</li> <li>Evita el encadenamiento excesivo de <code>.then()</code>.</li> </ul>"},{"location":"content/p6/#la-api-fetch","title":"La API <code>fetch</code>","text":"<p>La API <code>fetch</code> es una interfaz moderna de JavaScript que permite realizar solicitudes HTTP (como GET, POST, PUT, DELETE, etc.) de manera sencilla. Es m\u00e1s limpia que la antigua <code>XMLHttpRequest</code> y est\u00e1 basada en promesas.</p>"},{"location":"content/p6/#caracteristicas-de-fetch","title":"Caracter\u00edsticas de <code>fetch</code>","text":"<ul> <li>Basada en promesas: Devuelve una promesa que se resuelve en un objeto <code>Response</code>.</li> <li>Soporte para m\u00faltiples formatos: Puede manejar JSON, texto, blobs, etc.</li> <li>Configuraci\u00f3n flexible: Permite configurar headers, m\u00e9todos, cuerpos de solicitud, etc.</li> <li>No rechaza autom\u00e1ticamente en errores HTTP: A diferencia de otras APIs, <code>fetch</code> no rechaza la promesa en errores como <code>404</code> o <code>500</code>; en su lugar, devuelve un objeto <code>Response</code> con la propiedad <code>ok</code> en <code>false</code>.</li> </ul>"},{"location":"content/p6/#estructura-basica-de-una-solicitud-con-fetch","title":"Estructura b\u00e1sica de una solicitud con <code>fetch</code>","text":"<pre><code>fetch('https://playground.mockoon.com/users')\n  .then((respuesta) =&gt; {\n    if (!respuesta.ok) {\n      throw new Error(`Error HTTP: ${respuesta.status}`);\n    }\n    return respuesta.json();\n  })\n  .then((datos) =&gt; {\n    console.log('Datos:', datos);\n  })\n  .catch((error) =&gt; {\n    console.error('Error:', error.message);\n  });\n</code></pre> <p>Con async/await, la misma solicitud se escribir\u00eda as\u00ed:</p> <pre><code>async function obtenerDatos() {\n  try {\n    const respuesta = await fetch('https://playground.mockoon.com/users');\n    if (!respuesta.ok) {\n      throw new Error(`Error HTTP: ${respuesta.status}`);\n    }\n    const datos = await respuesta.json();\n    console.log('Datos:', datos);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n}\n\nobtenerDatos();\n</code></pre>"},{"location":"content/p6/#uso-de-mockoon-playground-para-probar-apis","title":"Uso de Mockoon Playground para probar APIs","text":"<p>Mockoon Playground es un servicio en l\u00ednea proporcionado por Mockoon que ofrece endpoints API simulados para pruebas r\u00e1pidas. El endpoint <code>https://playground.mockoon.com/users</code> devuelve una lista de usuarios en formato JSON, ideal para probar solicitudes HTTP sin necesidad de configurar un servidor local.</p>"},{"location":"content/p6/#caracteristicas-del-endpoint-httpsplaygroundmockooncomusers","title":"Caracter\u00edsticas del endpoint <code>https://playground.mockoon.com/users</code>","text":"<ul> <li>M\u00e9todo: GET</li> <li>Respuesta: Lista de usuarios en formato JSON, por ejemplo:   <pre><code>[\n  { \"id\": 1, \"name\": \"John Doe\", \"email\": \"john.doe@example.com\" },\n  { \"id\": 2, \"name\": \"Jane Smith\", \"email\": \"jane.smith@example.com\" }\n]\n</code></pre></li> <li>Limitaciones: El playground es de solo lectura (soporta principalmente GET). Solicitudes como POST o PUT no est\u00e1n habilitadas en este endpoint p\u00fablico.</li> </ul> <p>Debido a las limitaciones del playground, los ejemplos se centrar\u00e1n en solicitudes GET y simular\u00e1n escenarios de error (como tiempos de espera o fallos de red) en lugar de POST, ya que el endpoint no soporta escritura.</p>"},{"location":"content/p6/#ejemplos-practicos-completos-con-mockoon-playground","title":"Ejemplos pr\u00e1cticos completos con Mockoon Playground","text":"<p>A continuaci\u00f3n, presento ejemplos que utilizan <code>fetch</code> para interactuar con el endpoint <code>https://playground.mockoon.com/users</code>, combinando promesas, async/await y manejo de errores.</p>"},{"location":"content/p6/#ejemplo-1-solicitud-get-con-mockoon-playground","title":"Ejemplo 1: Solicitud GET con Mockoon Playground","text":"<p>Este ejemplo obtiene la lista de usuarios desde el endpoint <code>GET https://playground.mockoon.com/users</code>.</p> <pre><code>async function obtenerUsuariosPlayground() {\n  try {\n    const respuesta = await fetch('https://playground.mockoon.com/users');\n    if (!respuesta.ok) {\n      throw new Error(`Error HTTP: ${respuesta.status}`);\n    }\n    const usuarios = await respuesta.json();\n    console.log('Usuarios obtenidos desde Mockoon Playground:', usuarios);\n  } catch (error) {\n    console.error('Error al obtener usuarios:', error.message);\n  }\n}\n\nobtenerUsuariosPlayground();\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La solicitud se realiza al endpoint <code>https://playground.mockoon.com/users</code>.</li> <li>Se verifica si la respuesta es exitosa con <code>respuesta.ok</code>.</li> <li>Los datos JSON se procesan y se imprimen en la consola.</li> <li>Si hay un error de red (por ejemplo, falta de conexi\u00f3n), se captura en el bloque <code>catch</code>.</li> </ul> <p>Salida esperada (puede variar seg\u00fan el estado del playground):</p> <pre><code>Usuarios obtenidos desde Mockoon Playground: [\n  { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\n  { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' }\n]\n</code></pre>"},{"location":"content/p6/#ejemplo-2-simulacion-de-solicitud-post-nota-aclaratoria","title":"Ejemplo 2: Simulaci\u00f3n de solicitud POST (nota aclaratoria)","text":"<p>Dado que el endpoint <code>https://playground.mockoon.com/users</code> no soporta solicitudes POST, este ejemplo muestra c\u00f3mo se escribir\u00eda el c\u00f3digo si el endpoint lo permitiera, junto con una nota aclaratoria.</p> <pre><code>async function crearUsuarioPlayground() {\n  console.warn('Nota: El endpoint https://playground.mockoon.com/users no soporta POST. Este es un ejemplo ilustrativo.');\n  try {\n    const nuevoUsuario = {\n      name: 'Ana L\u00f3pez',\n      email: 'ana.lopez@example.com',\n    };\n\n    const respuesta = await fetch('https://playground.mockoon.com/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(nuevoUsuario),\n    });\n\n    if (!respuesta.ok) {\n      throw new Error(`Error HTTP: ${respuesta.status}`);\n    }\n\n    const usuarioCreado = await respuesta.json();\n    console.log('Usuario creado en Mockoon Playground:', usuarioCreado);\n  } catch (error) {\n    console.error('Error al crear usuario:', error.message);\n  }\n}\n\ncrearUsuarioPlayground();\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Este c\u00f3digo intenta enviar una solicitud POST, pero el endpoint del playground devolver\u00e1 un error (por ejemplo, 405 Method Not Allowed).</li> <li>La advertencia inicial aclara que el endpoint no soporta POST, y el ejemplo sirve como referencia para casos donde se use un endpoint que s\u00ed lo permita.</li> <li>Para probar solicitudes POST reales, se recomienda configurar un servidor Mockoon local o usar otra API que soporte escritura.</li> </ul> <p>Salida esperada: <pre><code>Nota: El endpoint https://playground.mockoon.com/users no soporta POST. Este es un ejemplo ilustrativo.\nError al crear usuario: Error HTTP: 405\n</code></pre></p>"},{"location":"content/p6/#ejemplo-3-manejo-de-errores-con-tiempo-de-espera","title":"Ejemplo 3: Manejo de errores con tiempo de espera","text":"<p>Este ejemplo implementa un tiempo de espera para la solicitud GET, simulando un escenario donde la respuesta del servidor es demasiado lenta.</p> <pre><code>async function fetchConTimeout(url, opciones, timeout = 5000) {\n  const controller = new AbortController();\n  const id = setTimeout(() =&gt; controller.abort(), timeout);\n\n  try {\n    const respuesta = await fetch(url, {\n      ...opciones,\n      signal: controller.signal,\n    });\n    clearTimeout(id);\n    if (!respuesta.ok) {\n      throw new Error(`Error HTTP: ${respuesta.status}`);\n    }\n    return respuesta;\n  } catch (error) {\n    clearTimeout(id);\n    throw error;\n  }\n}\n\nasync function obtenerUsuariosConTimeout() {\n  try {\n    const respuesta = await fetchConTimeout('https://playground.mockoon.com/users', {}, 3000);\n    const usuarios = await respuesta.json();\n    console.log('Usuarios obtenidos:', usuarios);\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Error: La solicitud excedi\u00f3 el tiempo l\u00edmite de 3 segundos');\n    } else {\n      console.error('Error:', error.message);\n    }\n  }\n}\n\nobtenerUsuariosConTimeout();\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La funci\u00f3n <code>fetchConTimeout</code> agrega un tiempo de espera a la solicitud usando <code>AbortController</code>.</li> <li>Si la solicitud tarda m\u00e1s de 3 segundos, se lanza un <code>AbortError</code>.</li> <li>Este ejemplo es \u00fatil para manejar APIs externas como el Mockoon Playground, donde los tiempos de respuesta pueden variar.</li> </ul> <p>Salida esperada (si la solicitud es r\u00e1pida): <pre><code>Usuarios obtenidos: [\n  { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\n  { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' }\n]\n</code></pre></p> <p>Salida esperada (si la solicitud excede el tiempo): <pre><code>Error: La solicitud excedi\u00f3 el tiempo l\u00edmite de 3 segundos\n</code></pre></p>"},{"location":"content/p6/#ejemplo-4-aplicacion-web-simple-con-mockoon-playground","title":"Ejemplo 4: Aplicaci\u00f3n web simple con Mockoon Playground","text":"<p>Este ejemplo crea una p\u00e1gina web que usa <code>fetch</code> para obtener usuarios desde <code>https://playground.mockoon.com/users</code> y muestra los resultados en el DOM.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Interfaz con Mockoon Playground&lt;/title&gt;\n  &lt;style&gt;\n    body { font-family: Arial, sans-serif; padding: 20px; }\n    #resultado { margin-top: 20px; }\n    button { padding: 10px; margin: 5px; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Interfaz con Mockoon Playground&lt;/h1&gt;\n  &lt;button onclick=\"obtenerUsuarios()\"&gt;Obtener Usuarios&lt;/button&gt;\n  &lt;div id=\"resultado\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n    async function obtenerUsuarios() {\n      try {\n        const respuesta = await fetch('https://playground.mockoon.com/users');\n        if (!respuesta.ok) {\n          throw new Error(`Error HTTP: ${respuesta.status}`);\n        }\n        const usuarios = await respuesta.json();\n        mostrarResultado('Usuarios:', usuarios);\n      } catch (error) {\n        mostrarResultado('Error:', error.message);\n      }\n    }\n\n    function mostrarResultado(titulo, datos) {\n      const resultadoDiv = document.getElementById('resultado');\n      resultadoDiv.innerHTML = `&lt;h2&gt;${titulo}&lt;/h2&gt;&lt;pre&gt;${JSON.stringify(datos, null, 2)}&lt;/pre&gt;`;\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Se crea una p\u00e1gina HTML con un bot\u00f3n para obtener usuarios desde <code>https://playground.mockoon.com/users</code>.</li> <li>La funci\u00f3n <code>obtenerUsuarios</code> usa <code>fetch</code> con async/await para realizar la solicitud.</li> <li>Los resultados o errores se muestran en el DOM usando la funci\u00f3n <code>mostrarResultado</code>.</li> <li>No se incluye un bot\u00f3n para POST debido a las limitaciones del endpoint.</li> </ul> <p>Instrucciones:</p> <ol> <li>Guarda el c\u00f3digo en un archivo <code>index.html</code>.</li> <li>Abre <code>index.html</code> en un navegador (puedes usar un servidor local como <code>Live Server</code> en VS Code para evitar problemas de CORS, aunque el endpoint de Mockoon Playground suele incluir headers CORS permisivos).</li> <li>Haz clic en el bot\u00f3n para ver la lista de usuarios.</li> </ol>"},{"location":"content/p6/#ejercicios-fetch-y-tabla-con-asyncawait","title":"Ejercicios Fetch y Tabla con Async/Await","text":""},{"location":"content/p6/#modelo-de-datos","title":"Modelo de Datos","text":"<pre><code>[\n  {\n    \"id\": 1,\n    \"name\": \"string\",\n    \"email\": \"string@domain.com\",\n    \"age\": 30\n  }\n]\n</code></pre>"},{"location":"content/p6/#ejercicio-1-cargar-usuarios-basicos","title":"Ejercicio 1: Cargar usuarios b\u00e1sicos","text":"<pre><code>&lt;table id=\"table1\"&gt;&lt;/table&gt;\n&lt;script&gt;\nasync function loadUsers1() {\n  try {\n    const res = await fetch('https://api.example.com/users');\n    const data = await res.json();\n    const table = document.getElementById('table1');\n    table.innerHTML = '&lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;/tr&gt;' +\n      data.map(user =&gt; `&lt;tr&gt;&lt;td&gt;${user.id}&lt;/td&gt;&lt;td&gt;${user.name}&lt;/td&gt;&lt;/tr&gt;`).join('');\n  } catch (err) {\n    console.error(err);\n  }\n}\nloadUsers1();\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p6/#ejercicio-2-mostrar-email-y-edad","title":"Ejercicio 2: Mostrar email y edad","text":"<pre><code>&lt;table id=\"table2\"&gt;&lt;/table&gt;\n&lt;script&gt;\nasync function loadUsers2() {\n  try {\n    const res = await fetch('https://api.example.com/users');\n    const data = await res.json();\n    const table = document.getElementById('table2');\n    table.innerHTML = '&lt;tr&gt;&lt;th&gt;Email&lt;/th&gt;&lt;th&gt;Age&lt;/th&gt;&lt;/tr&gt;' +\n      data.map(user =&gt; `&lt;tr&gt;&lt;td&gt;${user.email}&lt;/td&gt;&lt;td&gt;${user.age}&lt;/td&gt;&lt;/tr&gt;`).join('');\n  } catch (err) {\n    console.error(err);\n  }\n}\nloadUsers2();\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p6/#ejercicio-3-filtrar-mayores-de-25","title":"Ejercicio 3: Filtrar mayores de 25","text":"<pre><code>&lt;table id=\"table3\"&gt;&lt;/table&gt;\n&lt;script&gt;\nasync function loadUsers3() {\n  try {\n    const res = await fetch('https://api.example.com/users');\n    const data = await res.json();\n    const table = document.getElementById('table3');\n    table.innerHTML = '&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Age&lt;/th&gt;&lt;/tr&gt;' +\n      data\n        .filter(user =&gt; user.age &gt; 25)\n        .map(user =&gt; `&lt;tr&gt;&lt;td&gt;${user.name}&lt;/td&gt;&lt;td&gt;${user.age}&lt;/td&gt;&lt;/tr&gt;`).join('');\n  } catch (err) {\n    console.error(err);\n  }\n}\nloadUsers3();\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p6/#ejercicio-4-ordenar-por-nombre","title":"Ejercicio 4: Ordenar por nombre","text":"<pre><code>&lt;table id=\"table4\"&gt;&lt;/table&gt;\n&lt;script&gt;\nasync function loadUsers4() {\n  try {\n    const res = await fetch('https://api.example.com/users');\n    const data = await res.json();\n    const table = document.getElementById('table4');\n    table.innerHTML = '&lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;/tr&gt;' +\n      data\n        .sort((a, b) =&gt; a.name.localeCompare(b.name))\n        .map(user =&gt; `&lt;tr&gt;&lt;td&gt;${user.id}&lt;/td&gt;&lt;td&gt;${user.name}&lt;/td&gt;&lt;/tr&gt;`).join('');\n  } catch (err) {\n    console.error(err);\n  }\n}\nloadUsers4();\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p6/#ejercicio-5-manejo-de-errores","title":"Ejercicio 5: Manejo de errores","text":"<pre><code>&lt;table id=\"table5\"&gt;&lt;/table&gt;\n&lt;script&gt;\nasync function loadUsers5() {\n  try {\n    const res = await fetch('https://api.example.com/users');\n    const data = await res.json();\n    const table = document.getElementById('table5');\n    table.innerHTML = '&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;/tr&gt;' +\n      data.map(user =&gt; `&lt;tr&gt;&lt;td&gt;${user.name}&lt;/td&gt;&lt;td&gt;${user.email}&lt;/td&gt;&lt;/tr&gt;`).join('');\n  } catch (err) {\n    document.getElementById('table5').innerHTML = '&lt;tr&gt;&lt;td&gt;Error loading data&lt;/td&gt;&lt;/tr&gt;';\n  }\n}\nloadUsers5();\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p6/#tutorial-manipulacion-de-tablas-html-con-javascript","title":"Tutorial: Manipulaci\u00f3n de Tablas HTML con JavaScript","text":"<p>Este tutorial cubre todas las formas de manipular una tabla HTML ya creada utilizando JavaScript. Se asume que tienes una tabla b\u00e1sica en tu HTML y deseas modificarla din\u00e1micamente. El tutorial est\u00e1 estructurado para ser claro y pr\u00e1ctico, con ejemplos de c\u00f3digo que puedes probar directamente.</p>"},{"location":"content/p6/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Las tablas HTML (<code>&lt;table&gt;</code>) son elementos comunes para mostrar datos estructurados. JavaScript permite manipular estas tablas din\u00e1micamente, lo que incluye agregar, eliminar o modificar filas, celdas, contenido, estilos y atributos. Este tutorial utiliza el DOM (Document Object Model) para realizar estas operaciones.</p>"},{"location":"content/p6/#2-estructura-html-base","title":"2. Estructura HTML Base","text":"<p>Para los ejemplos, usaremos la siguiente tabla HTML:</p> <pre><code>&lt;table id=\"miTabla\" border=\"1\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Nombre&lt;/th&gt;\n      &lt;th&gt;Edad&lt;/th&gt;\n      &lt;th&gt;Ciudad&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Juan&lt;/td&gt;\n      &lt;td&gt;25&lt;/td&gt;\n      &lt;td&gt;Madrid&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Mar\u00eda&lt;/td&gt;\n      &lt;td&gt;30&lt;/td&gt;\n      &lt;td&gt;Barcelona&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <p>El atributo <code>id=\"miTabla\"</code> facilita la selecci\u00f3n de la tabla con JavaScript. Aseg\u00farate de incluir esta tabla en tu archivo HTML antes de ejecutar los scripts.</p>"},{"location":"content/p6/#3-seleccionar-una-tabla","title":"3. Seleccionar una Tabla","text":"<p>Para manipular una tabla, primero debes seleccionarla. Aqu\u00ed hay varias formas de hacerlo:</p> <pre><code>// Seleccionar por ID\nconst tabla = document.getElementById('miTabla');\n\n// Seleccionar por clase (si tiene class=\"tabla\")\nconst tablaPorClase = document.querySelector('.tabla');\n\n// Seleccionar todas las tablas\nconst todasLasTablas = document.getElementsByTagName('table');\n\n// Seleccionar la primera tabla\nconst primeraTabla = document.querySelector('table');\n</code></pre> <p>Nota: Usaremos <code>document.getElementById('miTabla')</code> en los ejemplos por simplicidad.</p>"},{"location":"content/p6/#4-manipular-filas","title":"4. Manipular Filas","text":"<p>Las filas de una tabla se representan con el elemento <code>&lt;tr&gt;</code>. Puedes agregar, eliminar o modificar filas en el <code>&lt;tbody&gt;</code> o <code>&lt;thead&gt;</code>.</p>"},{"location":"content/p6/#41-agregar-una-fila","title":"4.1 Agregar una Fila","text":"<p>Para agregar una fila al <code>&lt;tbody&gt;</code>:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst tbody = tabla.getElementsByTagName('tbody')[0];\nconst nuevaFila = tbody.insertRow(); // Inserta al final\n\n// Agregar celdas a la fila\nconst celda1 = nuevaFila.insertCell();\nconst celda2 = nuevaFila.insertCell();\nconst celda3 = nuevaFila.insertCell();\n\ncelda1.textContent = 'Pedro';\ncelda2.textContent = '28';\ncelda3.textContent = 'Sevilla';\n</code></pre> <p>Tambi\u00e9n puedes especificar el \u00edndice donde insertar la fila:</p> <pre><code>const nuevaFila = tbody.insertRow(0); // Inserta en la primera posici\u00f3n\n</code></pre>"},{"location":"content/p6/#42-eliminar-una-fila","title":"4.2 Eliminar una Fila","text":"<p>Para eliminar una fila espec\u00edfica:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst tbody = tabla.getElementsByTagName('tbody')[0];\ntbody.deleteRow(0); // Elimina la primera fila\n</code></pre> <p>Para eliminar todas las filas:</p> <pre><code>while (tbody.rows.length &gt; 0) {\n  tbody.deleteRow(0);\n}\n</code></pre>"},{"location":"content/p6/#43-modificar-una-fila","title":"4.3 Modificar una Fila","text":"<p>Para modificar el contenido de una fila existente:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst fila = tabla.rows[1]; // Segunda fila (\u00edndice 1)\nfila.cells[0].textContent = 'Ana'; // Cambia la primera celda\nfila.cells[1].textContent = '35';\nfila.cells[2].textContent = 'Valencia';\n</code></pre>"},{"location":"content/p6/#5-manipular-celdas","title":"5. Manipular Celdas","text":"<p>Las celdas se representan con <code>&lt;td&gt;</code> (o <code>&lt;th&gt;</code> en encabezados). Puedes manipularlas individualmente.</p>"},{"location":"content/p6/#51-agregar-una-celda","title":"5.1 Agregar una Celda","text":"<p>Para agregar una celda a una fila existente:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst fila = tabla.rows[1];\nconst nuevaCelda = fila.insertCell(); // Inserta al final\nnuevaCelda.textContent = 'Nueva Celda';\n</code></pre>"},{"location":"content/p6/#52-eliminar-una-celda","title":"5.2 Eliminar una Celda","text":"<p>Para eliminar una celda espec\u00edfica:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst fila = tabla.rows[1];\nfila.deleteCell(0); // Elimina la primera celda\n</code></pre>"},{"location":"content/p6/#53-modificar-una-celda","title":"5.3 Modificar una Celda","text":"<p>Para cambiar el contenido de una celda:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst celda = tabla.rows[1].cells[0];\ncelda.textContent = 'Modificado';\n</code></pre>"},{"location":"content/p6/#6-manipular-contenido-de-la-tabla","title":"6. Manipular Contenido de la Tabla","text":"<p>Adem\u00e1s de filas y celdas, puedes modificar el contenido, atributos y estilos de la tabla.</p>"},{"location":"content/p6/#61-cambiar-texto-o-html","title":"6.1 Cambiar Texto o HTML","text":"<p>Para cambiar el texto:</p> <pre><code>const celda = document.getElementById('miTabla').rows[1].cells[0];\ncelda.textContent = 'Nuevo Texto';\n</code></pre> <p>Para insertar HTML:</p> <pre><code>celda.innerHTML = '&lt;strong&gt;Texto en negrita&lt;/strong&gt;';\n</code></pre>"},{"location":"content/p6/#62-agregar-atributos","title":"6.2 Agregar Atributos","text":"<p>Para agregar o modificar atributos:</p> <pre><code>const tabla = document.getElementById('miTabla');\ntabla.setAttribute('class', 'tabla-estilizada');\ntabla.rows[1].cells[0].setAttribute('data-id', '123');\n</code></pre>"},{"location":"content/p6/#63-modificar-estilos","title":"6.3 Modificar Estilos","text":"<p>Para cambiar estilos con CSS:</p> <pre><code>const tabla = document.getElementById('miTabla');\ntabla.style.border = '2px solid blue';\ntabla.rows[1].cells[0].style.backgroundColor = 'yellow';\n</code></pre> <p>O usando clases CSS:</p> <pre><code>tabla.classList.add('borde-azul');\n</code></pre>"},{"location":"content/p6/#7-iterar-sobre-filas-y-celdas","title":"7. Iterar Sobre Filas y Celdas","text":"<p>Puedes recorrer todas las filas y celdas para realizar operaciones masivas:</p> <pre><code>const tabla = document.getElementById('miTabla');\nfor (let fila of tabla.rows) {\n  for (let celda of fila.cells) {\n    celda.style.backgroundColor = 'lightgray';\n  }\n}\n</code></pre>"},{"location":"content/p6/#8-manipular-encabezados-thead-y-cuerpo-tbody","title":"8. Manipular Encabezados (thead) y Cuerpo (tbody)","text":"<p>Para trabajar espec\u00edficamente con <code>&lt;thead&gt;</code> o <code>&lt;tbody&gt;</code>:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst thead = tabla.getElementsByTagName('thead')[0];\nconst tbody = tabla.getElementsByTagName('tbody')[0];\n\n// Agregar una fila al thead\nconst nuevaFilaThead = thead.insertRow();\nconst celdaThead = nuevaFilaThead.insertCell();\nceldaThead.textContent = 'Nuevo Encabezado';\n</code></pre>"},{"location":"content/p6/#9-ejemplo-completo","title":"9. Ejemplo Completo","text":"<p>Aqu\u00ed tienes un ejemplo completo que combina varias operaciones:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Manipulaci\u00f3n de Tablas&lt;/title&gt;\n  &lt;style&gt;\n    table { border-collapse: collapse; }\n    th, td { border: 1px solid black; padding: 8px; }\n    .resaltado { background-color: yellow; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;table id=\"miTabla\"&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Nombre&lt;/th&gt;\n        &lt;th&gt;Edad&lt;/th&gt;\n        &lt;th&gt;Ciudad&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Juan&lt;/td&gt;\n        &lt;td&gt;25&lt;/td&gt;\n        &lt;td&gt;Madrid&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Mar\u00eda&lt;/td&gt;\n        &lt;td&gt;30&lt;/td&gt;\n        &lt;td&gt;Barcelona&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n\n  &lt;script&gt;\n    const tabla = document.getElementById('miTabla');\n    const tbody = tabla.getElementsByTagName('tbody')[0];\n\n    // Agregar una fila\n    const nuevaFila = tbody.insertRow();\n    nuevaFila.insertCell().textContent = 'Pedro';\n    nuevaFila.insertCell().textContent = '28';\n    nuevaFila.insertCell().textContent = 'Sevilla';\n\n    // Modificar una celda\n    tabla.rows[1].cells[0].textContent = 'Ana';\n\n    // Resaltar filas pares\n    for (let i = 0; i &lt; tbody.rows.length; i++) {\n      if (i % 2 === 0) {\n        tbody.rows[i].classList.add('resaltado');\n      }\n    }\n\n    // Eliminar la segunda fila\n    tbody.deleteRow(1);\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/p6/#actividad-consumo-de-la-api-de-peliculas-con-mockoon-playground-post-y-put-habilitados","title":"Actividad: Consumo de la API de Pel\u00edculas con Mockoon Playground (POST y PUT habilitados)","text":""},{"location":"content/p6/#introduccion_1","title":"Introducci\u00f3n","text":"<p>En esta actividad, practicar\u00e1s el uso de m\u00e9todos as\u00edncronos en JavaScript, espec\u00edficamente la API <code>fetch</code> y la sintaxis <code>async/await</code>, para interactuar con el endpoint p\u00fablico de Mockoon Playground en <code>https://playground.mockoon.com/movies</code>. Este endpoint devuelve una lista de pel\u00edculas en formato JSON y soporta solicitudes GET, POST y PUT, lo que permite realizar operaciones de lectura, creaci\u00f3n y actualizaci\u00f3n de pel\u00edculas.</p> <p>La actividad est\u00e1 dise\u00f1ada para reforzar tus habilidades en:</p> <ul> <li>Realizar solicitudes HTTP (GET, POST, PUT) usando <code>fetch</code>.</li> <li>Manejar respuestas as\u00edncronas con <code>async/await</code>.</li> <li>Procesar datos JSON y mostrarlos en una interfaz web.</li> <li>Implementar manejo de errores para escenarios como fallos de red o respuestas no exitosas.</li> </ul>"},{"location":"content/p6/#objetivos","title":"Objetivos","text":"<ol> <li>Realizar una solicitud GET al endpoint <code>https://playground.mockoon.com/movies</code> para obtener una lista de pel\u00edculas.</li> <li>Crear una nueva pel\u00edcula usando una solicitud POST con un objeto JSON proporcionado.</li> <li>Actualizar una pel\u00edcula existente usando una solicitud PUT.</li> <li>Crear una p\u00e1gina web que muestre la lista de pel\u00edculas en una tabla HTML y permita crear o actualizar pel\u00edculas.</li> <li>Implementar manejo de errores para mostrar mensajes al usuario en caso de fallos.</li> </ol>"},{"location":"content/p6/#requisitos-previos","title":"Requisitos previos","text":"<ul> <li>Conocimientos b\u00e1sicos de HTML, CSS y JavaScript.</li> <li>Comprensi\u00f3n de promesas y <code>async/await</code> en JavaScript.</li> <li>Un navegador web moderno (como Chrome o Firefox).</li> <li>Un editor de c\u00f3digo (como VS Code) y, opcionalmente, una extensi\u00f3n como Live Server para servir la p\u00e1gina HTML localmente.</li> </ul>"},{"location":"content/p6/#descripcion-del-endpoint","title":"Descripci\u00f3n del endpoint","text":"<p>El endpoint <code>https://playground.mockoon.com/movies</code> es un servicio p\u00fablico de Mockoon Playground que simula una API de pel\u00edculas. Sus caracter\u00edsticas son:</p> <ul> <li> <p>M\u00e9todo GET:</p> <ul> <li>URL: <code>https://playground.mockoon.com/movies</code></li> <li>Respuesta: Un arreglo de objetos JSON con informaci\u00f3n de pel\u00edculas, por ejemplo:   <pre><code>[\n  {\n    \"id\": 1,\n    \"title\": \"The Shawshank Redemption\",\n    \"year\": 1994,\n    \"director\": \"Frank Darabont\",\n    \"genre\": \"Drama\",\n    \"rating\": 9.3,\n    \"isPopular\": true\n  },\n  {\n    \"id\": 2,\n    \"title\": \"The Godfather\",\n    \"year\": 1972,\n    \"director\": \"Francis Ford Coppola\",\n    \"genre\": \"Crime\",\n    \"rating\": 9.2,\n    \"isPopular\": true\n  }\n]\n</code></pre></li> </ul> </li> <li> <p>M\u00e9todo POST:</p> <ul> <li>URL: <code>https://playground.mockoon.com/movies</code></li> <li>Cuerpo: Objeto JSON con los campos <code>title</code>, <code>year</code>, <code>director</code>, <code>genre</code>, <code>rating</code>, <code>isPopular</code>.</li> <li>Respuesta: Devuelve el objeto creado con un <code>id</code> asignado por la API.</li> </ul> </li> <li> <p>M\u00e9todo PUT:</p> <ul> <li>URL: <code>https://playground.mockoon.com/movies/:id</code> (por ejemplo, <code>https://playground.mockoon.com/movies/1</code>)</li> <li>Cuerpo: Objeto JSON con los campos a actualizar.</li> <li>Respuesta: Devuelve el objeto actualizado.</li> </ul> </li> <li> <p>Notas: El endpoint es p\u00fablico y soporta CORS, por lo que no requiere configuraci\u00f3n adicional para pruebas desde un navegador.</p> </li> </ul>"},{"location":"content/p6/#instrucciones","title":"Instrucciones","text":"<p>Sigue estos pasos para completar la actividad:</p> <ol> <li> <p>Crea la estructura HTML:</p> <ul> <li>Crea un archivo <code>index.html</code> con una interfaz que incluya:<ul> <li>Un bot\u00f3n para cargar la lista de pel\u00edculas (GET).</li> <li>Un formulario para crear una nueva pel\u00edcula (POST).</li> <li>Un formulario para actualizar una pel\u00edcula existente (PUT).</li> <li>Una tabla para mostrar las pel\u00edculas.</li> <li>Un \u00e1rea para mostrar mensajes de error.</li> </ul> </li> <li>A\u00f1ade estilos CSS para que la interfaz sea clara y legible.</li> </ul> </li> <li> <p>Implementa la l\u00f3gica JavaScript:</p> <ul> <li>Escribe funciones as\u00edncronas para:<ul> <li>Obtener la lista de pel\u00edculas (<code>GET</code>).</li> <li>Crear una nueva pel\u00edcula (<code>POST</code>) usando el objeto JSON corregido.</li> <li>Actualizar una pel\u00edcula existente (<code>PUT</code>).</li> </ul> </li> <li>Usa <code>fetch</code> con <code>async/await</code> y maneja errores con <code>try/catch</code>.</li> <li>Actualiza din\u00e1micamente la tabla con los resultados.</li> </ul> </li> <li> <p>Prueba la aplicaci\u00f3n:</p> <ul> <li>Abre <code>index.html</code> en un navegador (usa un servidor local si es necesario).</li> <li>Prueba cargar las pel\u00edculas, crear una nueva pel\u00edcula y actualizar una existente.</li> <li>Simula errores (por ejemplo, enviando un ID inv\u00e1lido en PUT) para verificar el manejo de errores.</li> </ul> </li> </ol>"},{"location":"content/p6/#plantilla-inicial","title":"Plantilla inicial","text":"<p>Aqu\u00ed tienes una plantilla inicial para <code>index.html</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Soluci\u00f3n: Gesti\u00f3n de Pel\u00edculas&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      font-family: Arial, sans-serif;\n      padding: 20px;\n      max-width: 900px;\n      margin: 0 auto;\n    }\n    h1, h2 {\n      color: #333;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      margin-top: 20px;\n    }\n    th, td {\n      border: 1px solid #ddd;\n      padding: 10px;\n      text-align: left;\n    }\n    th {\n      background-color: #f2f2f2;\n      cursor: pointer;\n    }\n    tr:nth-child(even) {\n      background-color: #f9f9f9;\n    }\n    #error, #exito {\n      margin-top: 10px;\n      padding: 10px;\n      border-radius: 5px;\n    }\n    #error {\n      color: red;\n      background-color: #ffe6e6;\n    }\n    #exito {\n      color: green;\n      background-color: #e6ffe6;\n    }\n    #loading {\n      color: #007bff;\n      font-weight: bold;\n      margin-top: 10px;\n    }\n    button, input[type=\"submit\"] {\n      padding: 10px 20px;\n      background-color: #007bff;\n      color: white;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      margin: 5px;\n    }\n    button:hover, input[type=\"submit\"]:hover {\n      background-color: #0056b3;\n    }\n    form {\n      margin: 20px 0;\n      padding: 15px;\n      background-color: #f8f8f8;\n      border-radius: 5px;\n    }\n    label {\n      display: block;\n      margin: 8px 0;\n    }\n    input[type=\"text\"], input[type=\"number\"] {\n      padding: 8px;\n      width: 100%;\n      max-width: 300px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n    }\n    input[type=\"checkbox\"] {\n      margin-left: 10px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Gesti\u00f3n de Pel\u00edculas&lt;/h1&gt;\n  &lt;button onclick=\"cargarPeliculas()\"&gt;Cargar Pel\u00edculas&lt;/button&gt;\n  &lt;div id=\"loading\" style=\"display: none;\"&gt;Cargando...&lt;/div&gt;\n\n  &lt;h2&gt;Crear Nueva Pel\u00edcula&lt;/h2&gt;\n  &lt;form id=\"form-crear\" onsubmit=\"event.preventDefault(); crearPelicula();\"&gt;\n    &lt;label&gt;T\u00edtulo: &lt;input type=\"text\" id=\"crear-titulo\" required&gt;&lt;/label&gt;\n    &lt;label&gt;G\u00e9nero: &lt;input type=\"text\" id=\"crear-genero\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Director: &lt;input type=\"text\" id=\"crear-director\" required&gt;&lt;/label&gt;\n    &lt;label&gt;A\u00f1o: &lt;input type=\"number\" id=\"crear-anio\" min=\"1888\" max=\"2025\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Calificaci\u00f3n: &lt;input type=\"number\" id=\"crear-rating\" step=\"0.1\" min=\"0\" max=\"10\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Popular: &lt;input type=\"checkbox\" id=\"crear-popular\"&gt;&lt;/label&gt;\n    &lt;input type=\"submit\" value=\"Crear Pel\u00edcula\"&gt;\n  &lt;/form&gt;\n\n  &lt;h2&gt;Actualizar Pel\u00edcula&lt;/h2&gt;\n  &lt;form id=\"form-actualizar\" onsubmit=\"event.preventDefault(); actualizarPelicula();\"&gt;\n    &lt;label&gt;ID: &lt;input type=\"text\" id=\"actualizar-id\" required&gt;&lt;/label&gt;\n    &lt;label&gt;T\u00edtulo: &lt;input type=\"text\" id=\"actualizar-titulo\" required&gt;&lt;/label&gt;\n    &lt;label&gt;G\u00e9nero: &lt;input type=\"text\" id=\"actualizar-genero\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Director: &lt;input type=\"text\" id=\"actualizar-director\" required&gt;&lt;/label&gt;\n    &lt;label&gt;A\u00f1o: &lt;input type=\"number\" id=\"actualizar-anio\" min=\"1888\" max=\"2025\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Calificaci\u00f3n: &lt;input type=\"number\" id=\"actualizar-rating\" step=\"0.1\" min=\"0\" max=\"10\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Popular: &lt;input type=\"checkbox\" id=\"actualizar-popular\"&gt;&lt;/label&gt;\n    &lt;input type=\"submit\" value=\"Actualizar Pel\u00edcula\"&gt;\n  &lt;/form&gt;\n\n  &lt;table id=\"tabla-peliculas\"&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;ID&lt;/th&gt;\n        &lt;th&gt;T\u00edtulo&lt;/th&gt;\n        &lt;th&gt;G\u00e9nero&lt;/th&gt;\n        &lt;th&gt;Director&lt;/th&gt;\n        &lt;th&gt;A\u00f1o&lt;/th&gt;\n        &lt;th&gt;Calificaci\u00f3n&lt;/th&gt;\n        &lt;th&gt;Popular&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody id=\"cuerpo-tabla\"&gt;&lt;/tbody&gt;\n  &lt;/table&gt;\n  &lt;div id=\"exito\"&gt;&lt;/div&gt;\n  &lt;div id=\"error\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n\n\n    // Cargar pel\u00edculas (GET)\n    async function cargarPeliculas() {\n\n    }\n\n    // Crear pel\u00edcula (POST)\n    async function crearPelicula() {\n\n    }\n\n    // Actualizar pel\u00edcula (PUT)\n    async function actualizarPelicula() {\n\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/p6/#solucion","title":"Soluci\u00f3n","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Soluci\u00f3n: Gesti\u00f3n de Pel\u00edculas&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      font-family: Arial, sans-serif;\n      padding: 20px;\n      max-width: 900px;\n      margin: 0 auto;\n    }\n    h1, h2 {\n      color: #333;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      margin-top: 20px;\n    }\n    th, td {\n      border: 1px solid #ddd;\n      padding: 10px;\n      text-align: left;\n    }\n    th {\n      background-color: #f2f2f2;\n      cursor: pointer;\n    }\n    tr:nth-child(even) {\n      background-color: #f9f9f9;\n    }\n    #error, #exito {\n      margin-top: 10px;\n      padding: 10px;\n      border-radius: 5px;\n    }\n    #error {\n      color: red;\n      background-color: #ffe6e6;\n    }\n    #exito {\n      color: green;\n      background-color: #e6ffe6;\n    }\n    #loading {\n      color: #007bff;\n      font-weight: bold;\n      margin-top: 10px;\n    }\n    button, input[type=\"submit\"] {\n      padding: 10px 20px;\n      background-color: #007bff;\n      color: white;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      margin: 5px;\n    }\n    button:hover, input[type=\"submit\"]:hover {\n      background-color: #0056b3;\n    }\n    form {\n      margin: 20px 0;\n      padding: 15px;\n      background-color: #f8f8f8;\n      border-radius: 5px;\n    }\n    label {\n      display: block;\n      margin: 8px 0;\n    }\n    input[type=\"text\"], input[type=\"number\"] {\n      padding: 8px;\n      width: 100%;\n      max-width: 300px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n    }\n    input[type=\"checkbox\"] {\n      margin-left: 10px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Gesti\u00f3n de Pel\u00edculas&lt;/h1&gt;\n  &lt;button onclick=\"cargarPeliculas()\"&gt;Cargar Pel\u00edculas&lt;/button&gt;\n  &lt;div id=\"loading\" style=\"display: none;\"&gt;Cargando...&lt;/div&gt;\n\n  &lt;h2&gt;Crear Nueva Pel\u00edcula&lt;/h2&gt;\n  &lt;form id=\"form-crear\" onsubmit=\"event.preventDefault(); crearPelicula();\"&gt;\n    &lt;label&gt;T\u00edtulo: &lt;input type=\"text\" id=\"crear-titulo\" required&gt;&lt;/label&gt;\n    &lt;label&gt;G\u00e9nero: &lt;input type=\"text\" id=\"crear-genero\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Director: &lt;input type=\"text\" id=\"crear-director\" required&gt;&lt;/label&gt;\n    &lt;label&gt;A\u00f1o: &lt;input type=\"number\" id=\"crear-anio\" min=\"1888\" max=\"2025\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Calificaci\u00f3n: &lt;input type=\"number\" id=\"crear-rating\" step=\"0.1\" min=\"0\" max=\"10\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Popular: &lt;input type=\"checkbox\" id=\"crear-popular\"&gt;&lt;/label&gt;\n    &lt;input type=\"submit\" value=\"Crear Pel\u00edcula\"&gt;\n  &lt;/form&gt;\n\n  &lt;h2&gt;Actualizar Pel\u00edcula&lt;/h2&gt;\n  &lt;form id=\"form-actualizar\" onsubmit=\"event.preventDefault(); actualizarPelicula();\"&gt;\n    &lt;label&gt;ID: &lt;input type=\"text\" id=\"actualizar-id\" required&gt;&lt;/label&gt;\n    &lt;label&gt;T\u00edtulo: &lt;input type=\"text\" id=\"actualizar-titulo\" required&gt;&lt;/label&gt;\n    &lt;label&gt;G\u00e9nero: &lt;input type=\"text\" id=\"actualizar-genero\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Director: &lt;input type=\"text\" id=\"actualizar-director\" required&gt;&lt;/label&gt;\n    &lt;label&gt;A\u00f1o: &lt;input type=\"number\" id=\"actualizar-anio\" min=\"1888\" max=\"2025\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Calificaci\u00f3n: &lt;input type=\"number\" id=\"actualizar-rating\" step=\"0.1\" min=\"0\" max=\"10\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Popular: &lt;input type=\"checkbox\" id=\"actualizar-popular\"&gt;&lt;/label&gt;\n    &lt;input type=\"submit\" value=\"Actualizar Pel\u00edcula\"&gt;\n  &lt;/form&gt;\n\n  &lt;table id=\"tabla-peliculas\"&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;ID&lt;/th&gt;\n        &lt;th&gt;T\u00edtulo&lt;/th&gt;\n        &lt;th&gt;G\u00e9nero&lt;/th&gt;\n        &lt;th&gt;Director&lt;/th&gt;\n        &lt;th&gt;A\u00f1o&lt;/th&gt;\n        &lt;th&gt;Calificaci\u00f3n&lt;/th&gt;\n        &lt;th&gt;Popular&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody id=\"cuerpo-tabla\"&gt;&lt;/tbody&gt;\n  &lt;/table&gt;\n  &lt;div id=\"exito\"&gt;&lt;/div&gt;\n  &lt;div id=\"error\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n    // Funci\u00f3n auxiliar para mostrar mensajes temporales\n    function mostrarMensaje(tipo, mensaje) {\n      const div = document.getElementById(tipo);\n      div.textContent = mensaje;\n      setTimeout(() =&gt; div.textContent = '', 5000);\n    }\n\n    // Cargar pel\u00edculas (GET)\n    async function cargarPeliculas() {\n      const tablaCuerpo = document.getElementById('cuerpo-tabla');\n      const errorDiv = document.getElementById('error');\n      const exitoDiv = document.getElementById('exito');\n      const loadingDiv = document.getElementById('loading');\n\n      tablaCuerpo.innerHTML = '';\n      errorDiv.textContent = '';\n      exitoDiv.textContent = '';\n      loadingDiv.style.display = 'block';\n\n      try {\n        const respuesta = await fetch('https://playground.mockoon.com/movies', {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n        if (!respuesta.ok) {\n          throw new Error(`Error HTTP: ${respuesta.status}`);\n        }\n        const peliculas = await respuesta.json();\n        peliculas.forEach(pelicula =&gt; {\n          const fila = document.createElement('tr');\n          fila.innerHTML = `\n            &lt;td&gt;${pelicula.id}&lt;/td&gt;\n            &lt;td&gt;${pelicula.title}&lt;/td&gt;\n            &lt;td&gt;${pelicula.genre}&lt;/td&gt;\n            &lt;td&gt;${pelicula.director}&lt;/td&gt;\n            &lt;td&gt;${pelicula.year}&lt;/td&gt;\n            &lt;td&gt;${pelicula.rating}&lt;/td&gt;\n            &lt;td&gt;${pelicula.isPopular ? 'S\u00ed' : 'No'}&lt;/td&gt;\n          `;\n          tablaCuerpo.appendChild(fila);\n        });\n        mostrarMensaje('exito', 'Pel\u00edculas cargadas correctamente');\n      } catch (error) {\n        mostrarMensaje('error', `Error al cargar las pel\u00edculas: ${error.message}`);\n      } finally {\n        loadingDiv.style.display = 'none';\n      }\n    }\n\n    // Crear pel\u00edcula (POST)\n    async function crearPelicula() {\n      const tablaCuerpo = document.getElementById('cuerpo-tabla');\n      const errorDiv = document.getElementById('error');\n      const exitoDiv = document.getElementById('exito');\n      const loadingDiv = document.getElementById('loading');\n\n      errorDiv.textContent = '';\n      exitoDiv.textContent = '';\n      loadingDiv.style.display = 'block';\n\n      try {\n        const anio = parseInt(document.getElementById('crear-anio').value);\n        if (anio &lt; 1888 || anio &gt; 2025) {\n          throw new Error('El a\u00f1o debe estar entre 1888 y 2025');\n        }\n        const rating = parseFloat(document.getElementById('crear-rating').value);\n        if (rating &lt; 0 || rating &gt; 10) {\n          throw new Error('La calificaci\u00f3n debe estar entre 0 y 10');\n        }\n\n        const nuevaPelicula = {\n          title: document.getElementById('crear-titulo').value.trim(),\n          genre: document.getElementById('crear-genero').value.trim(),\n          director: document.getElementById('crear-director').value.trim(),\n          year: anio,\n          rating: rating,\n          isPopular: document.getElementById('crear-popular').checked\n        };\n\n        const respuesta = await fetch('https://playground.mockoon.com/movies', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify(nuevaPelicula)\n        });\n\n        if (!respuesta.ok) {\n          throw new Error(`Error HTTP: ${respuesta.status}`);\n        }\n\n        const peliculaCreada = await respuesta.json();\n        const fila = document.createElement('tr');\n        fila.innerHTML = `\n          &lt;td&gt;${peliculaCreada.id}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.title}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.genre}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.director}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.year}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.rating}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.isPopular ? 'S\u00ed' : 'No'}&lt;/td&gt;\n        `;\n        tablaCuerpo.appendChild(fila);\n        document.getElementById('form-crear').reset();\n        mostrarMensaje('exito', 'Pel\u00edcula creada correctamente');\n      } catch (error) {\n        mostrarMensaje('error', `Error al crear la pel\u00edcula: ${error.message}`);\n      } finally {\n        loadingDiv.style.display = 'none';\n      }\n    }\n\n    // Actualizar pel\u00edcula (PUT)\n    async function actualizarPelicula() {\n      const tablaCuerpo = document.getElementById('cuerpo-tabla');\n      const errorDiv = document.getElementById('error');\n      const exitoDiv = document.getElementById('exito');\n      const loadingDiv = document.getElementById('loading');\n\n      errorDiv.textContent = '';\n      exitoDiv.textContent = '';\n      loadingDiv.style.display = 'block';\n\n      try {\n        const id = document.getElementById('actualizar-id').value.trim();\n        const anio = parseInt(document.getElementById('actualizar-anio').value);\n        if (anio &lt; 1888 || anio &gt; 2025) {\n          throw new Error('El a\u00f1o debe estar entre 1888 y 2025');\n        }\n        const rating = parseFloat(document.getElementById('actualizar-rating').value);\n        if (rating &lt; 0 || rating &gt; 10) {\n          throw new Error('La calificaci\u00f3n debe estar entre 0 y 10');\n        }\n\n        const peliculaActualizada = {\n          title: document.getElementById('actualizar-titulo').value.trim(),\n          genre: document.getElementById('actualizar-genero').value.trim(),\n          director: document.getElementById('actualizar-director').value.trim(),\n          year: anio,\n          rating: rating,\n          isPopular: document.getElementById('actualizar-popular').checked\n        };\n\n        const respuesta = await fetch(`https://playground.mockoon.com/movies/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify(peliculaActualizada)\n        });\n\n        if (!respuesta.ok) {\n          throw new Error(`Error HTTP: ${respuesta.status}`);\n        }\n\n        await cargarPeliculas(); // Recargar la lista para reflejar los cambios\n        document.getElementById('form-actualizar').reset();\n        mostrarMensaje('exito', 'Pel\u00edcula actualizada correctamente');\n      } catch (error) {\n        mostrarMensaje('error', `Error al actualizar la pel\u00edcula: ${error.message}`);\n      } finally {\n        loadingDiv.style.display = 'none';\n      }\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/p6/#tareas-a-completar","title":"Tareas a completar","text":"<ol> <li> <p>Implementa la funci\u00f3n <code>cargarPeliculas</code>:</p> <ul> <li>Usa <code>fetch</code> con <code>async/await</code> para obtener las pel\u00edculas de <code>https://playground.mockoon.com/movies</code>.</li> <li>Verifica que la respuesta sea exitosa (<code>response.ok</code>).</li> <li>Rellena la tabla con los datos obtenidos.</li> </ul> </li> <li> <p>Implementa la funci\u00f3n <code>crearPelicula</code>:</p> <ul> <li>Obt\u00e9n los datos del formulario de creaci\u00f3n.</li> <li>Env\u00eda una solicitud POST con el objeto JSON corregido.</li> <li>Actualiza la tabla con la nueva pel\u00edcula.</li> </ul> </li> <li> <p>Implementa la funci\u00f3n <code>actualizarPelicula</code>:</p> <ul> <li>Obt\u00e9n los datos del formulario de actualizaci\u00f3n, incluyendo el ID.</li> <li>Env\u00eda una solicitud PUT al endpoint <code>https://playground.mockoon.com/movies/:id</code>.</li> <li>Actualiza la tabla con los datos modificados.</li> </ul> </li> </ol>"},{"location":"content/p6s/","title":"Soluci\u00f3n Completa: Gesti\u00f3n de Pel\u00edculas con Mockoon Playground","text":""},{"location":"content/p6s/#introduccion","title":"Introducci\u00f3n","text":"<p>Esta es la soluci\u00f3n completa para la actividad que consiste en interactuar con el endpoint <code>https://playground.mockoon.com/movies</code> de Mockoon Playground, utilizando la API <code>fetch</code> y la sintaxis <code>async/await</code> en JavaScript. La aplicaci\u00f3n permite:</p> <ul> <li>Cargar una lista de pel\u00edculas (GET).</li> <li>Crear una nueva pel\u00edcula (POST) usando el objeto JSON corregido.</li> <li>Actualizar una pel\u00edcula existente (PUT).</li> <li>Mostrar los resultados en una tabla HTML.</li> <li>Manejar errores y mostrar un indicador de carga.</li> </ul> <p>El c\u00f3digo est\u00e1 dise\u00f1ado para ser claro, robusto, y seguir buenas pr\u00e1cticas, incluyendo validaciones de datos, manejo de errores, y una interfaz amigable.</p>"},{"location":"content/p6s/#descripcion-del-endpoint","title":"Descripci\u00f3n del endpoint","text":"<p>El endpoint <code>https://playground.mockoon.com/movies</code> soporta:</p> <ul> <li>GET: <code>https://playground.mockoon.com/movies</code></li> <li> <p>Devuelve una lista de pel\u00edculas en formato JSON, por ejemplo:     <pre><code>[\n  {\n    \"id\": 1,\n    \"title\": \"The Shawshank Redemption\",\n    \"year\": 1994,\n    \"director\": \"Frank Darabont\",\n    \"genre\": \"Drama\",\n    \"rating\": 9.3,\n    \"isPopular\": true\n  },\n  ...\n]\n</code></pre></p> </li> <li> <p>POST: <code>https://playground.mockoon.com/movies</code></p> </li> <li>Acepta un objeto JSON con los campos <code>title</code>, <code>year</code>, <code>director</code>, <code>genre</code>, <code>rating</code>, <code>isPopular</code>.</li> <li> <p>Devuelve la pel\u00edcula creada con un <code>id</code> asignado.</p> </li> <li> <p>PUT: <code>https://playground.mockoon.com/movies/:id</code></p> </li> <li>Actualiza la pel\u00edcula con el <code>id</code> especificado.</li> <li>Devuelve la pel\u00edcula actualizada.</li> </ul>"},{"location":"content/p6s/#solucion-completa","title":"Soluci\u00f3n completa","text":"<p>A continuaci\u00f3n, se presenta el c\u00f3digo completo para <code>index.html</code>, que incluye HTML, CSS y JavaScript.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Soluci\u00f3n: Gesti\u00f3n de Pel\u00edculas&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      font-family: Arial, sans-serif;\n      padding: 20px;\n      max-width: 900px;\n      margin: 0 auto;\n    }\n    h1, h2 {\n      color: #333;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      margin-top: 20px;\n    }\n    th, td {\n      border: 1px solid #ddd;\n      padding: 10px;\n      text-align: left;\n    }\n    th {\n      background-color: #f2f2f2;\n      cursor: pointer;\n    }\n    tr:nth-child(even) {\n      background-color: #f9f9f9;\n    }\n    #error, #exito {\n      margin-top: 10px;\n      padding: 10px;\n      border-radius: 5px;\n    }\n    #error {\n      color: red;\n      background-color: #ffe6e6;\n    }\n    #exito {\n      color: green;\n      background-color: #e6ffe6;\n    }\n    #loading {\n      color: #007bff;\n      font-weight: bold;\n      margin-top: 10px;\n    }\n    button, input[type=\"submit\"] {\n      padding: 10px 20px;\n      background-color: #007bff;\n      color: white;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      margin: 5px;\n    }\n    button:hover, input[type=\"submit\"]:hover {\n      background-color: #0056b3;\n    }\n    form {\n      margin: 20px 0;\n      padding: 15px;\n      background-color: #f8f8f8;\n      border-radius: 5px;\n    }\n    label {\n      display: block;\n      margin: 8px 0;\n    }\n    input[type=\"text\"], input[type=\"number\"] {\n      padding: 8px;\n      width: 100%;\n      max-width: 300px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n    }\n    input[type=\"checkbox\"] {\n      margin-left: 10px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Gesti\u00f3n de Pel\u00edculas&lt;/h1&gt;\n  &lt;button onclick=\"cargarPeliculas()\"&gt;Cargar Pel\u00edculas&lt;/button&gt;\n  &lt;div id=\"loading\" style=\"display: none;\"&gt;Cargando...&lt;/div&gt;\n\n  &lt;h2&gt;Crear Nueva Pel\u00edcula&lt;/h2&gt;\n  &lt;form id=\"form-crear\" onsubmit=\"event.preventDefault(); crearPelicula();\"&gt;\n    &lt;label&gt;T\u00edtulo: &lt;input type=\"text\" id=\"crear-titulo\" required&gt;&lt;/label&gt;\n    &lt;label&gt;G\u00e9nero: &lt;input type=\"text\" id=\"crear-genero\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Director: &lt;input type=\"text\" id=\"crear-director\" required&gt;&lt;/label&gt;\n    &lt;label&gt;A\u00f1o: &lt;input type=\"number\" id=\"crear-anio\" min=\"1888\" max=\"2025\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Calificaci\u00f3n: &lt;input type=\"number\" id=\"crear-rating\" step=\"0.1\" min=\"0\" max=\"10\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Popular: &lt;input type=\"checkbox\" id=\"crear-popular\"&gt;&lt;/label&gt;\n    &lt;input type=\"submit\" value=\"Crear Pel\u00edcula\"&gt;\n  &lt;/form&gt;\n\n  &lt;h2&gt;Actualizar Pel\u00edcula&lt;/h2&gt;\n  &lt;form id=\"form-actualizar\" onsubmit=\"event.preventDefault(); actualizarPelicula();\"&gt;\n    &lt;label&gt;ID: &lt;input type=\"text\" id=\"actualizar-id\" required&gt;&lt;/label&gt;\n    &lt;label&gt;T\u00edtulo: &lt;input type=\"text\" id=\"actualizar-titulo\" required&gt;&lt;/label&gt;\n    &lt;label&gt;G\u00e9nero: &lt;input type=\"text\" id=\"actualizar-genero\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Director: &lt;input type=\"text\" id=\"actualizar-director\" required&gt;&lt;/label&gt;\n    &lt;label&gt;A\u00f1o: &lt;input type=\"number\" id=\"actualizar-anio\" min=\"1888\" max=\"2025\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Calificaci\u00f3n: &lt;input type=\"number\" id=\"actualizar-rating\" step=\"0.1\" min=\"0\" max=\"10\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Popular: &lt;input type=\"checkbox\" id=\"actualizar-popular\"&gt;&lt;/label&gt;\n    &lt;input type=\"submit\" value=\"Actualizar Pel\u00edcula\"&gt;\n  &lt;/form&gt;\n\n  &lt;table id=\"tabla-peliculas\"&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;ID&lt;/th&gt;\n        &lt;th&gt;T\u00edtulo&lt;/th&gt;\n        &lt;th&gt;G\u00e9nero&lt;/th&gt;\n        &lt;th&gt;Director&lt;/th&gt;\n        &lt;th&gt;A\u00f1o&lt;/th&gt;\n        &lt;th&gt;Calificaci\u00f3n&lt;/th&gt;\n        &lt;th&gt;Popular&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody id=\"cuerpo-tabla\"&gt;&lt;/tbody&gt;\n  &lt;/table&gt;\n  &lt;div id=\"exito\"&gt;&lt;/div&gt;\n  &lt;div id=\"error\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n    // Funci\u00f3n auxiliar para mostrar mensajes temporales\n    function mostrarMensaje(tipo, mensaje) {\n      const div = document.getElementById(tipo);\n      div.textContent = mensaje;\n      setTimeout(() =&gt; div.textContent = '', 5000);\n    }\n\n    // Cargar pel\u00edculas (GET)\n    async function cargarPeliculas() {\n      const tablaCuerpo = document.getElementById('cuerpo-tabla');\n      const errorDiv = document.getElementById('error');\n      const exitoDiv = document.getElementById('exito');\n      const loadingDiv = document.getElementById('loading');\n\n      tablaCuerpo.innerHTML = '';\n      errorDiv.textContent = '';\n      exitoDiv.textContent = '';\n      loadingDiv.style.display = 'block';\n\n      try {\n        const respuesta = await fetch('https://playground.mockoon.com/movies', {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n        if (!respuesta.ok) {\n          throw new Error(`Error HTTP: ${respuesta.status}`);\n        }\n        const peliculas = await respuesta.json();\n        peliculas.forEach(pelicula =&gt; {\n          const fila = document.createElement('tr');\n          fila.innerHTML = `\n            &lt;td&gt;${pelicula.id}&lt;/td&gt;\n            &lt;td&gt;${pelicula.title}&lt;/td&gt;\n            &lt;td&gt;${pelicula.genre}&lt;/td&gt;\n            &lt;td&gt;${pelicula.director}&lt;/td&gt;\n            &lt;td&gt;${pelicula.year}&lt;/td&gt;\n            &lt;td&gt;${pelicula.rating}&lt;/td&gt;\n            &lt;td&gt;${pelicula.isPopular ? 'S\u00ed' : 'No'}&lt;/td&gt;\n          `;\n          tablaCuerpo.appendChild(fila);\n        });\n        mostrarMensaje('exito', 'Pel\u00edculas cargadas correctamente');\n      } catch (error) {\n        mostrarMensaje('error', `Error al cargar las pel\u00edculas: ${error.message}`);\n      } finally {\n        loadingDiv.style.display = 'none';\n      }\n    }\n\n    // Crear pel\u00edcula (POST)\n    async function crearPelicula() {\n      const tablaCuerpo = document.getElementById('cuerpo-tabla');\n      const errorDiv = document.getElementById('error');\n      const exitoDiv = document.getElementById('exito');\n      const loadingDiv = document.getElementById('loading');\n\n      errorDiv.textContent = '';\n      exitoDiv.textContent = '';\n      loadingDiv.style.display = 'block';\n\n      try {\n        const anio = parseInt(document.getElementById('crear-anio').value);\n        if (anio &lt; 1888 || anio &gt; 2025) {\n          throw new Error('El a\u00f1o debe estar entre 1888 y 2025');\n        }\n        const rating = parseFloat(document.getElementById('crear-rating').value);\n        if (rating &lt; 0 || rating &gt; 10) {\n          throw new Error('La calificaci\u00f3n debe estar entre 0 y 10');\n        }\n\n        const nuevaPelicula = {\n          title: document.getElementById('crear-titulo').value.trim(),\n          genre: document.getElementById('crear-genero').value.trim(),\n          director: document.getElementById('crear-director').value.trim(),\n          year: anio,\n          rating: rating,\n          isPopular: document.getElementById('crear-popular').checked\n        };\n\n        const respuesta = await fetch('https://playground.mockoon.com/movies', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify(nuevaPelicula)\n        });\n\n        if (!respuesta.ok) {\n          throw new Error(`Error HTTP: ${respuesta.status}`);\n        }\n\n        const peliculaCreada = await respuesta.json();\n        const fila = document.createElement('tr');\n        fila.innerHTML = `\n          &lt;td&gt;${peliculaCreada.id}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.title}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.genre}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.director}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.year}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.rating}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.isPopular ? 'S\u00ed' : 'No'}&lt;/td&gt;\n        `;\n        tablaCuerpo.appendChild(fila);\n        document.getElementById('form-crear').reset();\n        mostrarMensaje('exito', 'Pel\u00edcula creada correctamente');\n      } catch (error) {\n        mostrarMensaje('error', `Error al crear la pel\u00edcula: ${error.message}`);\n      } finally {\n        loadingDiv.style.display = 'none';\n      }\n    }\n\n    // Actualizar pel\u00edcula (PUT)\n    async function actualizarPelicula() {\n      const tablaCuerpo = document.getElementById('cuerpo-tabla');\n      const errorDiv = document.getElementById('error');\n      const exitoDiv = document.getElementById('exito');\n      const loadingDiv = document.getElementById('loading');\n\n      errorDiv.textContent = '';\n      exitoDiv.textContent = '';\n      loadingDiv.style.display = 'block';\n\n      try {\n        const id = document.getElementById('actualizar-id').value.trim();\n        const anio = parseInt(document.getElementById('actualizar-anio').value);\n        if (anio &lt; 1888 || anio &gt; 2025) {\n          throw new Error('El a\u00f1o debe estar entre 1888 y 2025');\n        }\n        const rating = parseFloat(document.getElementById('actualizar-rating').value);\n        if (rating &lt; 0 || rating &gt; 10) {\n          throw new Error('La calificaci\u00f3n debe estar entre 0 y 10');\n        }\n\n        const peliculaActualizada = {\n          title: document.getElementById('actualizar-titulo').value.trim(),\n          genre: document.getElementById('actualizar-genero').value.trim(),\n          director: document.getElementById('actualizar-director').value.trim(),\n          year: anio,\n          rating: rating,\n          isPopular: document.getElementById('actualizar-popular').checked\n        };\n\n        const respuesta = await fetch(`https://playground.mockoon.com/movies/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify(peliculaActualizada)\n        });\n\n        if (!respuesta.ok) {\n          throw new Error(`Error HTTP: ${respuesta.status}`);\n        }\n\n        await cargarPeliculas(); // Recargar la lista para reflejar los cambios\n        document.getElementById('form-actualizar').reset();\n        mostrarMensaje('exito', 'Pel\u00edcula actualizada correctamente');\n      } catch (error) {\n        mostrarMensaje('error', `Error al actualizar la pel\u00edcula: ${error.message}`);\n      } finally {\n        loadingDiv.style.display = 'none';\n      }\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/p6s/#caracteristicas-de-la-solucion","title":"Caracter\u00edsticas de la soluci\u00f3n","text":"<ol> <li>Interfaz HTML:</li> <li>Incluye un bot\u00f3n para cargar pel\u00edculas, formularios para crear y actualizar pel\u00edculas, y una tabla para mostrar los resultados.</li> <li>Los formularios tienen campos para todos los atributos de una pel\u00edcula (<code>title</code>, <code>genre</code>, <code>director</code>, <code>year</code>, <code>rating</code>, <code>isPopular</code>).</li> <li> <p>Se agregan <code>div</code> para mensajes de \u00e9xito (<code>exito</code>) y error (<code>error</code>), y un indicador de carga (<code>loading</code>).</p> </li> <li> <p>Estilos CSS:</p> </li> <li>La interfaz es clara y responsiva, con una tabla legible, filas alternadas, y formularios estilizados.</li> <li> <p>Los mensajes de \u00e9xito y error tienen colores distintivos (verde y rojo) y desaparecen tras 5 segundos.</p> </li> <li> <p>L\u00f3gica JavaScript:</p> </li> <li>GET (<code>cargarPeliculas</code>): Obtiene la lista de pel\u00edculas y la muestra en la tabla.</li> <li>POST (<code>crearPelicula</code>): Env\u00eda una nueva pel\u00edcula usando los datos del formulario, validando <code>year</code> (1888\u20132025) y <code>rating</code> (0\u201310).</li> <li>PUT (<code>actualizarPelicula</code>): Actualiza una pel\u00edcula existente usando el ID proporcionado y recarga la tabla.</li> <li>Validaciones: Se verifica que los datos sean v\u00e1lidos antes de enviar las solicitudes.</li> <li>Manejo de errores: Captura errores de red, HTTP, y validaciones, mostrando mensajes al usuario.</li> <li> <p>Indicador de carga: Se muestra durante las solicitudes y se oculta al finalizar.</p> </li> <li> <p>Uso del objeto JSON corregido:</p> </li> <li>Para crear la pel\u00edcula proporcionada, completa el formulario de creaci\u00f3n con:<ul> <li>T\u00edtulo: <code>necessitatibus brevis vicissitudo</code></li> <li>G\u00e9nero: <code>vulgus</code></li> <li>Director: <code>Stewart Kiehn</code></li> <li>A\u00f1o: <code>1954</code></li> <li>Calificaci\u00f3n: <code>7</code></li> <li>Popular: <code>false</code></li> </ul> </li> <li> <p>La solicitud POST enviar\u00e1 este objeto y la API devolver\u00e1 la pel\u00edcula con un <code>id</code> asignado.</p> </li> <li> <p>Buenas pr\u00e1cticas:</p> </li> <li>Uso de <code>async/await</code> para un c\u00f3digo legible.</li> <li>Verificaci\u00f3n de <code>response.ok</code> en todas las solicitudes.</li> <li>Validaciones de datos antes de enviar solicitudes.</li> <li>Mensajes de usuario claros y temporales.</li> <li>Limpieza de formularios y tabla antes de nuevas operaciones.</li> </ol>"},{"location":"content/p6s/#instrucciones-para-probar","title":"Instrucciones para probar","text":"<ol> <li>Guarda el c\u00f3digo:</li> <li> <p>Copia el c\u00f3digo en un archivo llamado <code>index.html</code>.</p> </li> <li> <p>Ejecuta la aplicaci\u00f3n:</p> </li> <li>Abre <code>index.html</code> en un navegador. Si usas un editor como VS Code, utiliza la extensi\u00f3n Live Server para servir el archivo localmente y evitar problemas de CORS (aunque el endpoint de Mockoon soporta CORS).</li> <li> <p>Alternativamente, sube el archivo a un servidor web o usa un entorno como CodePen (asegur\u00e1ndote de que permita solicitudes externas).</p> </li> <li> <p>Prueba las funcionalidades:</p> </li> <li>Haz clic en \"Cargar Pel\u00edculas\" para ver la lista de pel\u00edculas.</li> <li>Completa el formulario de creaci\u00f3n con datos (por ejemplo, los del objeto JSON corregido) y env\u00edalo.</li> <li>Usa el formulario de actualizaci\u00f3n para modificar una pel\u00edcula existente (necesitas un ID v\u00e1lido, obtenido de la lista cargada).</li> <li> <p>Prueba errores, como enviar un ID inv\u00e1lido en PUT o un a\u00f1o fuera de rango.</p> </li> <li> <p>Verifica la salida:</p> </li> <li>La tabla mostrar\u00e1 las pel\u00edculas cargadas.</li> <li>Los mensajes de \u00e9xito o error aparecer\u00e1n en los <code>div</code> correspondientes.</li> <li>El indicador de carga ser\u00e1 visible durante las solicitudes.</li> </ol>"},{"location":"content/p6s/#ejemplo-de-uso-del-objeto-json-corregido","title":"Ejemplo de uso del objeto JSON corregido","text":"<p>Para crear la pel\u00edcula proporcionada, usa el formulario de creaci\u00f3n con estos valores:</p> <pre><code>{\n  \"title\": \"necessitatibus brevis vicissitudo\",\n  \"genre\": \"vulgus\",\n  \"director\": \"Stewart Kiehn\",\n  \"year\": 1954,\n  \"rating\": 7,\n  \"isPopular\": false\n}\n</code></pre> <p>La API devolver\u00e1 una respuesta como:</p> <pre><code>{\n  \"id\": \"nuevo-id-generado\",\n  \"title\": \"necessitatibus brevis vicissitudo\",\n  \"genre\": \"vulgus\",\n  \"director\": \"Stewart Kiehn\",\n  \"year\": 1954,\n  \"rating\": 7,\n  \"isPopular\": false\n}\n</code></pre>"},{"location":"content/p7/","title":"Tutorial Completo sobre Eventos en JavaScript","text":""},{"location":"content/p7/#introduccion","title":"Introducci\u00f3n","text":"<p>Los eventos en JavaScript son acciones o sucesos que ocurren en una p\u00e1gina web, como un clic del rat\u00f3n, el desplazamiento de la p\u00e1gina, la pulsaci\u00f3n de una tecla o la carga de un documento. JavaScript permite detectar estos eventos y ejecutar c\u00f3digo en respuesta, lo que hace que las p\u00e1ginas web sean interactivas. Este tutorial cubre todo lo que necesitas saber sobre los eventos en JavaScript, desde los conceptos b\u00e1sicos hasta t\u00e9cnicas avanzadas, con ejemplos pr\u00e1cticos.</p>"},{"location":"content/p7/#que-son-los-eventos","title":"\u00bfQu\u00e9 son los eventos?","text":"<p>Un evento es una se\u00f1al que indica que algo ha sucedido en el sistema. Por ejemplo:</p> <ul> <li>El usuario hace clic en un bot\u00f3n (<code>click</code>).</li> <li>El usuario mueve el rat\u00f3n sobre un elemento (<code>mouseover</code>).</li> <li>Una p\u00e1gina termina de cargarse (<code>load</code>).</li> <li>Se pulsa una tecla en el teclado (<code>keydown</code>).</li> </ul> <p>Los eventos son gestionados por el modelo de eventos del DOM (Document Object Model), que permite a JavaScript interactuar con los elementos de una p\u00e1gina web. Cada evento est\u00e1 representado por un objeto <code>Event</code> que contiene informaci\u00f3n sobre lo que ocurri\u00f3.</p>"},{"location":"content/p7/#tipos-de-eventos","title":"Tipos de Eventos","text":"<p>Existen muchos tipos de eventos en JavaScript, organizados en categor\u00edas principales. A continuaci\u00f3n, se incluye un ejemplo pr\u00e1ctico para cada evento listado:</p>"},{"location":"content/p7/#1-eventos-de-raton","title":"1. Eventos de Rat\u00f3n","text":"<ul> <li> <p><code>click</code>: Se dispara cuando se hace clic en un elemento.   <pre><code>&lt;button id=\"botonClick\"&gt;Haz clic&lt;/button&gt;\n&lt;script&gt;\n  const botonClick = document.getElementById('botonClick');\n  botonClick.addEventListener('click', () =&gt; {\n    alert('\u00a1Bot\u00f3n clicado!');\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>dblclick</code>: Se dispara tras un doble clic.   <pre><code>&lt;div id=\"dobleClic\"&gt;Haz doble clic aqu\u00ed&lt;/div&gt;\n&lt;script&gt;\n  const dobleClic = document.getElementById('dobleClic');\n  dobleClic.addEventListener('dblclick', () =&gt; {\n    dobleClic.style.backgroundColor = 'lightblue';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>mousedown</code>: Cuando se presiona un bot\u00f3n del rat\u00f3n.   <pre><code>&lt;div id=\"mouseDown\"&gt;Presiona el rat\u00f3n&lt;/div&gt;\n&lt;script&gt;\n  const mouseDown = document.getElementById('mouseDown');\n  mouseDown.addEventListener('mousedown', () =&gt; {\n    mouseDown.textContent = '\u00a1Rat\u00f3n presionado!';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>mouseup</code>: Cuando se suelta un bot\u00f3n del rat\u00f3n.   <pre><code>&lt;div id=\"mouseUp\"&gt;Suelta el rat\u00f3n&lt;/div&gt;\n&lt;script&gt;\n  const mouseUp = document.getElementById('mouseUp');\n  mouseUp.addEventListener('mouseup', () =&gt; {\n    mouseUp.textContent = '\u00a1Rat\u00f3n soltado!';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>mousemove</code>: Cuando el rat\u00f3n se mueve sobre un elemento.   <pre><code>&lt;div id=\"mouseMove\" style=\"width: 200px; height: 200px; background: lightgray;\"&gt;Mueve el rat\u00f3n&lt;/div&gt;\n&lt;script&gt;\n  const mouseMove = document.getElementById('mouseMove');\n  mouseMove.addEventListener('mousemove', (e) =&gt; {\n    mouseMove.textContent = `X: ${e.clientX}, Y: ${e.clientY}`;\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>mouseenter</code>: Cuando el rat\u00f3n entra en un elemento.   <pre><code>&lt;div id=\"mouseEnter\" style=\"width: 100px; height: 100px; background: lightcoral;\"&gt;Entra con el rat\u00f3n&lt;/div&gt;\n&lt;script&gt;\n  const mouseEnter = document.getElementById('mouseEnter');\n  mouseEnter.addEventListener('mouseenter', () =&gt; {\n    mouseEnter.style.backgroundColor = 'lightgreen';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>mouseleave</code>: Cuando el rat\u00f3n sale de un elemento.   <pre><code>&lt;div id=\"mouseLeave\" style=\"width: 100px; height: 100px; background: lightgreen;\"&gt;Sale con el rat\u00f3n&lt;/div&gt;\n&lt;script&gt;\n  const mouseLeave = document.getElementById('mouseLeave');\n  mouseLeave.addEventListener('mouseleave', () =&gt; {\n    mouseLeave.style.backgroundColor = 'lightcoral';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> </ul>"},{"location":"content/p7/#2-eventos-de-teclado","title":"2. Eventos de Teclado","text":"<ul> <li> <p><code>keydown</code>: Cuando se presiona una tecla.   <pre><code>&lt;input id=\"keyDown\" type=\"text\" placeholder=\"Presiona una tecla\"&gt;\n&lt;script&gt;\n  const keyDown = document.getElementById('keyDown');\n  keyDown.addEventListener('keydown', (e) =&gt; {\n    console.log(`Tecla presionada: ${e.key}`);\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>keyup</code>: Cuando se suelta una tecla.   <pre><code>&lt;input id=\"keyUp\" type=\"text\" placeholder=\"Suelta una tecla\"&gt;\n&lt;script&gt;\n  const keyUp = document.getElementById('keyUp');\n  keyUp.addEventListener('keyup', (e) =&gt; {\n    console.log(`Tecla soltada: ${e.key}`);\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>keypress</code>: Cuando se presiona y suelta una tecla (en desuso, se recomienda usar <code>keydown</code>).   <pre><code>&lt;input id=\"keyPress\" type=\"text\" placeholder=\"Presiona una tecla\"&gt;\n&lt;script&gt;\n  const keyPress = document.getElementById('keyPress');\n  keyPress.addEventListener('keypress', (e) =&gt; {\n    console.log(`Tecla presionada y soltada: ${e.key}`);\n  });\n&lt;/script&gt;\n</code></pre></p> </li> </ul>"},{"location":"content/p7/#3-eventos-de-formulario","title":"3. Eventos de Formulario","text":"<ul> <li> <p><code>submit</code>: Cuando se env\u00eda un formulario.   <pre><code>&lt;form id=\"formSubmit\"&gt;\n  &lt;input type=\"text\" required&gt;\n  &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n&lt;script&gt;\n  const formSubmit = document.getElementById('formSubmit');\n  formSubmit.addEventListener('submit', (e) =&gt; {\n    e.preventDefault();\n    alert('Formulario enviado');\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>change</code>: Cuando cambia el valor de un elemento de formulario.   <pre><code>&lt;select id=\"selectChange\"&gt;\n  &lt;option value=\"1\"&gt;Opci\u00f3n 1&lt;/option&gt;\n  &lt;option value=\"2\"&gt;Opci\u00f3n 2&lt;/option&gt;\n&lt;/select&gt;\n&lt;script&gt;\n  const selectChange = document.getElementById('selectChange');\n  selectChange.addEventListener('change', (e) =&gt; {\n    console.log(`Valor seleccionado: ${e.target.value}`);\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>focus</code>: Cuando un elemento recibe el foco.   <pre><code>&lt;input id=\"inputFocus\" type=\"text\" placeholder=\"Haz foco aqu\u00ed\"&gt;\n&lt;script&gt;\n  const inputFocus = document.getElementById('inputFocus');\n  inputFocus.addEventListener('focus', () =&gt; {\n    inputFocus.style.backgroundColor = 'yellow';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>blur</code>: Cuando un elemento pierde el foco.   <pre><code>&lt;input id=\"inputBlur\" type=\"text\" placeholder=\"Pierde el foco\"&gt;\n&lt;script&gt;\n  const inputBlur = document.getElementById('inputBlur');\n  inputBlur.addEventListener('blur', () =&gt; {\n    inputBlur.style.backgroundColor = 'white';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> </ul>"},{"location":"content/p7/#4-eventos-de-ventana-y-documento","title":"4. Eventos de Ventana y Documento","text":"<ul> <li> <p><code>load</code>: Cuando la p\u00e1gina o un recurso termina de cargarse.   <pre><code>&lt;img id=\"imagenLoad\" src=\"https://via.placeholder.com/150\" alt=\"Imagen\"&gt;\n&lt;script&gt;\n  const imagenLoad = document.getElementById('imagenLoad');\n  imagenLoad.addEventListener('load', () =&gt; {\n    console.log('Imagen cargada correctamente');\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>resize</code>: Cuando se redimensiona la ventana del navegador.   <pre><code>&lt;div id=\"resizeInfo\"&gt;Redimensiona la ventana&lt;/div&gt;\n&lt;script&gt;\n  const resizeInfo = document.getElementById('resizeInfo');\n  window.addEventListener('resize', () =&gt; {\n    resizeInfo.textContent = `Tama\u00f1o ventana: ${window.innerWidth}x${window.innerHeight}`;\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>scroll</code>: Cuando el usuario desplaza la p\u00e1gina.   <pre><code>&lt;div style=\"height: 2000px;\"&gt;Despl\u00e1zate...&lt;/div&gt;\n&lt;script&gt;\n  window.addEventListener('scroll', () =&gt; {\n    console.log(`Posici\u00f3n de desplazamiento: ${window.scrollY}`);\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>unload</code>: Cuando la p\u00e1gina se cierra (poco usado).   <pre><code>&lt;script&gt;\n  window.addEventListener('unload', () =&gt; {\n    console.log('P\u00e1gina cerrada');\n  });\n&lt;/script&gt;\n</code></pre></p> </li> </ul>"},{"location":"content/p7/#5-eventos-tactiles-para-dispositivos-moviles","title":"5. Eventos T\u00e1ctiles (para dispositivos m\u00f3viles)","text":"<ul> <li> <p><code>touchstart</code>: Cuando se toca la pantalla.   <pre><code>&lt;div id=\"touchStart\" style=\"width: 200px; height: 200px; background: lightblue;\"&gt;Toca aqu\u00ed&lt;/div&gt;\n&lt;script&gt;\n  const touchStart = document.getElementById('touchStart');\n  touchStart.addEventListener('touchstart', () =&gt; {\n    touchStart.textContent = '\u00a1Pantalla tocada!';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>touchmove</code>: Cuando se mueve el dedo por la pantalla.   <pre><code>&lt;div id=\"touchMove\" style=\"width: 200px; height: 200px; background: lightyellow;\"&gt;Mueve el dedo&lt;/div&gt;\n&lt;script&gt;\n  const touchMove = document.getElementById('touchMove');\n  touchMove.addEventListener('touchmove', (e) =&gt; {\n    e.preventDefault();\n    touchMove.textContent = `Toque en X: ${e.touches[0].clientX}`;\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>touchend</code>: Cuando se levanta el dedo de la pantalla.   <pre><code>&lt;div id=\"touchEnd\" style=\"width: 200px; height: 200px; background: lightpink;\"&gt;Levanta el dedo&lt;/div&gt;\n&lt;script&gt;\n  const touchEnd = document.getElementById('touchEnd');\n  touchEnd.addEventListener('touchend', () =&gt; {\n    touchEnd.textContent = '\u00a1Toque terminado!';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> </ul>"},{"location":"content/p7/#6-otros-eventos","title":"6. Otros Eventos","text":"<ul> <li> <p><code>error</code>: Cuando ocurre un error (por ejemplo, al cargar una imagen).   <pre><code>&lt;img id=\"imagenError\" src=\"imagen_inexistente.jpg\" alt=\"Imagen rota\"&gt;\n&lt;script&gt;\n  const imagenError = document.getElementById('imagenError');\n  imagenError.addEventListener('error', () =&gt; {\n    console.log('Error al cargar la imagen');\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>drag</code>: Para eventos de arrastrar y soltar.   <pre><code>&lt;div id=\"dragElement\" draggable=\"true\" style=\"width: 100px; height: 100px; background: lightgray;\"&gt;Arrastra&lt;/div&gt;\n&lt;script&gt;\n  const dragElement = document.getElementById('dragElement');\n  dragElement.addEventListener('drag', () =&gt; {\n    console.log('Elemento siendo arrastrado');\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>animationend</code>: Cuando termina una animaci\u00f3n CSS.   <pre><code>&lt;style&gt;\n  @keyframes girar {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n  }\n  #animacion {\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    animation: girar 2s linear;\n  }\n&lt;/style&gt;\n&lt;div id=\"animacion\"&gt;&lt;/div&gt;\n&lt;script&gt;\n  const animacion = document.getElementById('animacion');\n  animacion.addEventListener('animationend', () =&gt; {\n    animacion.style.backgroundColor = 'lightgreen';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> </ul> <p>Puedes consultar una lista completa en la Referencia de Eventos de MDN.</p>"},{"location":"content/p7/#como-manejar-eventos","title":"C\u00f3mo Manejar Eventos","text":"<p>Hay tres formas principales de asociar eventos a elementos en JavaScript:</p>"},{"location":"content/p7/#1-atributos-html-no-recomendado","title":"1. Atributos HTML (No recomendado)","text":"<p>Puedes agregar un manejador de eventos directamente en el HTML usando atributos como <code>onclick</code>. Este m\u00e9todo es simple pero desaconsejado porque mezcla la l\u00f3gica de JavaScript con el HTML, dificultando el mantenimiento.</p> <p>Ejemplo: <pre><code>&lt;button onclick=\"saludar()\"&gt;Saludar&lt;/button&gt;\n&lt;script&gt;\n  function saludar() {\n    alert('\u00a1Hola!');\n  }\n&lt;/script&gt;\n</code></pre></p>"},{"location":"content/p7/#2-propiedades-de-evento-en-javascript","title":"2. Propiedades de Evento en JavaScript","text":"<p>Puedes asignar una funci\u00f3n a una propiedad de evento de un elemento en JavaScript, como <code>element.onclick</code>. Este m\u00e9todo es mejor que los atributos HTML, pero solo permite asignar un manejador por evento.</p> <p>Ejemplo: <pre><code>&lt;button id=\"boton\"&gt;Saludar&lt;/button&gt;\n&lt;script&gt;\n  const boton = document.getElementById('boton');\n  boton.onclick = function() {\n    alert('\u00a1Hola!');\n  };\n&lt;/script&gt;\n</code></pre></p>"},{"location":"content/p7/#3-metodo-addeventlistener-recomendado","title":"3. M\u00e9todo <code>addEventListener</code> (Recomendado)","text":"<p>El m\u00e9todo <code>addEventListener</code> es la forma moderna y m\u00e1s flexible de manejar eventos. Permite agregar m\u00faltiples manejadores para el mismo evento y proporciona mejor control.</p> <p>Sintaxis: <pre><code>element.addEventListener('event', callback, options);\n</code></pre> - <code>event</code>: Nombre del evento (sin el prefijo <code>on</code>, por ejemplo, <code>click</code>). - <code>callback</code>: Funci\u00f3n que se ejecutar\u00e1 cuando ocurra el evento. - <code>options</code>: Objeto opcional con configuraciones (por ejemplo, <code>{ once: true }</code> para ejecutar el evento solo una vez).</p> <p>Ejemplo: <pre><code>&lt;button id=\"boton\"&gt;Saludar&lt;/button&gt;\n&lt;script&gt;\n  const boton = document.getElementById('boton');\n  boton.addEventListener('click', function() {\n    alert('\u00a1Hola!');\n  });\n&lt;/script&gt;\n</code></pre></p> <p>Ventajas de <code>addEventListener</code>: - Permite m\u00faltiples manejadores para un mismo evento. - Es m\u00e1s f\u00e1cil de mantener y depurar. - Soporta opciones avanzadas como captura de eventos o ejecuci\u00f3n \u00fanica.</p>"},{"location":"content/p7/#el-objeto-event","title":"El Objeto <code>Event</code>","text":"<p>Cada vez que ocurre un evento, JavaScript crea un objeto <code>Event</code> que contiene detalles sobre el evento. Este objeto se pasa autom\u00e1ticamente a la funci\u00f3n manejadora.</p> <p>Propiedades comunes del objeto <code>Event</code>:</p> <ul> <li><code>type</code>: Tipo de evento (por ejemplo, <code>click</code>).</li> <li><code>target</code>: Elemento que desencaden\u00f3 el evento.</li> <li><code>currentTarget</code>: Elemento al que est\u00e1 asociado el manejador.</li> <li><code>clientX</code>, <code>clientY</code>: Coordenadas del rat\u00f3n en la ventana.</li> <li><code>key</code>: Tecla presionada (para eventos de teclado).</li> <li><code>code</code>: C\u00f3digo f\u00edsico de la tecla (por ejemplo, <code>Enter</code>).</li> </ul> <p>Ejemplo: Mostrar informaci\u00f3n del evento <pre><code>&lt;button id=\"boton\"&gt;Haz clic&lt;/button&gt;\n&lt;script&gt;\n  const boton = document.getElementById('boton');\n  boton.addEventListener('click', function(evento) {\n    console.log('Tipo de evento:', evento.type);\n    console.log('Elemento objetivo:', evento.target);\n    console.log('Coordenadas X/Y:', evento.clientX, evento.clientY);\n  });\n&lt;/script&gt;\n</code></pre></p>"},{"location":"content/p7/#propagacion-de-eventos","title":"Propagaci\u00f3n de Eventos","text":"<p>Los eventos en el DOM siguen un flujo de propagaci\u00f3n con tres fases: 1. Captura: El evento desciende desde el elemento ra\u00edz (<code>document</code>) hasta el elemento objetivo. 2. Objetivo: El evento ocurre en el elemento objetivo. 3. Burbujeo: El evento asciende desde el elemento objetivo hasta el elemento ra\u00edz.</p> <p>Por defecto, los manejadores de eventos se ejecutan en la fase de burbujeo. Puedes cambiar esto usando el par\u00e1metro <code>options</code> en <code>addEventListener</code>:</p> <pre><code>element.addEventListener('click', callback, { capture: true });\n</code></pre> <p>Ejemplo de burbujeo: <pre><code>&lt;div id=\"padre\"&gt;\n  &lt;button id=\"hijo\"&gt;Clic aqu\u00ed&lt;/button&gt;\n&lt;/div&gt;\n&lt;script&gt;\n  const padre = document.getElementById('padre');\n  const hijo = document.getElementById('hijo');\n\n  padre.addEventListener('click', () =&gt; console.log('Clic en padre'));\n  hijo.addEventListener('click', () =&gt; console.log('Clic en hijo'));\n&lt;/script&gt;\n</code></pre> Al hacer clic en el bot\u00f3n, se ejecutan ambos manejadores (primero el del hijo, luego el del padre) debido al burbujeo.</p> <p>Detener la propagaci\u00f3n: Puedes usar <code>event.stopPropagation()</code> para evitar que el evento siga propag\u00e1ndose.</p> <pre><code>hijo.addEventListener('click', (evento) =&gt; {\n  console.log('Clic en hijo');\n  evento.stopPropagation();\n});\n</code></pre>"},{"location":"content/p7/#prevencion-de-comportamientos-predeterminados","title":"Prevenci\u00f3n de Comportamientos Predeterminados","text":"<p>Algunos eventos tienen comportamientos predeterminados, como el env\u00edo de un formulario o el clic en un enlace. Puedes prevenirlos usando <code>event.preventDefault()</code>.</p> <p>Ejemplo: Evitar el env\u00edo de un formulario <pre><code>&lt;form id=\"formulario\"&gt;\n  &lt;input type=\"text\" required&gt;\n  &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n&lt;script&gt;\n  const formulario = document.getElementById('formulario');\n  formulario.addEventListener('submit', (evento) =&gt; {\n    evento.preventDefault();\n    console.log('Formulario no enviado');\n  });\n&lt;/script&gt;\n</code></pre></p>"},{"location":"content/p7/#ejemplos-practicos","title":"Ejemplos Pr\u00e1cticos","text":""},{"location":"content/p7/#1-contador-de-clics","title":"1. Contador de Clics","text":"<p>Un bot\u00f3n que cuenta cu\u00e1ntas veces se ha hecho clic.</p> <pre><code>&lt;button id=\"boton\"&gt;Clics: &lt;span id=\"contador\"&gt;0&lt;/span&gt;&lt;/button&gt;\n&lt;script&gt;\n  const boton = document.getElementById('boton');\n  const contador = document.getElementById('contador');\n  let clics = 0;\n\n  boton.addEventListener('click', () =&gt; {\n    clics++;\n    contador.textContent = clics;\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p7/#2-detectar-tecla-enter","title":"2. Detectar Tecla Enter","text":"<p>Mostrar un mensaje cuando se presiona la tecla Enter en un campo de texto.</p> <pre><code>&lt;input id=\"campo\" type=\"text\" placeholder=\"Escribe y presiona Enter\"&gt;\n&lt;script&gt;\n  const campo = document.getElementById('campo');\n  campo.addEventListener('keydown', (evento) =&gt; {\n    if (evento.code === 'Enter') {\n      alert('Has presionado Enter: ' + campo.value);\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p7/#3-cambiar-color-de-fondo-al-desplazar","title":"3. Cambiar Color de Fondo al Desplazar","text":"<p>Cambiar el color de fondo de la p\u00e1gina seg\u00fan la posici\u00f3n del desplazamiento.</p> <pre><code>&lt;div style=\"height: 2000px;\"&gt;Despl\u00e1zate...&lt;/div&gt;\n&lt;script&gt;\n  document.addEventListener('scroll', () =&gt; {\n    const posicion = window.scrollY;\n    document.body.style.backgroundColor = `rgb(${posicion % 255}, 100, 150)`;\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p7/#4-validacion-de-formulario","title":"4. Validaci\u00f3n de Formulario","text":"<p>Validar un formulario antes de enviarlo.</p> <pre><code>&lt;form id=\"formulario\"&gt;\n  &lt;input type=\"email\" id=\"email\" placeholder=\"Correo electr\u00f3nico\" required&gt;\n  &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n&lt;script&gt;\n  const formulario = document.getElementById('formulario');\n  const email = document.getElementById('email');\n\n  formulario.addEventListener('submit', (evento) =&gt; {\n    evento.preventDefault();\n    if (email.value.includes('@')) {\n      console.log('Correo v\u00e1lido:', email.value);\n    } else {\n      alert('Por favor, ingresa un correo v\u00e1lido.');\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p7/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ol> <li>Usa <code>addEventListener</code>: Es la forma m\u00e1s moderna y flexible de manejar eventos.</li> <li>Evita el c\u00f3digo en HTML: Separa la l\u00f3gica de JavaScript del HTML para mejorar la mantenibilidad.</li> <li>Limpia los manejadores: Usa <code>removeEventListener</code> para eliminar manejadores de eventos cuando ya no sean necesarios, especialmente en aplicaciones de una sola p\u00e1gina (SPA).</li> </ol> <pre><code>const manejador = () =&gt; console.log('Clic');\nboton.addEventListener('click', manejador);\n// M\u00e1s tarde...\nboton.removeEventListener('click', manejador);\n</code></pre> <ol> <li>Optimiza el rendimiento: Evita agregar demasiados manejadores de eventos. Usa delegaci\u00f3n de eventos para manejar eventos en elementos din\u00e1micos.</li> </ol> <p>Ejemplo de delegaci\u00f3n: <pre><code>&lt;ul id=\"lista\"&gt;\n  &lt;li&gt;Elemento 1&lt;/li&gt;\n  &lt;li&gt;Elemento 2&lt;/li&gt;\n&lt;/ul&gt;\n&lt;script&gt;\n  const lista = document.getElementById('lista');\n  lista.addEventListener('click', (evento) =&gt; {\n    if (evento.target.tagName === 'LI') {\n      console.log('Clic en:', evento.target.textContent);\n    }\n  });\n&lt;/script&gt;\n</code></pre></p> <ol> <li>Prueba en diferentes dispositivos: Aseg\u00farate de que los eventos t\u00e1ctiles y de rat\u00f3n funcionen correctamente en m\u00f3viles y escritorios.</li> <li>Usa nombres descriptivos: Nombra las funciones manejadoras de forma que indiquen su prop\u00f3sito, como <code>mane Vitality: manejarClicBoton</code> en lugar de <code>funcion</code>.</li> </ol>"},{"location":"content/p8/","title":"Tutorial Completo sobre Local Storage, Session Storage y Cookies en JavaScript","text":""},{"location":"content/p8/#introduccion","title":"Introducci\u00f3n","text":"<p>El almacenamiento en el navegador permite a las aplicaciones web guardar datos en el lado del cliente, mejorando la experiencia del usuario al persistir informaci\u00f3n como preferencias, estados de la aplicaci\u00f3n o datos temporales. Este tutorial explora en detalle tres tecnolog\u00edas principales de almacenamiento en el navegador: Local Storage, Session Storage y Cookies. Cada una tiene caracter\u00edsticas \u00fanicas, casos de uso espec\u00edficos y limitaciones. A trav\u00e9s de explicaciones detalladas y ejemplos pr\u00e1cticos, aprender\u00e1s c\u00f3mo usar estas herramientas en JavaScript, cu\u00e1ndo elegir cada una y c\u00f3mo implementarlas de manera eficiente y segura.</p>"},{"location":"content/p8/#que-es-el-almacenamiento-en-el-navegador","title":"\u00bfQu\u00e9 es el Almacenamiento en el Navegador?","text":"<p>El almacenamiento en el navegador permite guardar datos en el dispositivo del usuario para que las aplicaciones web puedan acceder a ellos sin necesidad de un servidor. Las tres tecnolog\u00edas principales son:</p> <ul> <li>Local Storage: Almacena datos de forma persistente sin fecha de caducidad, accesibles hasta que se eliminen manualmente.</li> <li>Session Storage: Almacena datos solo durante la duraci\u00f3n de una pesta\u00f1a del navegador, elimin\u00e1ndose al cerrar la pesta\u00f1a.</li> <li>Cookies: Peque\u00f1os fragmentos de datos enviados al servidor en cada solicitud HTTP, con opciones de caducidad y configuraciones de seguridad.</li> </ul> <p>Estas tecnolog\u00edas forman parte de la API Web Storage (para Local Storage y Session Storage) y de la gesti\u00f3n de cookies a trav\u00e9s del objeto <code>document.cookie</code>. A continuaci\u00f3n, se detalla cada una, sus m\u00e9todos, ejemplos pr\u00e1cticos y mejores pr\u00e1cticas.</p>"},{"location":"content/p8/#comparacion-general","title":"Comparaci\u00f3n General","text":"<p>Antes de profundizar, aqu\u00ed tienes una comparaci\u00f3n para entender las diferencias clave:</p> Caracter\u00edstica Local Storage Session Storage Cookies Persistencia Persiste hasta eliminaci\u00f3n manual Dura hasta cerrar la pesta\u00f1a Configurable (sesi\u00f3n o fecha espec\u00edfica) Capacidad 5-10 MB 5-10 MB ~4 KB por cookie, ~50 cookies por dominio Acceso Solo cliente (JavaScript) Solo cliente (JavaScript) Cliente y servidor (enviadas en headers HTTP) API Simple (clave-valor) Simple (clave-valor) Compleja (parsing manual) Uso t\u00edpico Preferencias, estados persistentes Estados temporales Autenticaci\u00f3n, seguimiento Soporte HTTPS No requiere configuraci\u00f3n especial No requiere configuraci\u00f3n especial Requiere <code>Secure</code> para HTTPS <p>Cu\u00e1ndo usar cada una:</p> <ul> <li>Local Storage: Para datos persistentes como configuraciones de usuario o estados de aplicaciones sin backend.</li> <li>Session Storage: Para datos temporales, como formularios en una sola sesi\u00f3n o estados de navegaci\u00f3n.</li> <li>Cookies: Para datos que deben enviarse al servidor, como tokens de autenticaci\u00f3n o seguimiento de sesiones.</li> </ul>"},{"location":"content/p8/#1-local-storage","title":"1. Local Storage","text":""},{"location":"content/p8/#descripcion","title":"Descripci\u00f3n","text":"<p>Local Storage forma parte de la API Web Storage y permite almacenar datos en formato clave-valor como cadenas de texto. Los datos persisten indefinidamente, incluso despu\u00e9s de cerrar el navegador, hasta que se eliminan manualmente. Es ideal para guardar preferencias de usuario, datos de formularios o estados de aplicaciones.</p>"},{"location":"content/p8/#metodos-de-la-api","title":"M\u00e9todos de la API","text":"<p>El objeto global <code>localStorage</code> proporciona los siguientes m\u00e9todos:</p> <ul> <li><code>setItem(clave, valor)</code>: Guarda un valor asociado a una clave.</li> <li><code>getItem(clave)</code>: Recupera el valor de una clave. Devuelve <code>null</code> si no existe.</li> <li><code>removeItem(clave)</code>: Elimina una clave espec\u00edfica.</li> <li><code>clear()</code>: Elimina todos los datos de Local Storage para el dominio.</li> <li><code>key(indice)</code>: Devuelve la clave en la posici\u00f3n especificada.</li> <li>Propiedad <code>length</code>: Indica el n\u00famero de pares clave-valor almacenados.</li> </ul>"},{"location":"content/p8/#ejemplo-1-guardar-y-recuperar-preferencias-de-tema","title":"Ejemplo 1: Guardar y Recuperar Preferencias de Tema","text":"<p>Este ejemplo permite al usuario alternar entre un tema claro y oscuro, guardando la preferencia en Local Storage.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Preferencias de Tema&lt;/title&gt;\n  &lt;style&gt;\n    .claro { background: white; color: black; }\n    .oscuro { background: #333; color: white; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Selecciona un Tema&lt;/h1&gt;\n  &lt;button id=\"toggleTema\"&gt;Cambiar Tema&lt;/button&gt;\n  &lt;p&gt;Estado actual: &lt;span id=\"estadoTema\"&gt;&lt;/span&gt;&lt;/p&gt;\n  &lt;script&gt;\n    const boton = document.getElementById('toggleTema');\n    const cuerpo = document.body;\n    const estadoTema = document.getElementById('estadoTema');\n\n    // Cargar tema guardado\n    const temaGuardado = localStorage.getItem('tema') || 'claro';\n    cuerpo.className = temaGuardado;\n    estadoTema.textContent = temaGuardado;\n\n    // Cambiar tema al hacer clic\n    boton.addEventListener('click', () =&gt; {\n      const nuevoTema = cuerpo.className === 'claro' ? 'oscuro' : 'claro';\n      cuerpo.className = nuevoTema;\n      localStorage.setItem('tema', nuevoTema);\n      estadoTema.textContent = nuevoTema;\n    });\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Se verifica si existe un tema guardado en <code>localStorage.getItem('tema')</code>. Si no, se usa 'claro' por defecto.</li> <li>Al hacer clic en el bot\u00f3n, se alterna entre los temas <code>claro</code> y <code>oscuro</code>, actualizando <code>localStorage</code> y la interfaz.</li> <li>El estado del tema se muestra en un elemento <code>&lt;span&gt;</code> para retroalimentaci\u00f3n.</li> </ul>"},{"location":"content/p8/#2-session-storage","title":"2. Session Storage","text":""},{"location":"content/p8/#descripcion_1","title":"Descripci\u00f3n","text":"<p>Session Storage es similar a Local Storage, pero los datos solo persisten durante la vida de una pesta\u00f1a del navegador. Cuando la pesta\u00f1a se cierra, los datos se eliminan. Es \u00fatil para datos temporales, como formularios en una sola sesi\u00f3n o estados de navegaci\u00f3n.</p>"},{"location":"content/p8/#metodos-de-la-api_1","title":"M\u00e9todos de la API","text":"<p>La API de <code>sessionStorage</code> es id\u00e9ntica a la de <code>localStorage</code>:</p> <ul> <li><code>setItem(clave, valor)</code></li> <li><code>getItem(clave)</code></li> <li><code>removeItem(clave)</code></li> <li><code>clear()</code></li> <li><code>key(indice)</code></li> <li>Propiedad <code>length</code></li> </ul>"},{"location":"content/p8/#ejemplo-2-guardar-estado-de-formulario-en-una-sesion","title":"Ejemplo 2: Guardar Estado de Formulario en una Sesi\u00f3n","text":"<p>Este ejemplo guarda los datos de un formulario en Session Storage mientras la pesta\u00f1a est\u00e1 abierta.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Formulario Temporal&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Formulario Temporal&lt;/h1&gt;\n  &lt;form id=\"formulario\"&gt;\n    &lt;label&gt;Nombre: &lt;input type=\"text\" id=\"nombre\"&gt;&lt;/label&gt;&lt;br&gt;\n    &lt;label&gt;Email: &lt;input type=\"email\" id=\"email\"&gt;&lt;/label&gt;&lt;br&gt;\n    &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n  &lt;/form&gt;\n  &lt;p&gt;Datos guardados: &lt;span id=\"datosGuardados\"&gt;&lt;/span&gt;&lt;/p&gt;\n  &lt;script&gt;\n    const formulario = document.getElementById('formulario');\n    const nombreInput = document.getElementById('nombre');\n    const emailInput = document.getElementById('email');\n    const datosGuardados = document.getElementById('datosGuardados');\n\n    // Cargar datos guardados\n    nombreInput.value = sessionStorage.getItem('nombre') || '';\n    emailInput.value = sessionStorage.getItem('email') || '';\n    actualizarDatosGuardados();\n\n    // Guardar datos al cambiar\n    nombreInput.addEventListener('input', () =&gt; {\n      sessionStorage.setItem('nombre', nombreInput.value);\n      actualizarDatosGuardados();\n    });\n    emailInput.addEventListener('input', () =&gt; {\n      sessionStorage.setItem('email', emailInput.value);\n      actualizarDatosGuardados();\n    });\n\n    // Mostrar datos guardados\n    function actualizarDatosGuardados() {\n      datosGuardados.textContent = `Nombre: ${sessionStorage.getItem('nombre') || ''}, Email: ${sessionStorage.getItem('email') || ''}`;\n    }\n\n    // Limpiar al enviar\n    formulario.addEventListener('submit', (e) =&gt; {\n      e.preventDefault();\n      sessionStorage.removeItem('nombre');\n      sessionStorage.removeItem('email');\n      formulario.reset();\n      datosGuardados.textContent = 'Formulario enviado y datos limpiados';\n    });\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Los datos del formulario se guardan en <code>sessionStorage</code> mientras el usuario escribe.</li> <li>Al recargar la p\u00e1gina (mientras la pesta\u00f1a est\u00e9 abierta), los datos persisten.</li> <li>Al enviar el formulario, los datos se eliminan y el formulario se reinicia.</li> <li>Un elemento <code>&lt;span&gt;</code> muestra los datos guardados en tiempo real.</li> </ul>"},{"location":"content/p8/#3-cookies","title":"3. Cookies","text":""},{"location":"content/p8/#descripcion_2","title":"Descripci\u00f3n","text":"<p>Las cookies son peque\u00f1os fragmentos de datos almacenados en el navegador y enviados al servidor en cada solicitud HTTP. Son ideales para autenticaci\u00f3n, seguimiento de sesiones o personalizaci\u00f3n, pero tienen una capacidad limitada (~4 KB por cookie) y requieren un manejo m\u00e1s complejo que Local/Session Storage.</p>"},{"location":"content/p8/#metodos-y-propiedades","title":"M\u00e9todos y Propiedades","text":"<p>Las cookies se gestionan a trav\u00e9s de la propiedad <code>document.cookie</code>. No hay m\u00e9todos espec\u00edficos como en Web Storage, sino que se manipulan como una cadena de texto.</p> <ul> <li>Establecer una cookie:   <pre><code>document.cookie = \"nombre=Alice; expires=Fri, 31 Dec 2025 23:59:59 GMT; path=/\";\n</code></pre></li> <li>Leer cookies:   <pre><code>console.log(document.cookie); // \"nombre=Alice; otraClave=valor\"\n</code></pre></li> <li>Eliminar una cookie: Establece una fecha de expiraci\u00f3n en el pasado.   <pre><code>document.cookie = \"nombre=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/\";\n</code></pre></li> </ul>"},{"location":"content/p8/#atributos-de-cookies","title":"Atributos de Cookies","text":"<ul> <li><code>expires</code>: Fecha de caducidad (en formato UTC).</li> <li><code>max-age</code>: Duraci\u00f3n en segundos (alternativa a <code>expires</code>).</li> <li><code>path</code>: Ruta del sitio donde la cookie es v\u00e1lida (por ejemplo, <code>/</code> para todo el sitio).</li> <li><code>domain</code>: Dominio donde la cookie es v\u00e1lida (por ejemplo, <code>example.com</code>).</li> <li><code>secure</code>: Solo se env\u00eda en conexiones HTTPS.</li> <li><code>SameSite</code>: Controla el env\u00edo en solicitudes cross-site (<code>Strict</code>, <code>Lax</code>, <code>None</code>).</li> </ul>"},{"location":"content/p8/#ejemplo-3-gestionar-cookies-para-un-contador-de-visitas","title":"Ejemplo 3: Gestionar Cookies para un Contador de Visitas","text":"<p>Este ejemplo usa cookies para contar las visitas a una p\u00e1gina y permite al usuario restablecer el contador.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Contador de Visitas con Cookies&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Bienvenido&lt;/h1&gt;\n  &lt;p&gt;Has visitado esta p\u00e1gina &lt;span id=\"contador\"&gt;0&lt;/span&gt; veces.&lt;/p&gt;\n  &lt;button id=\"resetear\"&gt;Restablecer Contador&lt;/button&gt;\n  &lt;script&gt;\n    const contadorSpan = document.getElementById('contador');\n    const resetearBoton = document.getElementById('resetear');\n\n    // Funci\u00f3n para obtener una cookie por nombre\n    function getCookie(nombre) {\n      const valor = `; ${document.cookie}`;\n      const partes = valor.split(`; ${nombre}=`);\n      if (partes.length === 2) return partes.pop().split(';').shift();\n      return null;\n    }\n\n    // Funci\u00f3n para establecer una cookie\n    function setCookie(nombre, valor, dias) {\n      const fecha = new Date();\n      fecha.setTime(fecha.getTime() + (dias * 24 * 60 * 60 * 1000));\n      const expires = `expires=${fecha.toUTCString()}`;\n      document.cookie = `${nombre}=${valor}; ${expires}; path=/`;\n    }\n\n    // Obtener o inicializar contador\n    let visitas = parseInt(getCookie('visitas')) || 0;\n    visitas++;\n    setCookie('visitas', visitas, 365);\n    contadorSpan.textContent = visitas;\n\n    // Restablecer contador\n    resetearBoton.addEventListener('click', () =&gt; {\n      document.cookie = 'visitas=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/';\n      visitas = 0;\n      contadorSpan.textContent = visitas;\n    });\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La funci\u00f3n <code>getCookie</code> extrae el valor de una cookie espec\u00edfica parseando <code>document.cookie</code>.</li> <li>La funci\u00f3n <code>setCookie</code> crea una cookie con una duraci\u00f3n configurable (en d\u00edas).</li> <li>Cada vez que se carga la p\u00e1gina, el contador de visitas se incrementa y se guarda en una cookie con un a\u00f1o de validez.</li> <li>El bot\u00f3n de restablecer elimina la cookie estableciendo una fecha de expiraci\u00f3n en el pasado.</li> </ul>"},{"location":"content/p8/#ejemplo-combinado-lista-de-tareas-con-local-storage-session-storage-y-cookies","title":"Ejemplo Combinado: Lista de Tareas con Local Storage, Session Storage y Cookies","text":"<p>Este ejemplo avanzado implementa una lista de tareas que usa Local Storage para tareas persistentes, Session Storage para un filtro temporal y Cookies para rastrear el tiempo de la \u00faltima sesi\u00f3n.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Lista de Tareas Avanzada&lt;/title&gt;\n  &lt;style&gt;\n    .tarea { margin: 5px 0; }\n    .completada { text-decoration: line-through; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Lista de Tareas&lt;/h1&gt;\n  &lt;p&gt;\u00daltima sesi\u00f3n: &lt;span id=\"ultimaSesion\"&gt;No registrada&lt;/span&gt;&lt;/p&gt;\n  &lt;input type=\"text\" id=\"nuevaTarea\" placeholder=\"Nueva tarea\"&gt;\n  &lt;button id=\"agregar\"&gt;Agregar&lt;/button&gt;\n  &lt;label&gt;&lt;input type=\"checkbox\" id=\"filtroCompletadas\"&gt; Mostrar solo completadas&lt;/label&gt;\n  &lt;ul id=\"listaTareas\"&gt;&lt;/ul&gt;\n  &lt;script&gt;\n    const inputTarea = document.getElementById('nuevaTarea');\n    const botonAgregar = document.getElementById('agregar');\n    const listaTareas = document.getElementById('listaTareas');\n    const filtroCompletadas = document.getElementById('filtroCompletadas');\n    const ultimaSesion = document.getElementById('ultimaSesion');\n\n    // Funciones para cookies\n    function setCookie(nombre, valor, dias) {\n      const fecha = new Date();\n      fecha.setTime(fecha.getTime() + (dias * 24 * 60 * 60 * 1000));\n      document.cookie = `${nombre}=${valor}; expires=${fecha.toUTCString()}; path=/; SameSite=Lax`;\n    }\n\n    function getCookie(nombre) {\n      const valor = `; ${document.cookie}`;\n      const partes = valor.split(`; ${nombre}=`);\n      if (partes.length === 2) return partes.pop().split(';').shift();\n      return null;\n    }\n\n    // Guardar \u00faltima sesi\u00f3n\n    const ahora = new Date().toLocaleString();\n    setCookie('ultimaSesion', ahora, 30);\n    ultimaSesion.textContent = getCookie('ultimaSesion') || 'No registrada';\n\n    // Cargar tareas desde Local Storage\n    let tareas = JSON.parse(localStorage.getItem('tareas')) || [];\n    let mostrarSoloCompletadas = sessionStorage.getItem('filtroCompletadas') === 'true';\n    filtroCompletadas.checked = mostrarSoloCompletadas;\n    renderizarTareas();\n\n    // Agregar tarea\n    botonAgregar.addEventListener('click', () =&gt; {\n      if (inputTarea.value.trim()) {\n        tareas.push({ texto: inputTarea.value, completada: false });\n        localStorage.setItem('tareas', JSON.stringify(tareas));\n        inputTarea.value = '';\n        renderizarTareas();\n      }\n    });\n\n    // Actualizar filtro\n    filtroCompletadas.addEventListener('change', () =&gt; {\n      mostrarSoloCompletadas = filtroCompletadas.checked;\n      sessionStorage.setItem('filtroCompletadas', mostrarSoloCompletadas);\n      renderizarTareas();\n    });\n\n    // Renderizar tareas\n    function renderizarTareas() {\n      listaTareas.innerHTML =ithelial\n\n      const tareasFiltradas = mostrarSoloCompletadas\n        ? tareas.filter(tarea =&gt; tarea.completada)\n        : tareas;\n\n      tareasFiltradas.forEach((tarea, indice) =&gt; {\n        const li = document.createElement('li');\n        li.className = 'tarea' + (tarea.completada ? ' completada' : '');\n        li.innerHTML = `\n          &lt;input type=\"checkbox\" ${tarea.completada ? 'checked' : ''}&gt;\n          ${tarea.texto}\n          &lt;button onclick=\"eliminarTarea(${indice})\"&gt;Eliminar&lt;/button&gt;\n        `;\n        listaTareas.appendChild(li);\n\n        li.querySelector('input').addEventListener('change', () =&gt; {\n          tareas[indice].completada = !tareas[indice].completada;\n          localStorage.setItem('tareas', JSON.stringify(tareas));\n          renderizarTareas();\n        });\n      });\n    }\n\n    // Eliminar tarea\n    window.eliminarTarea = (indice) =&gt; {\n      tareas.splice(indice, 1);\n      localStorage.setItem('tareas', JSON.stringify(tareas));\n      renderizarTareas();\n    };\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Local Storage: Almacena la lista de tareas de forma persistente.</li> <li>Session Storage: Guarda el estado del filtro de tareas completadas, que se reinicia al cerrar la pesta\u00f1a.</li> <li>Cookies: Registra la fecha y hora de la \u00faltima sesi\u00f3n, enviada al servidor si es necesario.</li> <li>El filtro permite mostrar solo tareas completadas, actualizando la interfaz din\u00e1micamente.</li> <li>La cookie <code>ultimaSesion</code> tiene una validez de 30 d\u00edas y usa <code>SameSite=Lax</code> para seguridad.</li> </ul>"},{"location":"content/p8/#limitaciones","title":"Limitaciones","text":""},{"location":"content/p8/#local-storage","title":"Local Storage","text":"<ul> <li>Capacidad: 5-10 MB, dependiendo del navegador.</li> <li>Solo texto: Requiere <code>JSON.stringify</code>/<code>JSON.parse</code> para datos complejos.</li> <li>S\u00edncrono: Puede ralentizar la aplicaci\u00f3n con grandes datos.</li> <li>Alcance: Limitado al dominio y protocolo.</li> </ul>"},{"location":"content/p8/#session-storage","title":"Session Storage","text":"<ul> <li>Temporal: Los datos se pierden al cerrar la pesta\u00f1a.</li> <li>Capacidad: Similar a Local Storage (5-10 MB).</li> <li>S\u00edncrono: Igual que Local Storage.</li> <li>Alcance: Limitado a una pesta\u00f1a espec\u00edfica.</li> </ul>"},{"location":"content/p8/#cookies","title":"Cookies","text":"<ul> <li>Capacidad: ~4 KB por cookie, ~50 cookies por dominio.</li> <li>Complejidad: Requiere parsing manual de <code>document.cookie</code>.</li> <li>Env\u00edo al servidor: Aumenta el tama\u00f1o de las solicitudes HTTP.</li> <li>Seguridad: Vulnerable si no se configuran con <code>Secure</code> y <code>SameSite</code>.</li> </ul>"},{"location":"content/p8/#consideraciones-de-seguridad","title":"Consideraciones de Seguridad","text":"<ol> <li> <p>Datos sensibles:</p> <ul> <li>Local/Session Storage: No guardes datos sensibles (como contrase\u00f1as o tokens) sin cifrado, ya que son accesibles v\u00eda JavaScript (riesgo de XSS).</li> <li>Cookies: Usa los atributos <code>Secure</code> y <code>HttpOnly</code> para protegerlas de accesos no autorizados.</li> <li>Ejemplo de cifrado con <code>crypto-js</code>:   <pre><code>import AES from 'crypto-js/aes';\nimport CryptoJS from 'crypto-js';\nconst datos = 'secreto';\nconst cifrado = AES.encrypt(datos, 'claveSecreta').toString();\nlocalStorage.setItem('datosCifrados', cifrado);\nconst descifrado = AES.decrypt(localStorage.getItem('datosCifrados'), 'claveSecreta').toString(CryptoJS.enc.Utf8);\n</code></pre></li> </ul> </li> <li> <p>Protecci\u00f3n contra XSS:</p> <ul> <li>Sanitiza entradas del usuario para evitar inyecciones de scripts que accedan a <code>localStorage</code>, <code>sessionStorage</code> o <code>document.cookie</code>.</li> <li>Usa bibliotecas como <code>DOMPurify</code> para limpiar HTML.</li> </ul> </li> <li> <p>Errores de cuota:</p> <ul> <li>Maneja errores de almacenamiento completo con <code>try-catch</code>:   <pre><code>try {\n  localStorage.setItem('clave', 'valor');\n} catch (e) {\n  console.error('Error de almacenamiento:', e);\n}\n</code></pre></li> </ul> </li> <li> <p>Cookies seguras:</p> <ul> <li>Usa <code>Secure</code> para HTTPS y <code>SameSite=Strict</code> o <code>Lax</code> para evitar CSRF (Cross-Site Request Forgery).</li> <li>Ejemplo:   <pre><code>document.cookie = \"nombre=valor; Secure; SameSite=Strict\";\n</code></pre></li> </ul> </li> </ol>"},{"location":"content/p8/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ol> <li>Usa nombres claros y prefijos: Por ejemplo, <code>miApp_tema</code> para evitar colisiones.</li> <li>Minimiza datos almacenados: Guarda solo lo necesario para optimizar el rendimiento.</li> <li> <p>Valida datos recuperados:    <pre><code>const datos = localStorage.getItem('datos');\nif (datos) {\n  try {\n    const objeto = JSON.parse(datos);\n    console.log(objeto);\n  } catch (e) {\n    console.error('Error al parsear JSON:', e);\n  }\n}\n</code></pre></p> </li> <li> <p>Limpieza regular: Elimina datos obsoletos con <code>removeItem</code> o <code>clear</code>.</p> </li> <li>Pruebas multiplataforma: Verifica el comportamiento en diferentes navegadores.</li> <li>Cookies seguras:</li> <li>Siempre configura <code>path=/</code> para cookies de todo el sitio.</li> <li>Usa <code>max-age</code> en lugar de <code>expires</code> para mayor precisi\u00f3n.</li> <li>Documentaci\u00f3n: Comenta el prop\u00f3sito de cada clave almacenada.</li> </ol>"},{"location":"content/p8/#casos-de-uso-avanzados","title":"Casos de Uso Avanzados","text":""},{"location":"content/p8/#1-sincronizacion-offline","title":"1. Sincronizaci\u00f3n Offline","text":"<p>Guarda datos en Local Storage cuando el usuario est\u00e1 offline y sincron\u00edzalos al reconectarse.</p> <pre><code>function guardarDatosOffline(datos) {\n  localStorage.setItem('pendientes', JSON.stringify(datos));\n}\n\nasync function sincronizarDatos() {\n  const pendientes = JSON.parse(localStorage.getItem('pendientes'));\n  if (pendientes &amp;&amp; navigator.onLine) {\n    try {\n      await fetch('/api/sincronizar', {\n        method: 'POST',\n        body: JSON.stringify(pendientes),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      localStorage.removeItem('pendientes');\n    } catch (e) {\n      console.error('Error de sincronizaci\u00f3n:', e);\n    }\n  }\n}\n\nwindow.addEventListener('online', sincronizarDatos);\n</code></pre>"},{"location":"content/p8/#2-cache-de-recursos","title":"2. Cache de Recursos","text":"<p>Usa Local Storage para almacenar respuestas de API y reducir solicitudes.</p> <pre><code>async function obtenerDatosConCache(url) {\n  const cache = localStorage.getItem(url);\n  if (cache) {\n    return JSON.parse(cache);\n  }\n  const respuesta = await fetch(url);\n  const datos = await respuesta.json();\n  localStorage.setItem(url, JSON.stringify(datos));\n  return datos;\n}\n</code></pre>"},{"location":"content/p8/#3-gestion-de-sesiones-con-cookies","title":"3. Gesti\u00f3n de Sesiones con Cookies","text":"<p>Usa cookies para gestionar sesiones de usuario.</p> <pre><code>function iniciarSesion(token) {\n  setCookie('sessionToken', token, 1); // 1 d\u00eda\n}\n\nfunction cerrarSesion() {\n  document.cookie = 'sessionToken=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/';\n}\n\nfunction estaLogueado() {\n  return !!getCookie('sessionToken');\n}\n</code></pre>"},{"location":"content/p9/","title":"Actividad Grupal: Consumo de API RESTful con HTML, CSS y JavaScript","text":""},{"location":"content/p9/#descripcion-general","title":"Descripci\u00f3n General","text":"<p>Como equipo de desarrollo frontend, su tarea es dise\u00f1ar y construir una interfaz web b\u00e1sica utilizando HTML, CSS y JavaScript para consumir una API RESTful creada con NestJS y Prisma. La actividad busca consolidar los conocimientos sobre consumo de APIs, manejo de solicitudes HTTP, manipulaci\u00f3n del DOM y dise\u00f1o de interfaces responsivas. La interfaz debe interactuar con los endpoints de la API para realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) sobre al menos una entidad del sistema.</p>"},{"location":"content/p9/#tema-del-proyecto","title":"Tema del Proyecto","text":"<p>La API a consumir es la desarrollada en la actividad \"Dise\u00f1o e Implementaci\u00f3n de API Personalizada con NestJS y Prisma\". El tema de la API es libre (por ejemplo, gesti\u00f3n de tareas, e-commerce, organizaci\u00f3n de eventos o red social b\u00e1sica). La interfaz debe adaptarse al tema de la API, mostrando datos relevantes y permitiendo al usuario interactuar con las entidades definidas.</p> <p>Ejemplo de Contexto: Si la API gestiona un sistema de tareas con entidades como <code>Task</code> (tareas), <code>User</code> (usuarios) y <code>Category</code> (categor\u00edas), la interfaz podr\u00eda mostrar una lista de tareas, permitir crear nuevas tareas, editarlas o eliminarlas, y filtrarlas por categor\u00eda.</p> <p>Consejo: Aseg\u00farense de entender los endpoints de la API (por ejemplo, <code>GET /tasks</code>, <code>POST /tasks</code>, etc.) y los esquemas de datos (DTOs) antes de comenzar. Revisen la documentaci\u00f3n de la API o usen herramientas como Postman para probar los endpoints.</p>"},{"location":"content/p9/#requisitos-minimos","title":"Requisitos M\u00ednimos","text":"<ol> <li> <p>Interfaz Web</p> <ul> <li>Dise\u00f1ar una interfaz web simple y funcional usando HTML y CSS.</li> <li>La interfaz debe ser responsiva (usar media queries o un framework CSS como Bootstrap).</li> <li>Incluir al menos un formulario para crear/actualizar datos y una lista o tabla para mostrar los datos obtenidos de la API.</li> </ul> </li> <li> <p>Consumo de la API</p> <ul> <li>Implementar solicitudes HTTP para consumir los endpoints de la API usando la API Fetch de JavaScript.</li> <li>Cubrir las operaciones CRUD para al menos una entidad:<ul> <li>Crear: Enviar una solicitud <code>POST</code> para crear un nuevo registro.</li> <li>Leer: Enviar una solicitud <code>GET</code> para obtener y mostrar una lista de registros.</li> <li>Actualizar: Enviar una solicitud <code>PUT</code> o <code>PATCH</code> para modificar un registro existente.</li> <li>Eliminar: Enviar una solicitud <code>DELETE</code> para eliminar un registro.</li> </ul> </li> <li>Manejar las respuestas de la API, incluyendo c\u00f3digos de estado (200, 404, 500, etc.) y mensajes de error.</li> </ul> </li> <li> <p>Manejo del DOM</p> <ul> <li>Usar JavaScript para actualizar din\u00e1micamente el DOM con los datos obtenidos de la API.</li> <li>Implementar eventos (como clics en botones o env\u00edos de formularios) para interactuar con la API.</li> <li>Mostrar retroalimentaci\u00f3n al usuario (por ejemplo, mensajes de \u00e9xito o error).</li> </ul> </li> <li> <p>Validaci\u00f3n y Manejo de Errores</p> <ul> <li>Validar los datos del formulario en el frontend antes de enviarlos a la API.</li> <li>Mostrar mensajes de error claros si la solicitud falla (por ejemplo, datos inv\u00e1lidos o servidor no disponible).</li> <li>Usar <code>try-catch</code> para manejar errores en las solicitudes Fetch.</li> </ul> </li> <li> <p>Persistencia Local (Opcional)</p> <ul> <li>Usar <code>localStorage</code> o <code>sessionStorage</code> para almacenar datos temporales, como un filtro aplicado o datos del formulario antes de enviarlos.</li> </ul> </li> <li> <p>Documentaci\u00f3n</p> <ul> <li>Incluir un archivo <code>README.md</code> que explique:<ul> <li>C\u00f3mo ejecutar la aplicaci\u00f3n frontend.</li> <li>Los endpoints de la API consumidos.</li> <li>Ejemplos de uso (por ejemplo, capturas de pantalla o solicitudes de ejemplo).</li> <li>Dependencias externas (si se usa un framework CSS o bibliotecas como Axios).</li> </ul> </li> </ul> </li> </ol>"},{"location":"content/p9/#ejemplo-practico-interfaz-para-un-sistema-de-tareas","title":"Ejemplo Pr\u00e1ctico: Interfaz para un Sistema de Tareas","text":"<p>A continuaci\u00f3n, se proporciona un ejemplo completo de una interfaz web que consume una API de gesti\u00f3n de tareas con los endpoints:</p> <ul> <li><code>GET /tasks</code>: Obtiene todas las tareas.</li> <li><code>POST /tasks</code>: Crea una nueva tarea.</li> <li><code>PUT /tasks/:id</code>: Actualiza una tarea.</li> <li><code>DELETE /tasks/:id</code>: Elimina una tarea.</li> </ul> <p>C\u00f3digo del Ejemplo: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Gesti\u00f3n de Tareas&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      font-family: Arial, sans-serif;\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    .form-container {\n      margin-bottom: 20px;\n    }\n    input, button {\n      padding: 8px;\n      margin: 5px;\n    }\n    .task-list {\n      list-style: none;\n      padding: 0;\n    }\n    .task-item {\n      border: 1px solid #ccc;\n      padding: 10px;\n      margin: 5px 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    .error {\n      color: red;\n    }\n    @media (max-width: 600px) {\n      input, button {\n        width: 100%;\n        box-sizing: border-box;\n      }\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Gesti\u00f3n de Tareas&lt;/h1&gt;\n  &lt;div class=\"form-container\"&gt;\n    &lt;input type=\"text\" id=\"taskTitle\" placeholder=\"T\u00edtulo de la tarea\" required&gt;\n    &lt;button onclick=\"crearTarea()\"&gt;Crear Tarea&lt;/button&gt;\n  &lt;/div&gt;\n  &lt;p id=\"mensaje\" class=\"error\"&gt;&lt;/p&gt;\n  &lt;ul id=\"taskList\" class=\"task-list\"&gt;&lt;/ul&gt;\n\n  &lt;script&gt;\n    const API_URL = 'http://localhost:3000/tasks'; // URL de la API\n    const taskList = document.getElementById('taskList');\n    const taskTitle = document.getElementById('taskTitle');\n    const mensaje = document.getElementById('mensaje');\n\n    // Cargar tareas al iniciar\n    cargarTareas();\n\n    // Funci\u00f3n para cargar y mostrar tareas\n    async function cargarTareas() {\n      try {\n        const response = await fetch(API_URL);\n        if (!response.ok) throw new Error('Error al cargar tareas');\n        const tareas = await response.json();\n        taskList.innerHTML = '';\n        tareas.forEach(tarea =&gt; {\n          const li = document.createElement('li');\n          li.className = 'task-item';\n          li.innerHTML = `\n            &lt;span&gt;${tarea.title}&lt;/span&gt;\n            &lt;div&gt;\n              &lt;button onclick=\"editarTarea(${tarea.id}, '${tarea.title}')\"&gt;Editar&lt;/button&gt;\n              &lt;button onclick=\"eliminarTarea(${tarea.id})\"&gt;Eliminar&lt;/button&gt;\n            &lt;/div&gt;\n          `;\n          taskList.appendChild(li);\n        });\n      } catch (error) {\n        mensaje.textContent = error.message;\n      }\n    }\n\n    // Funci\u00f3n para crear una tarea\n    async function crearTarea() {\n      const title = taskTitle.value.trim();\n      if (!title) {\n        mensaje.textContent = 'El t\u00edtulo es obligatorio';\n        return;\n      }\n      try {\n        const response = await fetch(API_URL, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ title })\n        });\n        if (!response.ok) throw new Error('Error al crear tarea');\n        taskTitle.value = '';\n        mensaje.textContent = 'Tarea creada con \u00e9xito';\n        cargarTareas();\n      } catch (error) {\n        mensaje.textContent = error.message;\n      }\n    }\n\n    // Funci\u00f3n para editar una tarea\n    async function editarTarea(id, currentTitle) {\n      const newTitle = prompt('Editar t\u00edtulo:', currentTitle);\n      if (newTitle &amp;&amp; newTitle.trim()) {\n        try {\n          const response = await fetch(`${API_URL}/${id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ title: newTitle.trim() })\n          });\n          if (!response.ok) throw new Error('Error al editar tarea');\n          mensaje.textContent = 'Tarea editada con \u00e9xito';\n          cargarTareas();\n        } catch (error) {\n          mensaje.textContent = error.message;\n        }\n      }\n    }\n\n    // Funci\u00f3n para eliminar una tarea\n    async function eliminarTarea(id) {\n      if (confirm('\u00bfSeguro que quieres eliminar esta tarea?')) {\n        try {\n          const response = await fetch(`${API_URL}/${id}`, {\n            method: 'DELETE'\n          });\n          if (!response.ok) throw new Error('Error al eliminar tarea');\n          mensaje.textContent = 'Tarea eliminada con \u00e9xito';\n          cargarTareas();\n        } catch (error) {\n          mensaje.textContent = error.message;\n        }\n      }\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>Explicaci\u00f3n del Ejemplo:</p> <ul> <li>HTML: Contiene un formulario para crear tareas y una lista (<code>&lt;ul&gt;</code>) para mostrarlas.</li> <li>CSS: Estiliza la interfaz con un dise\u00f1o limpio y responsivo (usando media queries para m\u00f3viles).</li> <li>JavaScript:<ul> <li>Usa <code>fetch</code> para consumir los endpoints de la API (<code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>).</li> <li>Actualiza el DOM din\u00e1micamente para mostrar la lista de tareas.</li> <li>Valida el campo de t\u00edtulo antes de enviar la solicitud <code>POST</code>.</li> <li>Maneja errores con <code>try-catch</code> y muestra mensajes al usuario.</li> </ul> </li> <li>Funcionalidad:<ul> <li>Crear: Env\u00eda un nuevo t\u00edtulo al endpoint <code>POST /tasks</code>.</li> <li>Leer: Obtiene todas las tareas con <code>GET /tasks</code> y las muestra en una lista.</li> <li>Actualizar: Usa <code>prompt</code> para editar el t\u00edtulo y env\u00eda una solicitud <code>PUT</code>.</li> <li>Eliminar: Confirma antes de enviar una solicitud <code>DELETE</code>.</li> </ul> </li> <li>Persistencia: Las tareas se almacenan en la base de datos de la API, no en el frontend.</li> </ul>"},{"location":"content/p9/#rubrica-de-evaluacion-consumo-de-api-con-html-css-y-javascript","title":"R\u00fabrica de Evaluaci\u00f3n: Consumo de API con HTML, CSS y JavaScript","text":""},{"location":"content/p9/#descripcion-general_1","title":"Descripci\u00f3n General","text":"<p>Esta r\u00fabrica eval\u00faa el desarrollo de una interfaz web que consume una API RESTful con NestJS y Prisma a lo largo de tres clases. Cada clase eval\u00faa aspectos espec\u00edficos, desde el dise\u00f1o inicial hasta la implementaci\u00f3n completa y la exposici\u00f3n final. La Clase 3 incluye una presentaci\u00f3n oral del proyecto.</p>"},{"location":"content/p9/#estructura-de-evaluacion","title":"Estructura de Evaluaci\u00f3n","text":"<p>La evaluaci\u00f3n se divide en tres clases, con criterios espec\u00edficos para cada una. Cada criterio tiene una ponderaci\u00f3n y una escala de puntuaci\u00f3n (0 a 100). La nota final por clase se calcula seg\u00fan el cumplimiento de los criterios.</p>"},{"location":"content/p9/#escala-de-puntuacion","title":"Escala de Puntuaci\u00f3n","text":"Puntuaci\u00f3n Descripci\u00f3n 90-100 Excelente: Cumple todos los requisitos con alta calidad y creatividad. 70-89 Bueno: Cumple la mayor\u00eda de los requisitos con buena implementaci\u00f3n. 50-69 Regular: Cumple parcialmente los requisitos, con errores o limitaciones. 0-49 Insuficiente: No cumple los requisitos o presenta errores graves."},{"location":"content/p9/#clase-1-planificacion-y-diseno-inicial","title":"Clase 1: Planificaci\u00f3n y Dise\u00f1o Inicial","text":"<p>Objetivo: Evaluar la capacidad del equipo para definir la interfaz, los endpoints a consumir y el dise\u00f1o visual inicial.</p> Criterio Descripci\u00f3n Ponderaci\u00f3n Puntuaci\u00f3n Definici\u00f3n de la Interfaz La interfaz propuesta es clara, funcional y se alinea con el tema de la API. Incluye un formulario y una secci\u00f3n para mostrar datos. 20% 0-100 Identificaci\u00f3n de Endpoints Se identifican correctamente los endpoints de la API a consumir (m\u00ednimo CRUD para una entidad). 30% 0-100 Dise\u00f1o Visual Se presenta un dise\u00f1o inicial (boceto o HTML/CSS est\u00e1tico) que es responsivo y estilizado. 30% 0-100 Planificaci\u00f3n de JavaScript Se describe c\u00f3mo se manejar\u00e1n las solicitudes HTTP y la manipulaci\u00f3n del DOM. 20% 0-100 <p>Entregable Esperado: - Documento o presentaci\u00f3n con la descripci\u00f3n de la interfaz, endpoints a consumir y boceto visual. - Prototipo est\u00e1tico inicial (HTML/CSS) opcional.</p>"},{"location":"content/p9/#clase-2-implementacion-y-progreso-tecnico","title":"Clase 2: Implementaci\u00f3n y Progreso T\u00e9cnico","text":"<p>Objetivo: Evaluar el avance en la implementaci\u00f3n del consumo de la API y la funcionalidad de la interfaz.</p> Criterio Descripci\u00f3n Ponderaci\u00f3n Puntuaci\u00f3n Consumo de la API Se implementan solicitudes HTTP (m\u00ednimo <code>GET</code> y <code>POST</code>) usando Fetch, con manejo de respuestas. 30% 0-100 Manejo del DOM La interfaz actualiza din\u00e1micamente el DOM con los datos de la API. 25% 0-100 Validaci\u00f3n y Errores Se valida el formulario y se manejan errores de la API con mensajes claros al usuario. 20% 0-100 Estilo y Responsividad La interfaz es visualmente atractiva y responsiva en diferentes dispositivos. 15% 0-100 Pruebas Iniciales La interfaz responde correctamente a solicitudes de prueba (probadas manualmente). 10% 0-100 <p>Entregable Esperado: - C\u00f3digo fuente parcial con HTML, CSS y JavaScript que consuma al menos dos endpoints (<code>GET</code> y <code>POST</code>). - Ejemplos funcionales de solicitudes a la API. - Interfaz estilizada y parcialmente funcional.</p>"},{"location":"content/p9/#clase-3-implementacion-final-y-exposicion","title":"Clase 3: Implementaci\u00f3n Final y Exposici\u00f3n","text":"<p>Objetivo: Evaluar la implementaci\u00f3n completa de la interfaz y la calidad de la exposici\u00f3n oral.</p> Criterio Descripci\u00f3n Ponderaci\u00f3n Puntuaci\u00f3n Funcionalidad Completa La interfaz consume todos los endpoints CRUD (<code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>) y funciona correctamente. 30% 0-100 Calidad del C\u00f3digo El c\u00f3digo est\u00e1 organizado, usa funciones modulares y sigue buenas pr\u00e1cticas de JavaScript. 20% 0-100 Documentaci\u00f3n El archivo <code>README.md</code> explica c\u00f3mo ejecutar la aplicaci\u00f3n, los endpoints consumidos y ejemplos de uso. 20% 0-100 Exposici\u00f3n Oral La presentaci\u00f3n es clara, muestra la interfaz en acci\u00f3n y responde a preguntas de manera efectiva. 20% 0-100 Creatividad y Extras Se incluyen elementos adicionales (por ejemplo, <code>localStorage</code>, filtros, animaciones CSS) que enriquecen la interfaz. 10% 0-100 <p>Entregable Esperado: - C\u00f3digo fuente completo y funcional de la interfaz. - Archivo <code>README.md</code> con instrucciones claras y ejemplos. - Presentaci\u00f3n oral (5-10 minutos) que explique el proyecto, muestre la interfaz en acci\u00f3n y responda preguntas.</p>"},{"location":"content/p9/#formato-sugerido-para-la-exposicion","title":"Formato Sugerido para la Exposici\u00f3n","text":"<ul> <li>Introducci\u00f3n (1-2 min): Presentar el tema de la API y el prop\u00f3sito de la interfaz.</li> <li>Demostraci\u00f3n (3-5 min): Mostrar la interfaz interactuando con la API (crear, leer, actualizar, eliminar datos).</li> <li>Explicaci\u00f3n T\u00e9cnica (2-3 min): Describir c\u00f3mo se consume la API, el manejo del DOM y decisiones de dise\u00f1o.</li> <li>Conclusi\u00f3n (1-2 min): Resumir aportes, desaf\u00edos superados y posibles mejoras.</li> </ul>"},{"location":"content/p9/#calculo-de-la-nota-final","title":"C\u00e1lculo de la Nota Final","text":"<p>La nota final del proyecto se calcula como el promedio ponderado de las tres clases:</p> <ul> <li>Clase 1: 30%</li> <li>Clase 2: 30%</li> <li>Clase 3: 40%</li> </ul>"},{"location":"content/p9/#instrucciones-para-la-evaluacion","title":"Instrucciones para la Evaluaci\u00f3n","text":"<ul> <li>Cada clase debe entregar los avances correspondientes en un repositorio (por ejemplo, GitHub).</li> <li>La exposici\u00f3n en la Clase 3 debe ser presentada por todos los miembros del equipo.</li> <li>Se valorar\u00e1 la colaboraci\u00f3n y la distribuci\u00f3n equitativa de tareas entre los integrantes.</li> <li>Aseg\u00farense de que la API est\u00e9 ejecut\u00e1ndose (por ejemplo, en <code>http://localhost:3000</code>) para probar la interfaz.</li> <li>Si usan dependencias externas (como Bootstrap), incl\u00fayanlas v\u00eda CDN para simplicidad.</li> </ul>"},{"location":"content/p9/#ejemplo-adicional-filtrar-tareas-por-categoria","title":"Ejemplo Adicional: Filtrar Tareas por Categor\u00eda","text":"<p>Si la API incluye una entidad <code>Category</code> y un endpoint <code>GET /tasks?categoryId=ID</code>, puedes extender el ejemplo anterior para incluir un filtro por categor\u00eda.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Gesti\u00f3n de Tareas con Filtro&lt;/title&gt;\n  &lt;style&gt;\n    body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }\n    .form-container { margin-bottom: 20px; }\n    input, button, select { padding: 8px; margin: 5px; }\n    .task-list { list-style: none; padding: 0; }\n    .task-item { border: 1px solid #ccc; padding: 10px; margin: 5px 0; display: flex; justify-content: space-between; align-items: center; }\n    .error { color: red; }\n    @media (max-width: 600px) { input, button, select { width: 100%; box-sizing: border-box; } }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Gesti\u00f3n de Tareas&lt;/h1&gt;\n  &lt;div class=\"form-container\"&gt;\n    &lt;input type=\"text\" id=\"taskTitle\" placeholder=\"T\u00edtulo de la tarea\" required&gt;\n    &lt;select id=\"categorySelect\"&gt;\n      &lt;option value=\"\"&gt;Todas las categor\u00edas&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;button onclick=\"crearTarea()\"&gt;Crear Tarea&lt;/button&gt;\n  &lt;/div&gt;\n  &lt;p id=\"mensaje\" class=\"error\"&gt;&lt;/p&gt;\n  &lt;ul id=\"taskList\" class=\"task-list\"&gt;&lt;/ul&gt;\n\n  &lt;script&gt;\n    const API_URL = 'http://localhost:3000';\n    const taskList = document.getElementById('taskList');\n    const taskTitle = document.getElementById('taskTitle');\n    const categorySelect = document.getElementById('categorySelect');\n    const mensaje = document.getElementById('mensaje');\n\n    // Cargar categor\u00edas y tareas al iniciar\n    cargarCategorias();\n    cargarTareas();\n\n    // Cargar categor\u00edas\n    async function cargarCategorias() {\n      try {\n        const response = await fetch(`${API_URL}/categories`);\n        if (!response.ok) throw new Error('Error al cargar categor\u00edas');\n        const categorias = await response.json();\n        categorias.forEach(categoria =&gt; {\n          const option = document.createElement('option');\n          option.value = categoria.id;\n          option.textContent = categoria.name;\n          categorySelect.appendChild(option);\n        });\n      } catch (error) {\n        mensaje.textContent = error.message;\n      }\n    }\n\n    // Cargar tareas con filtro opcional\n    async function cargarTareas() {\n      const categoryId = categorySelect.value;\n      const url = categoryId ? `${API_URL}/tasks?categoryId=${categoryId}` : `${API_URL}/tasks`;\n      try {\n        const response = await fetch(url);\n        if (!response.ok) throw new Error('Error al cargar tareas');\n        const tareas = await response.json();\n        taskList.innerHTML = '';\n        tareas.forEach(tarea =&gt; {\n          const li = document.createElement('li');\n          li.className = 'task-item';\n          li.innerHTML = `\n            &lt;span&gt;${tarea.title} (${tarea.category?.name || 'Sin categor\u00eda'})&lt;/span&gt;\n            &lt;div&gt;\n              &lt;button onclick=\"editarTarea(${tarea.id}, '${tarea.title}')\"&gt;Editar&lt;/button&gt;\n              &lt;button onclick=\"eliminarTarea(${tarea.id})\"&gt;Eliminar&lt;/button&gt;\n            &lt;/div&gt;\n          `;\n          taskList.appendChild(li);\n        });\n      } catch (error) {\n        mensaje.textContent = error.message;\n      }\n    }\n\n    // Crear tarea\n    async function crearTarea() {\n      const title = taskTitle.value.trim();\n      const categoryId = categorySelect.value || null;\n      if (!title) {\n        mensaje.textContent = 'El t\u00edtulo es obligatorio';\n        return;\n      }\n      try {\n        const response = await fetch(`${API_URL}/tasks`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ title, categoryId: categoryId ? parseInt(categoryId) : null })\n        });\n        if (!response.ok) throw new Error('Error al crear tarea');\n        taskTitle.value = '';\n        mensaje.textContent = 'Tarea creada con \u00e9xito';\n        cargarTareas();\n      } catch (error) {\n        mensaje.textContent = error.message;\n      }\n    }\n\n    // Editar tarea\n    async function editarTarea(id, currentTitle) {\n      const newTitle = prompt('Editar t\u00edtulo:', currentTitle);\n      if (newTitle &amp;&amp; newTitle.trim()) {\n        try {\n          const response = await fetch(`${API_URL}/tasks/${id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ title: newTitle.trim() })\n          });\n          if (!response.ok) throw new Error('Error al editar tarea');\n          mensaje.textContent = 'Tarea editada con \u00e9xito';\n          cargarTareas();\n        } catch (error) {\n          mensaje.textContent = error.message;\n        }\n      }\n    }\n\n    // Eliminar tarea\n    async function eliminarTarea(id) {\n      if (confirm('\u00bfSeguro que quieres eliminar esta tarea?')) {\n        try {\n          const response = await fetch(`${API_URL}/tasks/${id}`, {\n            method: 'DELETE'\n          });\n          if (!response.ok) throw new Error('Error al eliminar tarea');\n          mensaje.textContent = 'Tarea eliminada con \u00e9xito';\n          cargarTareas();\n        } catch (error) {\n          mensaje.textContent = error.message;\n        }\n      }\n    }\n\n    // Actualizar tareas al cambiar categor\u00eda\n    categorySelect.addEventListener('change', cargarTareas);\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n del Ejemplo Adicional:</p> <ul> <li>HTML: Agrega un <code>&lt;select&gt;</code> para filtrar tareas por categor\u00eda.</li> <li>CSS: Mantiene el dise\u00f1o responsivo y limpio.</li> <li>JavaScript:<ul> <li>Carga las categor\u00edas desde <code>GET /categories</code> para llenar el <code>&lt;select&gt;</code>.</li> <li>Filtra tareas usando el par\u00e1metro <code>categoryId</code> en <code>GET /tasks?categoryId=ID</code>.</li> <li>Permite crear tareas con una categor\u00eda opcional.</li> </ul> </li> <li>Funcionalidad: Extiende el ejemplo anterior con un filtro din\u00e1mico por categor\u00eda, mejorando la interacci\u00f3n con la API.</li> </ul>"},{"location":"pi/p1/","title":"Introducci\u00f3n Proyecto Integrador","text":""}]}